------------------------------ 초기 setting 과정 ------------------------------
1.Apache Tomcat-9.0.41 SetUp 과정
	C:\Program Files\Java\jre1.8.0_261 버전으로  jre 설치되어있는것 확인하기
	→ Destination Folder 에서 C:\Program Files\Apache Software Foundation\Tomcat 9.0로 되어있는 것을
	→ C:\Tomcat 9.0로 짧게 경로 바꿔주고 Install
2.워크 스페이스 생성
3. 프로젝트 생성
	File → New → Dynamic Web Project 또는 File → New → other... → Web → Dynamic Web Project
	만약 Dynamic Web Project가 안보인다면 Web Project(Web applications) 가능한 이클립스 재설치
	이클립스 재설치 : eclipse-inst-win64.exe 파일 실행 후 Eclipse IDE for Enterprise Java Developers(두번째) 눌러서 설치
4. Tomcat 설치 후 초기에 Run On Server(초록버튼) 실행 시 설정 단계
	How do you want to select the server? 에서 Manually define a new server 선택
	→ Apache에서 Tomcat v9.0 Server 클릭 후 next
	→ Tomcat installation directory 비어있는 부분에 입력
	→ Brouse 클릭
	→ C드라이브 Tomcat9.0 저장해놨던 폴더 한번 클릭 후 폴더선택
	→ finish
5. Tomcat Servers 생성 및 설정
	하단 Servers 탭 → tomcat v9.0 더블클릭
	→ port number (tomcat admin port 옆) 빈칸에  '9191' 입력 후 엔터 (9191 포트번호로 웹서버와 통신하면서 실행하겠다는 뜻) 
	→ ctrl+s (저장)
	→ Ex01 탭와서 다시 실행하면 insert html 창에 오류뜨면서 Inner Web Browser(이클립스 내부 브라우저)로 실행됨
	
[meta charset = 기본으로 설정된 meta charset="EUC-KR"을 "UTF-8"로 설정하는 방법]
	Window탭 → Preferences → Web = Html Files → 오른쪽 Encording에서 UTF-8 선택(맨 첫번째)
	EUC-KR : 영어는 기본이고 한글 처리 하겠다는 뜻
	UTF-8 : 다른 외국어까지 처리하겠다는 뜻

※모든 파일은 WebContent 찍고 실행하기
	WebContent 찍고 파일 붙여넣기 해도됨
	또는 우클릭하고 new - folder 로 가져올 수 있음
	
------------------------------ HTML ------------------------------
■주석 단축키 : (ctrl + shift + /) <!--주석-->로 표현함

■요소(Element)
시작과 종료 태그의 조합
셀프 클로징 태그 = 비어있는 태그 = 홀 태그 : meta,img,hr,br
열고 닫는 태그 사이에 입력할 것이 없을 경우 <태그명/>로 표시
■태그(Tag)
< >(꺽쇠)로 둘러 싸인 범위 안에 명령어 이름을 표시하며, 거의 모든 태그는 닫는 태그가 존재한다(/).
■속성(Attribute)
시작 태그 안에 삽입되며 =와 쌍따옴표를 이용하여 값을 지정한다.
태그 내의 [키="값"]으로 구성된 항목을 [속성]이라고 한다.
속성 위치 순서 상관없음
→ <태그 속성1="값1" 속성2="값2" 속성3="값3">
■값(Value)
속성에 들어 가는 실제 값이다.

■기본화면
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

</body>
</html>

●<html></html> : 문서의 맨 처음과 맨 끝에 들어감
●<head></head> : HTML 문서의 큰 제목 부분을 정함
●<title> </title> : 웹 페이지의 제목을 지정
●<body></body> : 웹 브라우저 화면에 보일 HTML 문서의 실제 내용이 기술되는 곳, HTML 문서의 본문
			 	  <body> 안에는 흰 바탕 화면에 실행되는 내용 작성
●link, vlink, alink : <body> 태그 내의 속성으로 사용이 된다. 링크, 방문한 링크, 클릭시 색을 지정

<body> 태그의 속성 :
	bgcolor(배경색), background(배경 이미지), text(본문 글자색)
	link(링크색), vlink(방문한 링크 색), alink(클릭하는 순간 링크색)
	leftmargin(왼쪽 여백), righrmargin(오른쪽 여백)
	topmargin, oncontextmenu, onselectstart, bgproperties, scroll


------------------------------ 서식 관련 태그 ------------------------------
●블럭(block)요소 : h1~h6, p, div, ul, ol
	그 줄 전체를 차지하며, 한줄 다 차지하지 못하도록 너비/높이 속성 지정해준다. 문단을 나눌 때 사용
●인라인(inline)요소: span, img(너비높이 속성 지정 가능) - 내가 원하는 만큼만 영역으로 잡음.
	일반적으로 인라인 요소는 너비/높이 속성 필요없지만, img는 너비/높이 속성 지정 가능하다.

<h1~6>제목</h1~6> : 클자크기 1~6 지정, 숫자가 작을수록 글씨가 큼, 자동 줄바꿈(엔터) 기능있음
<p>내용</p> : 본문에서 단락(문단)을 구분/나눌 때 사용, 자동 줄바꿈(엔터) 기능 있음
<div></div> : 블럭 레벨 요소, 구역(division)을 나타내는 요소
<br> : 줄 바꿈(엔터) / 닫는 태그 없어도 됨

<b>내용</b> : 지정된 내용을 굵게(bold)
<em></em> : 강조, 이태릭체(기울임)
<i></i> : 이태릭체(italic)(기울임)
<u> </u> : 밑줄(underline)
<sub> </sub> : 아래 첨자(subscript)
<sup> </sup> : 위 첨자(superscript)
<hr></hr> : 수평선(horizontal rule)입력, 분리선 긋기 - 속성 들어갈 수 있음
	<hr size=n width=n align=left|center|right></hr> 수평선의 세로 두께,가로 넓이,문단에서 왼쪽|중앙|오른쪽을 지정
<font size=n color=영어,색상코드 face=글꼴체>내용</font> 글자를 크기,색상,글꼴을 지정

 <caption>렌터카 요금표</caption> : 제목 넣는 태그
 <tr></tr>: table 줄
 <th></th>: 글자 진해짐 (제목 쓸 때 많이 사용)
 <td>/<td>: table 칸

------------------------------ 목록 관련 태그(HTML_Ex02) ------------------------------
→ 리스트(목록) 만들기 : <ul> 태그와 <ol> 태그
→ 리스트 형태의 문서를 만들 때 사용
→ <li>로 목록(쓰고싶은 것) 묶어줌
→ <ul속성>, <ol속성> 과 같이 속성 써줄 수 있음

●<UL><LI></UL> : 비순차적 목록(Unordered List)
	번호에 관계없이 목록을 나열할 때 사용
	type : square(사각형),circle(흰원),disc(검은원,default값)
	→ 속성 작성 : <ul type="disc"> 또는 <ul type=" ">
●<OL><LI></OL> : 순차적 목록(Ordered List)
	번호가 있는 목록이 시작하는 곳에 <OL>을 사용
	type : A,a(알파벳),I,i(로마숫자),1(숫자,default값)
	→ 속성 작성 : <ol type="1"> 또는 <ol type=" ">
●<DL><DT><DD></DL> 정의 리스트(Definition List)
	용어에 대한 설명이나 정의를 위해 사용, 기본적으로 들여쓰기 하는 기능 있음
	dl,dt(제목),dd(내용) : 용어 정의
<!-- dl:정의목록태그, dt:정의용어태그  dd:정의설명태그 -->

------------------------------ 그림 관련 태그(HTML_Ex03) ------------------------------
●<img> 태그는 그림을 삽입하기 위한 태그

alt : 이미지를 표시할 수 없을 때 대신 출력할 내용(글)
src : 보여줄 이미지의 경로(중요)
width : 이미지의 가로 크기를 지정
height : 이미지의 세로 크기를 지정
title : 이미지 위에 마우스 포인터 올리면 나타나는 툴팁
border : 이미지 테두리 두께(굵기)
align : 이미지 옆에 출력될 텍스트 정렬 방식(top, middle, bottom, left, right)
	<img src="파일명" width=n height=n border=n> 
	<img src="파일명" alt="그림설명" align=left, center, right> - Alt=그림에 대한 설명, ALIGN=그림정렬방식
	<img src="파일명" align=top, middle, bottom> - 그림 다음에 오는 글자를 그림의 상단,중앙,아랫부분에 집어넣을 수 있도록 지정
loading : 이미지 로딩 방식(모든 브라우저가 loading 속성을 지원하는 것은 아님)
	lazy: 모든 이미지를 로드하지 않고 일부만 불러옴
	eager: 모든 이미지를 불러옴(default값)
	
./images : 현재위치(WebContent) 밑에 있다 (./생략가능)
./../images : 같은폴더 위치 아니고, 현재폴더 상단에 있는 폴더(WebContent)


●<figure> : 사진, 이미지, 다이어그램 등을 감싸는 요소
<figcaption>이미지제목</figcaption> : figure 요소에 캡션을 만든다. figure 요소의 자식 요소이며,제일 처음 또는 제일 마지막에 위치
<img/> : img와 figcaption 위치 순서에 따라 figcaption 글자의 위치가 이미지 상단/하단에 위치한다.
</figure>

------------------------------ audio, vidio(HTML_Ex04) ------------------------------
★ audio, vidio 모두 외부 브라우저에서 실행해야 잘 실행됨

●<audio> 태그는 HTML 문서에 오디오을 삽입하는 태그

.ogg: firefox,opera 브라우저에서 실행 가능
.mp3: 인터넷 익스플로러,safari,chrome 브라우저에서 실행 가능


●<vidio> 태그는 HTML 문서에 동영상을 삽입하는 태그
→ HTML 5에서 추가된 것이므로, HTML 5를 지원하지 않는 웹브라우저(예를 들어 IE 8 이하)에서는 작동하지 않음
→ 상충되거나 혼자서는 작동하지 않는 속성이 있다. 예를 들어 autoplay로 정하면 preload는 무시됨
→ 크롬 등 일부 웹브라우저에서는 muted와 autoplay를 같이 사용해야 자동 시작이 작동함.

<video autoplay controls="controls" loop muted poster="aaa" preload="bbb">
  <source src="xxx" type="yyy">
  zzz
</video>

→ controls ="controls" 이므로 속성=값일 경우 값 생략가능, 속성은 위치 순서 상관없음
autoplay: 동영상을 자동으로 재생
controls: 재생, 정지 등 조작 메뉴를 보여줌
loop: 동영상을 반복 재생
muted: 음소거
poster: 동영상 재생 전에 보여줄 이미지
preload: 페이지를 열 때 무엇을 로드할지 정함
	auto: 동영상, 메타데이타 모두 로드
	metadata: 메타데이타만 로드
	none: 로드하지 않음
source
	src: 동영상 위치를 입력. 웹브라우저가 가장 많이 지원하는 형식은 MP4
	type: 동영상 타입을 알려줌. 만약 MP4 파일이라면 video/mp4라고 적는다.
	zzz: 웹브라우저가 video 태그를 지원하지 않을 때 출력될 텍스트

------------------------------ a 태그(HTML_Ex05) ------------------------------
●<a> 태그
→ 에이 태그 또는 앵커(anchor) 태그라고 부른다.
→ 하이퍼-링크로 많이 사용되는 태그이다.
→ 밑줄이 자동으로 생긴다.

href: 하이퍼링크의 주소(url)를 지정한다.
target: 링크를 어디에서 열지 정한다.
	_self : 같은 웹 브라우저 창(현재 페이지)에서 링크를 처리(default값)
	_blank : 새 창 또는 새 탭에서 링크를 처리
	_parent : 부모 요소의 웹 브라우저 창(부모가 없으면 _self 처럼 표시)
	_top : 최상위 부모 요소의 웹 브라우저 창

방법① 글자를 누르면 링크된 주소로 이동
	<a href="http://www.daum.net" title="www.daum.net" target="_self">다음</a>
document.write("<a href='http://www.melon.com'>멜론<a>&nbsp;&nbsp;"); // 멜론 글자 클릭해서 주소이동
/* &nbsp; : 띄어쓰기 */
방법② 그림을 누르면 링크된 주소로 이동
	<a href="https://www.starbucks.co.kr/">
		<img src="images/cafe2.jpg" width="100" height="100">
	</a>
방법③ 또다른 html로 넘어가도록 (같은 위치에 있으면  ./ 지정하지 않고 불러올 수 있음)
	<a href="./Ex03_img.html">
		<img src="images/cafe1.jpg" width="100" height="100">
	</a>
방법④ 글자를 누르면 링크된 주소로 이동 - 문자열에 .link() 함수 이용
document.write("줌".link("http://www.zoom.us"));
	
------------------------------ 프레임(HTML_Ex06) ------------------------------
●<iframe> : 내부 프레임(inline frame)이라는 의미로 하나의 HTML문서내에서 다른 HTML문서를 보여주고자 할때 사용 (프레임을 만들어서 그 안에 들어오게하기)
<frameset> 태그 사이에 올 필요가 없으며, 독립적으로 마치 <img> 태그를 사용하듯 문서내의 원하는 위치에 삽입할 수 있다.
→ 아이프레임에서 사용할 수 있는 속성도 <img> 태그과 유사함.

<iframe></iframe>
	src: iframe에 삽입될 문서의 주소
	width: iframe의 너비 지정(px,% 가능)
	height: 높이 지정(px,% 가능)
	frameborder: iframe 경계선의 두께를 지정(테두리를 표시할지 말지 지정-1은 표시,0은 표시X)
	marginwidth: 내용의 위(top),아래(bottom) 여백 지정
	marginheight: 내용의 좌(left),우(right) 여백 지정
	scrolling: iframe 스크롤바 사용여부를 지정
		yes: 스크롤바가 생김(default값)
		no: 스크롤바가 생기지 않음
		auto: 자동
	align: iframe 정렬 (top:위, middle:중앙, bottom:아래, left:왼쪽, right:오른쪽)
	name: target이 필요한 프레임의 이름
<iframe src="http://www.starbucks.co.kr/" frameborder="0" width="600" height="300"
	marginwidth="0" marginheight="0" scrolling="yes">

------------------------------ id (HTML_Ex07) ------------------------------
●id 속성 : id=""
→ 특정 위치로 가고싶을 때 사용, 책갈피 효과, 값은 아무거나 넣어도됨
	이동하고 싶은 곳 속성에 id 달아주기
→ id 설정해둔 곳으로 가고 싶을때는 #을 사용

<body>
<ul>
<li><a href="#Toy1">Toy1</a></li>
</ul>

<h2 id="Toy1">Toy1</h2>
	<img src="images/toy1.jpg" width="250" height="500"
		alt="Toy1.jpg 이미지 입니다." />
<br>
	<a href="#">맨 위로 이동하기</a>
</body>

------------------------------ 이미지맵 (HTML_Ex08) ------------------------------
●이미지맵(image map): 이미지 상의 클릭 위치에 따라 다른 링카가 열리도록 하는것

<map> 태그: 이미지맵을 만드는 태그
→ name 속성을 통해 이름을 지정하고 <img> 태그에 usemap 속성으로 이미지 맵을 지정한다.
→ <map> 태그의 name의 이름과 usemap 속성의 value는 동일해야한다.
→ usemap 속성의 값에는 #을 앞에 작성해야한다.
→ map요소는 몇 가지의 area 요소를 포함, area요소는 이미지맵에서 영역을 지정한다.

<area> 태그: <map></map> 요소 내부에 포함되어 작성
alt: 대체 텍스트 지정
coords: 링크로 사용할 area(영역)의 좌표 지정(0,0이 왼쪽 상단)
href: 이동할 주소 지정
shape: area(영역)의 형태를 지정 
	rect: 사각형 모양(default값)
		coords="100,100,200,200"/> x1(좌표),y1(좌표),x2(가로길이),y2(세로길이)
		(100,100)좌표 영역 부터 (200,200)좌표 영역까지 사각형으로 지정하겠다는 뜻
	circle: 원형 영역
		coords="60,40,30"/> x1(원 중심좌표), y1(원 중심좌표), 반지름
	poly: 다각형 영역(x1,y1을 시작으로 꼭지점의 갯수대로 늘어나게된다.)
		삼각형: coords="x1,y1,x2,y2,x3,y3" (최소한의 도형)
		육각형: coords="x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6"
		(중요)반드시 한 방향으로만,차례대로 좌표값 입력해야함. x1,y1 으로 갔다가 갑자기 x4,y4로 갈 수 없음.
		
------------------------------ table (HTML_Ex09~Ex11) ------------------------------
//java에서는 Jtable로 table 만들었었음
<table> 태그 : 표 만들기(엑셀 화면과 같이 생김)
<tr>: 줄
<td>: 칸
칸 하나 : 셀(cell)이라고 함
bgcolor="yellow": 색 설정
bgcolor="#1DDB16": 색을 16진수로 바꿔서 표시
	R(red),G(green),B(blue) 각 2자리 씩 총 6자리로 구성
	각 색상은 0부터 255(FF)까지 총 255의 색상을 가지고 조합될 수 있다.
	앞에 #를 붙여서 표기한다.
cellspacing="0": 셀과 셀 사이의 간격 설정
cellpadding="10": 안쪽 여백 설정(셀과 내부 글자와의 간격을 벌려줌)
background="./images/book.jpg" : 배경으로 사진 불러오기

rowspan="2" : 행(칸 밑으로) 몇 줄 병합할지 여부
colspan="2" : 열(칸 옆으로) 몇 줄 병합할지 여부
align="center|rignt|left" : 정렬 방법 설정
	

→ 	<table border="1" width="300" height="200" 
				cellspacing="0" cellpadding="10" background="./images/book.jpg">
			<tr bgcolor="#1DDB16">
				<td bgcolor="yellow">가가가</td>
				<td>나</td>
				<td>다</td>
			</tr>
	</table>
	
→ 	<table border="1" width="400" height="300">
		<tr>
			<td rowspan="2">일</td>
			<td>이</td>
			<td>삼</td>
		</tr>
		
		<tr>
			<td colspan="2">사</td>
			<!-- <td>오</td> -->
			<!-- <td>육</td> -->
		</tr>
		
→ 	</table>
	
		<table border="1" width="400" height="300">
		<tr>
			<td rowspan="3" bgcolor="pink" align="center">일</td>
			<td colspan="3" bgcolor="yellow">이</td>
		</tr>
		
		<tr>
			<td colspan="2">삼</td>
			<td rowspan="3" bgcolor="#2FED28" align="right">사</td>
		</tr>
		
		<tr>
			<td bgcolor="#FF8224">오</td>
			<td bgcolor="cyan" align="center">육</td>
		</tr>
		
		<tr>
			<td colspan="3" bgcolor="blue"><font color="white" size="3">칠</font></td>
		</tr>
	</table>	
------------------------------ form (HTML_Ex12) ------------------------------
 자바 : JTextField
<form> 태그: 데이터를 서버로 전송하는 태그(검색 창, 게시판, 로그인, 주문서, 회원 가입 등에 활용)
관련 속성: name(폼 이름), method(전송 메소드), action(이동할 페이지), targe

<imput> 태그: 사용자로부터 정보를 받아들이는 용도로 사용
type: 입력 태그의 유형
value: 입력 태그의 초기값을 말하며 사용자가 변경 가능함(실제 들어 있는 값 또는 사용자가 입력한 값)
name: 서버로 전달되는 이름을 말함(사용자 임의지정), 컨트롤에 이름을 부여
	input type="유형" name="이름"
	
<lable> 요소: input, textarea, select 요소와 같은 폼 요소의 제목을 달 때 사용

type 속성값: input type="유형"
	text: 텍스트(문자)를 입력하는 창 생성
	password: 비밀번호 입력하는 창 생성(비밀번호처럼 입력한 것 가려짐)
	email: @이메일 형태로 작성하지 않으면 오류남
		<input type="text" name="userEmail1" /> @
			<select name="userEmail2">
				<option>###선택###</option>
				<option value="nate.com">nate.com</option>
				<option value="다음">daum.net</option>
				<option value="naver.com">naver.com</option>
			</select>
	date: 날짜입력(외부 브라우저에서 보면 달력으로 나타남)
	week: 주와 연도 선택 컨트롤 창 생성(외부브라우저 확인)
	number: 숫자만 입력받는 컨트롤 창 생성
	radio: name 값이 같으면 하나만 선택 가능, name 값이 다르면 다중 선택가능-  checked 써주면 기본으로 클릭되서 나옴
	range: 지정한 숫자 사이의 숫자 선택 슬라이더 컨트롤 창 생성(평점) 
	checkbox: 체크박스 생성(여러개 선택가능)
		type="checkbox" value="바베큐" checked="checked" (이미 선택되어 나옴)
		속성이 같을 경우(checked="checked")에는 checked만 입력해도됨
	tel: 전화번호 입력받아서 검증하는 컨트롤 창 생성
	file: 파일을 지정할 수 있는 컨트롤(파일 업로드)
	
	
	<fieldset> 요소: 폼 컨트롤(input, select, textarea) 및  입력 박스들을 그룹화하는 용도로 사용, 자동으로 테두리가 생성
	복수의 컨트롤 요소를 하나의 그룹으로 범위를 정의하며 그룹화 및 구조화 할 수 있다.
			<fieldset style="width:30%">
				<legend>예약할 객실을 선택하세요</legend>
				<input type="radio" name="userRoom1" /> Single
				<input type="radio" name="userRoom2" /> Double
				<input type="radio" name="userRoom3" checked="checked"/> Twin
			</fieldset>	
	
	<select> <option></option> </select> : 콤보박스라고도 하며 Pull-Down Menus라고 표현하기도 한다. (여러 옵션 중 하나 선택할 때 사용)
	<select></select>: 목록 상자의 시작과 끝
	<option>: 목록 상자에 포함될 항목 지정
	<textarea></textarea>: 여러 줄 입력상자
		<textarea name="userMessage" rows="4" cols="30"></textarea> - text 여러줄 입력 가능, rows:몇줄, cols:한줄에 몇글자
	
	button: 일반 버튼 생성(단순히 버튼 눌리는 기능)
	submit: db에 입력한 내용을 서버로 제출/전송하는 버튼 생성 (☆action일 경우에만 jsp로 넘겨서 db작업 해줄 수 있음)★
	reset: 클릭과 동시에 입력한 것 모두 지워짐


------------------------------ ※용어※ ------------------------------
style="" - 영역에 디자인 넣고 싶을 때 사용
font: italic 30px "Times New Roman"
	font-size:12px; - 글자 크기
	font-weight:bold /* 글자 굵게 */
		normal | bold | bolder | lighter | lighter
	font-family: "맑은 고딕", 궁서; /* 폰트 설정(처음쓴 글꼴이없으면 두번째 폰트로 넘어감-글자에 공백있으면 ""로 묶기) */
	font-style: italic|nomal;
text-align: center|left(default값)|right|justify(양쪽정렬) - 문단 정렬

color:#FF00DD; - 글자 색
line-height:150%; - 줄간격
background-color: green; - 배경색
background-color: rgb(205,205,205); /* 색표시 방법은 3가지 */

width: 50%; /* 너비 */
line-height: 150%; /* 상하 문자열 간의 줄 간격 */
list-style: none; /* 리스트 스타일 지정X */
	square(사각형),circle(흰원),disc(검은원),lower-alpha(알파벳 소문자),upper-alpha(알파벳 대문자),upper-roman(로마자(소문자) 숫자),lower-roman(로마자(대문자) 숫자)
list-style-position: 리스트의 블릿이 밖에 있을지, 안에 있을지를 결정
	outside: 블릿을 바깥에 위치(default값)
	inside: 블릿을 내부에 위치
	inherit: 부모의 값을 상속 받음
list-stype-image : url('../img/dot.png'); /* 리스트 블릿으로 기본 형태가 아닌 이미지를 사용하고자 할 때 사용한다. 속성 값으로 해당 이미지 주소 url을 적어주면 된다. */
text-decoration: none; /* 하이퍼링크 기본으로 들어가는 글자에 밑줄 없애고 싶을 때 */
	unerline(글자에 밑줄), overline(글자에 윗줄), line-through(글자에 줄긋기), blink(문자열 깜빡임)

border: 1px solid #000; /* 테두리 굵기, 테두리종류(solid 실선), 테두리 색깔 */
	border-bottom: dotted; /* 테두리 종류dotted(점선 밑줄) */
	border-bottom-color: red; /* 테두리 색 설정 */
	border-radius: 40px; /* 숫자가 클 수록 테두리 둥글게 설정 */
	border-radius: 70px 20px 10px 3px; /* 왼쪽상단 부분을 첫 시작으로 시계 방향 순으로 설정  */
	border-radius: 70px 20px; /* 70px 20px 70px 20px 와 같다고 보면됨 */
padding:30px; /* 30px만큼 안쪽 전체(사방으로) 여백 설정 */
	padding-top|bottom|left|right
	padding: 10px 20px 50px 100px; /* top right bottom left(시계방향순으로 작성) */
	padding: 10px 30px; /* (10px 자리 : top,bottom / 30px자리: right,left) */
margin: 20px; /* 바깥쪽 여백 전체(사방으로) 설정-줄간격*/
	margin-top|bottom|left|right
	margin: 10px 5px 10px 20px; /*top right bottom left (시계방향순으로 작성) */

background: url(../images/dot.png) repeat-x bottom left;
	background-color: 색상;
	background-image: url(./../images/shoes1.png); /* 이미지 불러와서 배경 설정-이미지 계속 반복 */
	background-repeat: repeat-y; /* y축 또는 x축 한줄로만 반복 넣기 */
	background-repeat: no-repeat; /* 반복하지 않는다 */
	background-position: top right; /* default값 : top left */
	background-attachment: fixed; /* 배경 이미지는 멈춰있고 글만 움직임 (default값: scroll) */

float: right; /* 이미지가 오른쪽 비어있는 공간으로  띄어오르게하기 */
clear : left; /* 이미지가 왼쪽에 떠오르지 않도록 하기 */

→ 그림자 효과
/* h1영역을 박스처럼 생각해서 좌우위치 위아래위치 번짐정도 그림자,글씨 색지정 */
	box-shadow: 10px 20px 30px #ff0066;
	text-shadow: 5px 20px 7px #000;
→ 테이블
order: 1px solid black; /* 전체 테두리 */
border-collapse: collapse; 
	separate: 셀 테두리를 겹쳐서 표시
	collapse(default값): 셀의 테두리 선 간격을 벌려 표시
empty-cells: hide; /* 값이 비어있는 셀 안보이게 설정 */
border-spacing: 0px; /* 셀과 셀 사이의 간격 설정 */

→ 다단 나누기
column-count: 6; /* 6칸으로 단이 나뉨 */
column-rule: 1px dashed #666; /* 단과 단 사이 구분선 넣고 싶을 때 */
column-gap: 40px; /* 칼럼과 칼럼 사이에 간격 설정 */
text-align:justify; /* 문단 양쪽 정렬 */

→ 벤더 프리픽스(Vendor Prefix):
	어떤 속성, 스타일들의 기능이 가끔 실행 안될 경우 맨 앞에 붙여서 사용
	회사별로 붙여주는 접두어
-webkit-: 크롬, Safari 에서 실행할때 사용
-moz-: Firefox
-ms-: IE(인터넷익스플로어)
	↓
-webkit-column-count: 6;
-moz-column-count: 6;
-ms-column-count: 6;

→ transform 속성: 요소에 회전, 크기 조절, 기울이기, 이동 효과
transform: rotate(20deg); /* 네모칸 가운데 중심 기준으로 20도만큼 기울이기(degree), 음수도 가능 */
transform: rotate(20deg); /* (-20deg) 음수 넣으면 반대반향(반시계뱡향으로) 모양 돌아감 */
transform-origin: 0% 0%; /* 0.0 좌표 중심 기준으로 고정하고 기울이기 */
transform: skewX(20deg); /* 사다리꼴 모양으로 기울인 형태(찌그러진 효과)-skewX, skewY */
transform-origin: 0% 100%; /* 왼쪽 하단을 중심으로 고정하고 거기를 기준으로 기울임 */
	/* 기본 중심 default값: 50% 50% */
	/* 0,0 → 좌측 상단, 0,100 → 좌측 하단, 100,0 → 우측 상단 , 100,100 → 우측 하단   */ 

→ display: 원래의 속성 특징을 바꾸고 싶을 때 display 사용 (img, table 태그에서 주로 사용)
	none: 아무 속성도 갖지 않겠다는 뜻 (해당 요소를 화면에 표시하지 않음)
	inline: 인라인 요소로 형식을 바꿈 (default값)
	block: 블록 요소로 형식을 변경, 블럭요소의 특징을 가져서 한칸씩 띄어짐

document.write(typeof('abc') + "<br>"); // typeof: 데이터 타입이 뭔지 알 수 있는 함수


●대화상자:
prompt: 입력 받을 수 있는 창(입력대화상자)
	형식: prompt("윈도우창", "메세지 입력창");
	확인 버튼 : 내가 입력한 것이 출력됨
	취소 버튼: null값 반환 (내가 입력한 것 무시됨)
confirm: 확인/취소 버튼있는 창 생성(보통 두가지 선택지[boolean형태] 있을 때 사용)
	확인 버튼: answer:true
	취소 버튼: answer:false
alert: 확인 버튼 하나만 있는 대화상자(경고창 비슷)
		
●조건(삼항) 연산자
	조건 ? 참(일때수행할식) : 거짓(일때수행할식)
	예시) var result = answer ? "yes" : "no" ;



------------------------------ 02_CSS/chap01 ------------------------------
☆HTML에서는 style="" 으로 사용하지만, CSS에서는 :로 속성 지정해줌

●스타일 적용 방법① 인라인 방식 : Body에서 직접 적용
→ 스타일형식 : <style type="text/css"></style>
▶블록 요소에 인라인 방식으로 CSS 적용하기(1-1)
	<body>
		<h1>블록 요소에 인라인 방식으로 CSS 적용하기</h1>
		<!-- 인라인 스타일로 p 요소에 CSS를 적용합니다. -->
		<p style="font-size:12px; color:#FF00DD; line-height:150%; background-color:green;">Vegetables fit for use are recognized by the small sprout.<br />
		쓸모있는 야채는 어린 싹으로 알 수 있다. 될성 싶은 나무는 떡잎부터 알아본다.</p>
	</body>
	
▶span 요소의 사용과 특정 글자 꾸미기(1-2)
<span>영역잡기</span>: 특정 글자의 범위를 지정할 때 사용
	<body>
		<h1>span 요소의 사용과 특정 글자 꾸미기</h1>
		<!-- 특정 글자의 범위를 지정할 때 사용하는 span 요소를 사용하여 CSS를 적용합니다. -->
		<p style="color:orange; background-color: green;">
		<span style="color:white; backgroud-color: #FF3366">Vegetables</span> fit for use are recognized by the small sprout.<br />
		쓸모있는 <span style="color:green; background-color: #ffffff">야채</span>는 어린 싹으로 알 수 있다. 될성 싶은 나무는 떡잎부터 알아본다.</p>
	</body>

●스타일 적용 방법② 내장 CSS/유형 선택자 : <head> 요소 내에 <style> 요소를 사용하는 방식 ★많이사용
→ id 스타일, class 스타일, tag 스타일
→ HTML 태그 모두에 적용됨
→ 미리 적용될 공통된 스타일들을 정의해 두고, 필요할 때마다 스타일을 호출
→ 이를 [Embedding Style Sheet]라고 부른다.
→ 태그이름 { 속성 : 값 ; … ; 속성 : 값 }

▶내장 CSS방식으로 문서 전체의 배경 색상, 글자 색상 적용하기(2-1)
	<head>
		<title> 문서 전체의 배경 색상, 글자 색상 적용하기 </title>
		<meta charset="UTF-8" />
		
		<!-- 밖에다 쓰면 모드 p태그에 적용 -->
		<style type="text/css">
		
			body{
				background-color: #000000;
				color:red;
			}
			
			p{
				background-color: gray;
				color:yellow; /* -위에있는걸 덮어쓰기함 */
				width:400px;
			}
		</style>
	</head>

●스타일 적용 방법③ 외장 CSS : 외부에 CSS 파일을 만들어 두고 내부로 불러 들여서 사용하는 방식 (자주 사용하는 스타일 외부에 만들어놓고 수시로 가져다 사용가능)
→ <style> 태그와 주석 부분을 제외한 나머지 부분을 따로 편집기로 작성한 다음 스타일 시트 파일로 저장한다.
→ 확장자를 [.css]로 붙여주고 필요할 때마다 페이지의 <HEAD> 부분에서 호출한다.

<HEAD>
	<link rel="stylesheet" type="text/css" href="Part2Ch0103.css">
</HEAD>

rel: 현재 표시된 문서와 href 속성에 명시된 URL로 지정한 문서간의 계층적인 관계를 나타내는 속성
href: 이동하려는 파일 또는 URL을 지정하는 속성
	스타일 시트 파일의 URL
type: 이동하려는 파일 또는 URL의 문서의 종류
	text/css(MIME 타입)

▶link 요소로 CSS 문서 연결하기(3-1)
[unit03_01_link_before.html 파일]
	<head>
		<title> link 요소로 CSS 문서 연결하기 </title>
		<meta charset="UTF-8" />
		<link rel="stylesheet" type="text/css" href="s0301.css" /> <!-- s0301.css를 여기에 적용할것 -->
	</head>
[s0301.css 파일]
	body{
		background-color: #000;
		margin-top : 50px;
		
	}
	
	h1{
		color:#fff;
		font-size: 35px;	
	}


------------------------------ 02_CSS/chap02 선택자 ------------------------------
▶태그 선택자(1-1)
●태그선택자: 요소 선택자라고 한다.해당되는 모든 요소에 스타일이 적용된다.
→ htmlTagElement { 속성 : 값 ; }
→ htmlTagElement에는 h1, h2, p 등과 같은 html 요소를 입력한다

	<head>
		<title>태그 선택자 사용하기</title>
		<meta charset="UTF-8" />
		<style type="text/css">
		/* h3 요소에 관련된 CSS 속성을 정의합니다. */
			h3{
				background-color: #000;
				color:#fff;
				width:50%; /* 너비 */
				margin-left: 20px; /* 줄간격 */
			}
		/* li 요소에 관련된 CSS 속성을 정의합니다. */	
			li{
				line-height: 200%;
				color:#660;
				font-size: 12px;
				margin-left: 20px;
			}
		</style>
	</head>

▶클래스 선택자(2-1,2-2)
●클래스 선택자: 사용자 정의 선택자/도트(dot)선택자라고도 한다.
→ 문서 내에서 여러 번 반복하여 재사용할 수 있다.
→ 특정한 부분만 선택하여 스타일을 적용하고자 하는 경우에 사용된다.
→ .className { 속성 : 값 ; }

		<style type="text/css">
			.cook1{
				background-color: #f03;
				color: #fff;
				border:1px solid #000; /* 테두리 굵기, 테두리종류(solid 실선|dotted 점선), 테두리 색깔 */
				padding:30px; /* 30px만큼 안쪽 여백 설정 */
				margin:20px; /* 바깥쪽 여백 설정*/
			}
			.cook2{
				background-color: #fc3;
				color: #783212;
				border:1px dotted #f00;
			}
			
			.reddotline{
				color: red;
				border-bottom: dotted;
				border-bottom-color: red; /* 테두리 색 */
			}
			
			.bluedotline{
				color:blue;
				border-bottom: dotted;
				border-bottom-color: blue;
			}
		</style>
		
	<h3 class="cook1">재료-4인분 기준</h3> <!-- class 속성 넣기 - 각각의 h3에 다른 스타일 적용 : .cook1 -->
	<h3 class="cook2">조리법</h3>

▶id 선택자(3-1,3-2)
●id 선택자: 식별 선택자
→ 문서 내에서 유일하게 한 번만 사용되어야 한다.(여러번 사용해도 에러가 나지는 않는다.)
→ #idName { 속성 : 값 ; }

		<title>아이디 선택자 사용하기</title>
		<meta charset="UTF-8" />
		<style type="text/css">
			#source{ /* id소스에 적용시킴 */
				background-color: #ffc;
				width:200px;
				line-height: 150%;
				list-style: none; /* 리스트 스타일 지정x */
				border:1px solid #000;
			}

		</style>
	</head>

	<body>
		<h1>아이디 선택자 사용하기</h1>
		<hr />
		<h2>도가니탕</h2> 
		<h3>재료-4인분 기준</h3>
		<ul id="source"> 
			<li>도가니 1개</li>
			<li>양지머리 300g</li>
			<li>무 200g</li>
			<li>마늘 5쪽</li>
			<li>대파 3뿌리</li>
			<li>생강 1쪽</li>
		</ul>

▶속성 선택자(4-1,4-2)
●속성 선택자: 속성에 적용하고 싶을 때 사용하는 선택자
→ a 요소를 이용하여 선택자를 정의

a[target]: target 속성에만 적용(html 요소에서 속성이 있는 요소를 선택자로 지정)
a[target="_blank"]: html 요소에서 속성에 특정 값이 지정되어 있는 요소를 선택자로 지정

a[title^="제과"] : ^ : a태그 title 속성에 제과로 시작하는 글자만 해당
a[title$="기능장"] : $ : 기능장으로 끝나는 글자만 해당
a[title*="산업기사"] : * :  중간에 산업기사 들어간 글자만 해당

▶자식 선택자(5-1)
●자식 선택자: 선택자 내의 직계 자식 요소만 선택자로 지정
→ 선택자1 > 선택자2 { 속성 : 값 ; }
●자손 선택자: 선택자 안에 삽입된 모든 요소(직계 여부에 상관 없이)를 지정할 때 사용
→ 선택자1 선택자2 { 속성 : 값 ; } : 선택자 사이에 띄어쓰기

h2>span{ /* h2의 자식인 span만 선택 적용 */
				color:#f00;
			}

▶인접 형제 선택자(5-2) - 같은 부모 안에있는 형제 선택 시 사용
●인접 형제 선택자: 같은 부모 안에있는 형제 선택 시 사용
→ 같은 단계의 요소를 '+'를 이용하여 정의한다
→ 선택자1 + 선택자2 { 속성 : 값 ; }

		<style type="text/css">
			hr+h3{ /* hr 바로 뒤에나오는 h3 자리 선택 적용 - 부모가 모두 body*/
				background-color: #f60;
			}
		</style>
			
▶링크 관련 가상 클래스 선택자(6-1)	
●가상 클래스 선택자:  
→ 하이퍼링크와 폼 입력 상자에 마우스 포인터의 접근 상태에 따라 서로 다른 디자인의 변화를 주어 동적인 형태로 반응할 수 있게 만든 클래스를 말한다.
→ 즉, 가상으로 클래스를 설정한 것처럼 작동하는 클래스를 말한다.

a:hover{ /* a 태그에 마우스 올렸을 때 적용됨 */
	background-color: #cf3;
}

a:focus{ /* a 태그에 마우스 클릭했을 때 적용됨 */
				background-color: #000;
				color:yelow;
			}

▶순서 관련 가상 선택자(7-1)	
●순서 관련 가상 선택자: 
:first-child /* 첫 번째 자식 요소를 찾음  */
	li:first-child { color:lime; background-color: brown; }
:last-child /* 마지막 자식 요소를  찾음  */
	li:last-child { color:blue; }
:nth-child /* 맨 앞에서부터 특정 자식 요소를 찾음  */
	li:nth-child(even) : 짝수
	li:nth-child(odd) : 홀수
	li:nth-child(n) : n 번째
:first-letter /* 첫 번째 글자를 찾음  */
:first-line /* 첫 번째 행을 찾음  */
:before /* h1~h6, p 등과 같이 글자의 입력과 관련된 요소의 앞에 문자열이나 특수 기호를 삽입한다. content 속성 값으로 지정한 글자가 표시된다. */
	dt:before { /* 모든 dt태그 앞에 // 넣으라는 뜻 */
	content: "    //     ";
	font-size: 2em;
	color: #666;
	}
		
:after /* h1~h6, p 등과 같이 글자의 입력과 관련된 요소의 뒤에 문자열이나 특수 기호를 삽입한다.
		content 속성 값으로 지정한 글자가 표시된다.
		span.weight:after {
 		content: "lbs"; color:#bbb;
		}
		span 요소들 중에서 클래스 속성이 weight인 요소 다음에 content로 지정한 내용을 덧붙인다. */★다시 찾아보기

▶전체 선택자 사용하기(8-1)
●전체선택자: 아스타,별(*)를 사용하여 모든 태그에 적용
→ * { 속성 : 값 ; }

		<style type="text/css">
		/* html 전체 요소의 CSS 속성을 정의합니다.  */
			*{
				color:silver;
				margin: 10px;
				padding: 0px;
			}
		</style>
			
▶그룹 선택자 사용하기(8-2)
●그룹 선택자
→ 쉼표(,)를 사용하여 선택자를 나열하는 방식이므로, 중복되는 소스 부분을 줄일 수 있다.
→ 선택자1, 선택자2, 선택자3, … { 속성 : 값 ; }

/* 여러 선택자에 같은 CSS 속성을 정의합니다.  */
			h1, h2, h3, h4 { /* 공통적으로 설정할 것들을 그룹(,)으로 묶어 적용시키기 */
				font-size:20px;
				/* 폰트 설정(처음쓴 글꼴이없으면 , 다음 폰트로 넘어감 - 글자에 공백있으면 ""로 묶기) */
				font-family: "맑은 고딕", 궁서; 
			}
▶소속을 정하는 트리 구조의 하위 자손 선택자(9-1,9-2)
●하위 자손 선택자: 단계와 상관 없이 모든 요소를 선택할 수 있다.
→ 공백( )을 사용하여 종속된 다른 요소를 나열
→ 선택자1 선택자2 선택자3, … { 속성 : 값 ; }

			/* #box1>p>span{ /* id="box1"의 자식 p, p의 자식 span에 적용 */
			#box1 span{ /* 자손선택 : 띄어쓰기 */
				color:red;
			}
			
/* licenseList1 아이디로 지정된 li 요소의 a 요소의 title에 조리 포함된 곳 배경 노랑 설정 */
			/* #licenseList1 a[title*="조리"]{ */
			/* #licenseList1 li a[title*="조리"]{ */
			#licenseList1 > li > a[title*="조리"] {
				background-color: yellow;
			}
▶속성 값의 상속 관계 알아보기(10-1)
<style type="text/css">
			*{ /* 전체영역 설정 */
				font-family: "맑은 고딕", 바탕, "Times new Roman";
			}
			
			#cookingSrc{
				color : #f0d;
				font-size:15px;
			}
			
			#cookingSrc > p{ /* 자식 or 자손 둘다 사용가능 */
				line-height: 150%;
				width: 500px;
				background-color: cyan;
			}
			
			#cookingSrc p span{ /* 자식 or 자손 둘다 사용가능 */
				color:blue;
				font-weight:bold; /* 글자 굵게 */
			
			}
		</style>
▶선택자 우선 순위 (10-2)
!important > HTML에서 style을 직접 지정한 속성 > 아이디 선택자 > 클래스/속성/가상 선택자 > 태그 선택자(예:span) > 전체선택자

<style type="text/css">
			body{
				background-color: #000;
				color:cyan;
			}
			
			#bgPage1{
				color:#fff;	
			}
			
			.bgPage2 {
				color:#cf0;
			}
			
			.blueText{
				color:blue;
				background-color: yellow;
			}
			
			span{ /* 클래스선택자>태그선택자 이지만, !important 중요 표시해주면 지정된 값나옴 */
				color:red !important;
			}
		</style>

------------------------------ 02_CSS/chap03 ------------------------------
글꼴설정
요소 여백처리
이미지 넣기
글자 그림자, 블럭요소 그림자
테이블 스타일 설정

▶글자와 관련된 속성(1-1)
	<head>
		<title> 글자와 관련된 속성 알아보기 </title>
		<meta charset="UTF-8" />
		<style type="text/css">
		
			#box1 h2 { /* 따로따로 설정  - 쉼표로 구분해주지 않음 */
				font-family: "Times New Roman", sans-serif;
				font-size: 2em;
				font-weight: nomal; /* 글씨 굵기(bold 등) */
				font-style: italic; 
			}
			
			#box2 h2{ /* 한꺼번에 설정 */
				font: italic 30px "Time New Roman"
			}
			
		</style>
	</head>
	

▶요소의 크기 지정 및 여백 처리하기(3-1)
<style type="text/css">
			h1{
				border : 2px solid red; /* 테두리 설정 */
				margin-top: 30px;
				font : 1.5em "맑은 고딕",sans-serif /* 쉼표로 구분해 주는 것은 글꼴에 관한 설정 */
				padding-bottom:20px;
				text-align: center; /* 글자 가운데 정렬 */
			}
			
			div{
				border : 2px solid green;
			}
			
			p{
				border : 2px solid cyan;
				/* padding-top: 10px;
				padding-right: 10px; */
				/* padding : 10px 20px 50px 100px; */ /* top right bottom left(시계방향순으로 작성) */
				/* padding:10px 30px; */ /* (10px 자리 : top,bottom / 30px자리: right,left) */
				padding:10px;
			}
		</style>
		
▶모서리가 둥근 테두리 만들기(3-3)
<style type="text/css">
			div {
				background: #6d6d6d;
				border: 10px solid #f00;
			}
			p{
				background-color: #fff;
				line-height: 200%; /* 줄간격 */
				margin: 40px;
				padding: 15px;
			}
			.round1{
				border: 10px solid #ff9933;
				/* border-radius: 40px; */ /* 숫자가 클 수록 테두리 둥글게 설정 */
				/* border-radius: 70px 20px 10px 3px; */ /* 왼쪽상단 부분을 첫 시작으로 시계 방향 순으로 설정  */
				border-radius: 70px 20px; /* 70px 20px 70px 20px 와 같다고 보면됨 */
				
			}
			.round2{
				border: 10px solid yellow;
				border-radius: 20px 70px;
			
			}
		</style>

▶요소의 배경 처리하기(4-1)
		<title>요소의 배경 처리하기</title>
		<meta charset="UTF-8" />
		<style type="text/css">
			body{
				background-color: silver;
				background-image: url(./../images/shoes1.png); /* 이미지 불러와서 배경 설정 */
				background-repeat: repeat-y; /* y축 또는 x축 한줄로만 반복 넣기 */
				/* background-repeat: no-repeat; */ /* 반복하지 않는다 */
				background-position: top right; /* default값 : top left */
				background-attachment: fixed; /* 배경 이미지는 멈춰있고 글만 움직임 (default값: scroll) */
			}
			
			div{
				background: url(./../images/bg1.png) repeat-y fixed;
				width : 80%;
			}
			p{
				background: url(../images/dot.png) repeat-x bottom Left;
			}
		</style>
		

▶그림자 효과 만들기(5-2)
		<style type="text/css">
			h1{
				width: 400px;
				background: #fc3;
				border-radius: 20px 0px;
				/* h1영역을 박스처럼 생각해서 좌우위치 위아래위치 번짐정도 그림자,글씨 색지정 */
				box-shadow: 10px 20px 30px #ff0066;
				text-shadow: 5px 20px 7px #000;
				
			}
		</style>
		
▶테이블에 관련된 속성 알아보기(6-1)
border: 1px solid black; /* 전체 테두리 */
border-collapse: collapse; 
	separate: 셀의 테두리 선 간격을 벌려 표시
	collapse(default값): 셀 테두리를 겹쳐서 표시
empty-cells: hide; /* 값이 비어있는 셀 안보이게 설정 */
border-spacing: 0px; /* 셀과 셀 사이의 간격 설정 */
<caption>제목</caption>: 제목 넣을 때 사용하는 태그


→ css에 적용 (style 이용)
		<style type="text/css">
			#table1{ /* 스타일이용해서 적용하는 방법 */
				border: 1px solid black;
				border-collapse: collapse; 
				empty-cells: hide;
				border-spacing: 0px;
				width : 500px; /* 테이블 너비 설정 */
			}
			#table1 caption, #table1 th, #table1 td{ /* 하나하나 넣을땐 tr은 안됨 / 그룹으로 묶어줌 */
				border: 2px solid blue;
			}
			#table1 caption {
			 border-radius : 10px;
			
			}
			#table1 th{
				background: #b2ebf4;
			}
			#table1 td:first-child{ /* td의 모든 첫번째 태그에 적용  */
				background: #2f9d27;
				text-align: center;
			}
		</style>

------------------------------ 01_HTML_Ex13_semantic ------------------------------
▶시맨틱(semantic) 요소를 이용한 마크업
dt:before { /* 모든 db 앞에 // 넣으라는 뜻 */
→시멘틱 요소 : 어떤 내용을 쓸 지에 대해 더 자세히 알려주기 위한 태그들. 아래 태그들을 사용 안했다고 해서 오류가 나지 않지만, 무엇을 작성했는지 한눈에 알아볼 수 있도록 사용
<header></header> : body 안 본문의 제목으로 넣고 싶을 때 사용
<hgroup></hgroup> : 헤더 안 그룹으로 넣어서 사용
<nav></nav> : 메뉴 넣고 싶을 때 사용
<section></section> : 진짜 본문의 내용 작성(글의 내용-기사 본문 같은 것들)
<article></article> : section(본문) 안에 있음
<aside></aside> : 배너 같은 것 넣을 때 사용(본문하고는 약간 거리가 있음)
<footer> : 맨 아래쪽 내용 위치하는 내용 표시하고 싶을 때 사용(저작권, 오시는 길, 약도 등)

------------------------------ 02_CSS/chap04 ------------------------------
▶이미지 요소 옆에 문단 흐르게 만들기(1-1)
→ 그림과 글자가 어우러지도록 만들기
	/* img Design. Layout */
	.floatLeft {
		float: right; /* 이미지가 오른쪽 비어있는 공간으로  떠오르게하기 */
		margin: 10px 5px 10px 20px; /* 위, 오른쪽, 아래, 왼쪽 여백 지정 */
	}
	.floatRight {
		float: left; /* 이미지가 왼쪽 비어있는 공간으로  떠오르게하기 */
		margin: 0px 20px 10px 0px;
	}

▶02_00_position
position 속성: 배치를 내 마음대로 하고 싶을 때 사용
<style type="text/css">
		div{
			width: 250px;
			height: 250px;
		}
		.box1 {
			border: 3px solid red;
			position: fixed;
			/* static(default): 차례대로 나옴, relative: 원래 있어야하는 자리에서 상대적으로 px 크기 만큼 꼭지점(0.0) 이동
			absolute: 꼭지점(0.0)을 항상 기준으로 놓고 px 크기 만큼 이동, fixed: 고정 */
			left: 20px;
			top: 30px;
			
		}
		.box2 {
			border: 3px solid blue;
			position: fixed;
			left: 100px;
			top:100px;
			
		}
		.box3 {
			border: 3px solid green;
			position: fixed;
			left: 200px;
			top:200px;
			
		}
	</style>

▶고정 좌표 방식으로 배치하기(2-3)
&quot; : 큰 따옴표
&nbsp; : 공백(띄어쓰기) - Non-breaking Space
letter-spacing: 1px; → 글자와 글자 사이의 간격 설정 (양수: 간격이 커짐, 음수: 간격이 작아져서 글자 겹침)

			/* layout */
			/* ★ */
			header {
				position: fixed;
				width: 100%;
				top: 0px;
				left: 0px
				
			}
			nav {
				border: 1px solid gray;
				width: 200px;
				background-color: #FFd8d8;
				position: fixed;
				top: 80px;
				left: 50px;
				padding: 15px;
			}
			section {
				width: 500px;
				margin : 80px 0px 50px 350px;	
			}
			/* ★ */
			
*****210104
▶다단 나누고 구분선 표시하기(4-1)
		#bookPart{
			width:850px;
			margin-left: 50px;
			margin-bottom: 50;
			column-count: 6; /* 6칸으로 단이 나뉨 */
			column-rule: 1px dashed #666; /* 단과 단 사이 구분선 넣고 싶을 때 */
			column-gap: 40px; /* 칼럼과 칼럼 사이에 간격 설정 */
			text-align:justify; /* 문단 양쪽 정렬 */
			
→ 벤더 프리픽스(Vendor Prefix):
	어떤 속성, 스타일들의 기능이 가끔 실행 안될 경우 맨 앞에 붙여서 사용
	회사별로 붙여주는 접두어
-webkit-: 크롬, Safari 에서 실행할때 사용
-moz-: Firefox
-ms-: IE(인터넷익스플로어)
		↓
webkit-column-count: 6;
-moz-column-count: 6;
-ms-column-count: 6;
}

▶transform (05_00_transform)
      .trans01{
         background-color: rgb(205,205,205);  /* 색표시 방법은 3가지 */  
      
      }
      .trans02{
         background-color: rgb(205,205,205);   
         transform: rotate(20deg);
			/* 네모칸 가운데 중심 기준으로 20도만큼 기울이기(degree), 음수도 가능 */
		}
		.trans03{
			background-color: rgb(205,205,205); 
			transform: rotate(20deg); /* (-20deg) 음수 넣으면 반대반향(반시계뱡향으로) 모양 돌아감 */
			transform-origin: 0% 0%; /* 0.0 좌표 중심 기준으로 고정하고 기울이기 */
		}
		.trans04{
			background-color: rgb(205,205,205);
			transform: skewX(20deg); /* 사다리꼴 모양으로 기울인 형태(찌그러진 효과)-skewX, skewY */
			transform-origin: 0% 100%; /* 왼쪽 하단을 중심으로 고정하고 거기를 기준으로 기울임 */
			/* 0,0 → 좌측 상단, 0,100 → 좌측 하단, 100,0 → 우측 상단 , 100,100 → 우측 하단   */ 
		}		

▶transform 속성으로 요소 변경하기(5-1)
		/* 이미지 Transform */	
			#book1 {
			background:url(../images/snow_book1.png) no-repeat;
			width:300px;
			height:193px;
			transform:rotate(25deg);
			transform-origin: 20% 40%; /* (default값: 50% 50%) */
			/* margin: 20px; */
			}

▶display (03_00_display.html)
<style type="text/css">
	img{
		display: block; /* 블록 요소로 형식을 변경, 블럭요소의 특징을 가져서 한칸씩 띄어짐 */
			/* display: 원래의 속성 특징을 바꾸고 싶을 때 display 사용 (img, table 태그에서 주로 사용)
				none: 아무 속성도 갖지 않겠다는 뜻 (해당 요소를 화면에 표시하지 않음,보이지않게함)
				inline: 인라인 요소로 형식을 바꿈 (default값)
				block: 블록 요소로 형식을 변경, 블럭요소의 특징을 가져서 한칸씩 띄어짐 */
	}
</style>


------------------------------ 02_CSS/chap05 ------------------------------
▶해상도 크기에 따라 디자인 다르게 설정하기(7-1)
/* Media Query */
@media only screen and (min-width: 320px) and (max-width: 799px){ - min~max 사이 픽셀일 경우 적용
	h1{
		background: url(../images/1.png) no-repeat center top;
		height: 295px;
	}
	.btn{
		border-radius:5px;
		padding: 5px 10px;
		font-size:1.1em;
	}
}
@media only screen and (min-width: 800px) and (max-width: 1024px){

@media only screen and (min-width: 1025px){ - 해당 픽셀 이상이면 아래 설정 적용


------------------------------ 03_JavaScript_01_Bagic ------------------------------
▶Ex01
	<script type="text/javascript"> // JavaScript 작성 코드
		var a,b,c; /* 변수선언: var 생략가능, 자료형 사용X */
		a = 5;
		b = "20";
		c = "0.7";
		
		// 큰 따옴표(""),작은 따옴표('')로 문자열임을 나타냄
		window.document.write(a+"<br>"); // body영역 이외 JavaScript 영역 출력 명령어 //window 객체는 생략가능 document: 흰색 배경영역 
		document.write(a+1+"<br>"); // 문자열 태그로 만들어서 "<br>" 출력
		document.write(b+1+"<br>"); // +(플러스)는 문자 연결(나열)의 뜻
		document.write(c+1+"<br>") // 자동 엔터기능이 없기때문에 습관처럼 <br> 같이 써주기
		
		document.write(typeof('abc') + "<br>"); // typeof: 변수(데이터) 타입이 뭔지 알 수 있는 함수
		document.write(typeof('123') + "<br>"); //→ string 타입
		document.write(typeof(123) + "<br>"); //→ number 타입
		document.write("<br>");
		document.write(typeof(true) + "<br>"); //→ boolean 타입
		document.write(typeof('true') + "<br>"); //→ string 타입
		document.write(typeof(a) + "<br>"); //→ number 타입
		document.write(typeof(d) + "<br>"); // undefined: 없는 변수의 타입을 출력하려고 할 때 출력됨
		
		document.write("3"+1+"<br>"); //→ 31 (문자열에 연결이 되어 출력)
		document.write(+"3"+1+"<br>"); // 문자열 앞에 + 쓰면 문자열이 숫자가 됨
		document.write(Number("3")+1+"<br>"); // 괄호 안에있는 것(문자열)을 숫자로 바꾸는 함수
		document.write(eval("3")+1+"<br>");
		//문자열을 숫자로 바꿔주는 기호(+),함수(number,eval)
		
		document.write('<h1>Java Script</h1>'); //블럭요소이기 때문에 자동 엔터
		document.write("<h2>" +b + "</h2><br>");
		
		document.write("<img src='shoes3.png' width='100px' height='100px'>");
		
	</script>

●대화상자:
prompt: 입력 받을 수 있는 창
	확인 버튼 : 내가 입력한 것이 출력됨
	취소 버튼: null (내가 입력한 것 무시됨)
confirm: 확인/취소 버튼있는 창 생성(보통 두가지 선택지[boolean형태] 있을 때 사용)
	확인 버튼: answer:true
	취소 버튼: answer:false
alert: 확인 버튼 하나만 있는 대화상자(경고창 비슷)
		
●조건(삼항) 연산자
	조건 ? 참(일때수행할식) : 거짓(일때수행할식)
	예시) var result = answer ? "yes" : "no" ;
	
▶Ex02_prompt
<!-- style과 script 위치 순서 상관없음 -->
<script type="text/javascript">
	var yourName = prompt("이름을 넣어주세요", "아무개"); // 내가 입력한 이름이 yourName에 들어감
	document.write("<p><span>"+yourName +"</span></p><br>");
		
	if(yourName == ""){ // 아무것도 안넣으면 null값 출력
			document.write("이름 누락");
	}
	else if(yourName != null){
		document.write("<p><span>"+yourName +"</span></p><br>"); // 입력한 값 나옴
	}
	else{
		document.write("취소 클릭함"); // null값 나옴
	}
</script>

▶Ex03_confirm
<script type="text/javascript">
	var answer = confirm("게임 한판 하시겠습니까?");
	document.write("answer:"+answer+"<br>");
	
	var result = answer ? "yes" : "no" ;
	document.write(result);
</script>

▶Ex04_alert
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Ex04.html</title>
<script type="text/javascript">
	function isWinter(choice) { // 정의(function) - isWinter(true)를 호출하면 이쪽으로 넘어옴(true/false 가지고올 수 있음)
		// document.write(choice); // '예' 버튼 클릭하면 true 나오고, '아니오' 버튼 클릭하면 false 나옴
		alert(choice); // 팝업창 띄움
		if(choice == true){ // "예" 버튼 클릭할 때 출력
			alert("올해 겨울은 춥습니다."); // choice에 들어온 값이 true일 경우 출력 (경고창 두번 출력됨-alert가 2개있기 때문)
		}
		else{ // "아니오" 버튼 클릭할 때 출력
			alert("올해 겨울은 춥지 않습니다."); // choice에 들어온 값이 false일 경우 출력
		}
	}
</script>
</head>
<body>
	<h3>올해 겨울은 춥습니까?</h3>
	<form> <!-- input태그는 form 사용 -->
		<input type="button" value="예" onClick="isWinter(true)"> <!-- 함수, (java에서)메서드 호출하는 것: (true)값 넘긴다 -->
		<input type="button" value="아니오" onClick="isWinter(false)"> <!-- 버튼 클릭할때 마다 호출됨 -->
		<!-- true나 false를 ''문자열로 출력해 넘길 경우 위에 function if문 에도 true나 false를 문자열 형태로 비교해줘야함   -->
	</form>
</body>
</html>


▶Ex05_function
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Ex05.html</title>
<style type="text/css">
	#result{
		width: 100px;
		height: 100px;
		border: 1px solid black;
	}
</style>

<script>
	function SumofTwo(a,b){ //변수만 쓰면됨. 자바처럼 int a, int b 안써도됨
		//alert(1);
		//alert(a); // 버튼 누를때마다 1 출력되는 경고창 뜸 (잘 호출되는지 확인하고 주석처리)
		//alert(b); // undefined 출력됨
		
		//HTML코드 : body 안에 써넣은 모든 코드들(태그, 태그없는것 등등 모든것)
		
		myarea = document.getElementById("result") // document 영역: 출력되는 흰색 창 모두 
			// .getElementById("result"): id가 result인 영역(div)에 대한 정보를 가져와서 myarea 변수에 넣기
			// myarea 영역 : 정사각형 박스
		if(a==null){ // 2번째 버튼 클릭 했다는 뜻 - if문 : 어떤 버튼을 클릭했는지 구분해서 나타냄
			alert('2번째 버튼 클릭');
			myarea.innerHTML = "변수 a가 초기화 되지 않았습니다.<br> 변수 b의 값은 " + b + "입니다."
			// body 안에 써놓은 모든것 : html 코드(태그 있으나 없으나 똑같음)
			//myarea.innerHTML: myarea 영역의 정보를 가져와서 html 코드로 형태로 넣어라
		}else if(typeof b == "undefined") { // typeof b : b의 타입이 무엇인지
			alert('3번째 버튼 클릭'); // 3번째 버튼 클릭 했다는 뜻(3번째 버튼에는 2번째 자리 값(b자리)이 아예 없기 때문에)
			myarea.innerHTML = "변수 b에는 아무 값도 들어오지 않습니다.";
		}else{ // 1번재 버튼 클릭 했다는 듯
			alert('1번째 버튼 클릭');
			myarea.innerHTML = "a+b의 값은 " + (a+b)+"입니다."; // JavaScript; 생략가능
		}
	} // SumofTwo(a,b)
</script>

</head>
<body>

	<form>
		<!-- 자바에서는 넘기는 갯수만큼 똑같이 받아줘야하는데 javascript는 변수 값 몇개(최대값) 넣었는지에 따라 넣어도되고 안넣어도됨 -->
		<!-- 변수가 2개 준비되어있으면 변수가 최대 2개 (3,10)만 호출되고, 뒤에 1은 넣으나 안넣으나 의미가 없다. -->
		<input type="button" value="a=3,b=10" onclick="SumofTwo(3,10,1)"> <!-- sum of Two 호출 -->
		<input type="button" value="b=8" onclick="SumofTwo(null,8)"> <!-- sum of Two 호출, 하나만 넘김 -->
		<input type="button" value="a=3" onclick="SumofTwo(3)"> <!-- sum of Two 호출 -->
		<!-- 버튼 누를 때마다 alert 창이 뜸 - 잘 호출이 된다는 뜻 -->
	</form>
	
	<div id="result">
	  <!-- div에 값 넣지 않았기 때문에 있는지 없는지 아무것도 보이지않음 - 결과출력 예정 -->
	</div>

</body>
</html>

▶Ex06_function
<script type="text/javascript">
	document.write("나이0: " + age + "<br>");

	var age = 30; // 전역변수-선언한 이후에만 사용 가능(var는 생략가능)
	document.write("나이1: " + age + "<br>");
	
	function test(){ // 함수 정의
		// var가 있으면 새로 변수가 만들어지는것이고(지역변수로 사용), var가 없으면 기존에 만든 값 그대로 다음에 호출
		//(함수 안에서는 var의 유무에 따라 값 달라짐-전역변수가 될 수도있고, 지역변수가 될 수도있다.)
		var age = 40; // 지역변수(var를 붙이면 함수 안에서만 사용가능)
		document.write("나이2: " + age + "<br>");
	}
	
	test(); // 함수 호출
	
	document.write("나이3: " + age + "<br>");
</script>

<!--
→ 함수(function) 안 변수에 var를 붙였을 경우 출력값:
나이0: undefined
나이1: 30
나이2: 40
나이3: 30

→ 함수(function) 안 변수에 var를 생략했을 경우 출력값:
나이0: undefined
나이1: 30
나이2: 40
나이3: 40
-->

▶Ex07_switch_int
<script type="text/javascript">
	var favorite = prompt("어느계절을 좋아하세요? (1:봄, 2:여름, 3:가을, 4:겨울)", "1");
	// alert("favorite"+favorite);
	// alert(typeof(favorete)); // favorite 변수의 타입을 조회하기: String 문자열 : 내가 입력한 숫자를 문자열로 받는다.
	// 내가 입력한 모든것은 문자열 처리가 되기 때문에, case 뒤  숫자에 "" 따옴표 붙여서 문자열처리 해줘야함
	
	//int.parseInt: java에서 사용
	switch(parseInt(favorite)) { // paseInt(): 내가 입력한 문자열을 숫자로 바꿔준다. (case 뒤 숫자에 ""(따옴표) 안써도됨)
	case 1 :
		document.write("<h2>봄을 좋아하시는군요..</h2>");
		document.write("<img src='../images/spring.png' width='200px'");
		break;
		
	case 2 :
		document.write("<h2>여름을 좋아하시는군요..</h2>");
		document.write("<img src='../images/summer.png' width='200px'");
		break;
		
	case 3 :
		document.write("<h2>가을을 좋아하시는군요..</h2>");
		document.write("<img src='../images/fall.png' width='200px'");
		break;
		
	case 4 :
		document.write("<h2>겨울을 좋아하시는군요..</h2>");
		document.write("<img src='../images/winter.png' width='200px'");
		break;
		
	default : // 숫자 1~4 사이 이외의 모든것은 default 호출함 (다른번호 입력하거나, 취소버튼, 창x 버튼 눌러도 호출됨)
		alert("1~4만 입력 가능");
	} // switch
</script>

▶Ex08_for
<script type="text/javascript">
	for (i = 1; i <= 10; i++) {
		document.write(i + "<br>")
	}

	/* <h6>h6사이즈 글자입니다.</h6>
	~
	<h1>h1사이즈 글자입니다.</h1> */
	for (i = 6; i >= 1; i--) { // i가 6에서 1보다  크거나 같을 때까지 - 감소 하기
		document.write("<h"+i+"> h" + i + "사이즈 글자입니다. </h" +i+">");
	}

	/* 1~100사이의 수 중 짝수의 합 구하기 */
	total = 0;
	for (i = 1; i <= 100; i++) {
		if (i % 2 == 0) {
			total += i; // 짝수번째에 해당하는 숫자(i) 누적해봐라
		}
	}
	document.write("짝수의 합: " + total + "<br>");

	/* 이중포문 */
	for (i = 1; i < 3; i++) {
		for (j = 5; j <= 7; j++) {
			document.write(i + "," + j + "<br>")
		}
	}
</script>

▶Ex09_do_while
<script type="text/javascript">
	
	count = 0; // 몇번만에 stop 입력했는지 확인하기

	do {
		count++; // 반복 획수 
		str = prompt("입력하세요", "") // 비어있는 것으로 표시하고 싶을 경우 ""로 빈칸 넣기. 아예 값을 안넣을 경우 undefined 출력됨
		document.write("<h3>입력한값: " + str + "</h3>"); // document는  흰색 출력문 영역에 접근할 수 있는 내장객체 
		if (str == "stop") // 문자열 비교도 == 로 작성
			break;  // 내가 입력한 값이 stop 이면 빠져나가기
	} while (true); // 내가 입력한게 stop이 아닐 경우 계속 반복

	document.write("여기는 do~while 밖이다. <br>" + count + "번만에 빠져나왔습니다.");

	/* 내장객체: 대표적으로 document / 내가 new 사용해서 쓰지 않아도 자동으로 만들어져 있는 객체 */
</script>


------------------------------ 03_JavaScript_02_implicitObj(내장객체) ------------------------------
<!-- 
class Person{ // 내가만든 클래스
	String name;
}
Person p = new Person(); // Person class 객체 생성 / 내가 만든 객체
p.name = "길동"; // p라는 참조변수로 name이라는 멤버변수에 접근(값 넣음)

ArrayList<String> list = new ArrayList<String>(); // 자바 개발자들이 만들어놓은 내장 객체
list.add("아이유")
// 참조변수에 .을 찍었다는 것은 내가 만든 클래스나, 이미 만들어져있는 클래스에 객체를 생성한 후 어떤 매서드나 변수에 접근하겠다는 뜻
/* 내장객체: 대표적으로 document / 내가 new 사용해서 쓰지 않아도 자동으로 만들어져 있는 객체 */
-->

●내장객체: JavaScript에 이미 정의되어 있는 객체 (.찍어서 만드느것들)
String(문자열)
Array(배열)
Math
Date(날짜)
Document(문서)
window(브라우저 창) 객체
navigator 객체
form 객체 등등

▶Ex01_Array배열
→ 방법①		
var a = Array(4);
document.write(a.length +"<br>") // 배열의 방의 갯수 조회

for(var i=0;i<a.length;i++){ // 0~3번방 까지 각 방에 들어있는 값을 구해라
	document.write(a[i] + " "); // 변수에 값 없어서 undefined 4개 출력됨 (방4개)
}

→ 방법②
var arr = new Array('one', 'two' ,'three'); // array로 관리하는 방 3개
document.write("arr 갯수: " + arr.length +"<br>")

for(var i=0;i<arr.length;i++){ // for문 돌려가며 3번방 까지 하나씩 출력해서 보겠다
	document.write(arr[i] + " "); // 변수에 값 없어서 undefined 4번 출력됨 (방4개)
}

→ 방법③
var arr2 = new Array(); // ()괄호 안에 array 갯수는 쓰지않음
document.write("arr2 갯수: " + arr2.length +"<br>") // 배열 값 없기 때문에 0개방 출력됨
arr2[0] = 'spring'; // 문자열은 작은따옴표(''), 큰따옴표("") 상관없음
arr2[1] = "summer"; // 주석 달아도 방의 갯수는 동일하게 4개 / , 사이 빈칸으로라도 표시됨
arr2[2] = 'fall';
arr2[3] = 'winter';
document.write("arr2 갯수: " + arr2.length +"<br>")
document.write(arr2 +"<br>"); // 참조변수(arr2) 출력 : 자동으로 쉼표로 연결되어 출력됨
document.write(arr2.toString() +"<br>"); // 자바에서는 참조변수 뒤 .toString() 함수 붙어있음

→ 방법④
var arr3 = ['rose', 'tulip', 'lily'];
document.write("arr3 갯수: " + arr3.length + "<br>");

●for in문 = 확장 for문
for( ele in arr3 ) { //for(요소 in 작업대상) {} / ele : 0~2번방에 각각 접근(방 번호가 들어감)
	document.write(ele +" → " + arr3[ele] + "<br>");
}

 
/* 배열: 같은 자료형을 갖는 데이터 여러개를 한 묶음으로 묶어놓은 것 */
● 각기 다른 자료형으로 배열 만들기 - java와 다르게 종류가 다른 자료형을 묶음으로 배열을 만들 수 있음
var arr4 = [1,0.987,"abc",true];
document.write("arr4 갯수: " + arr4.length + "<br>");
for(pos in arr4){
	document.write(pos + " → " + arr4[pos] + "<br>");
}

◎출력문
4
undefined undefined undefined undefined 

arr 갯수: 3
one two three 

arr2 갯수: 0
arr2 갯수: 4
spring,summer,fall,winter
spring,summer,fall,winter

arr3 갯수: 3

0 → rose
1 → tulip
2 → lily

arr4 갯수: 4
0 → 1
1 → 0.987
2 → abc
3 → true

▶Ex02_Array_2차원배열
/* 2줄짜리로 구성된 2차원 배열 */
→ 2차원 배열 방법①
var arr = [
			['rose','tulip','lily'],
			['윤아','태연','서현','효연','티파니']
		];

document.write("행의 길이: " + arr.length + "<br>"); // 행의 갯수
document.write("0행의 갯수: " + arr[0].length + "<br>"); // 각 행마다 열이 몇 개 있는지 출력
document.write("1행의 갯수: " + arr[1].length + "<br>");

●이중 for문 이용해서 각 방에 들어있는 값들 출력
for(i=0; i<arr.length; i++){ // 행에 접근
	for(j=0; j<arr[i].length; j++) { // 열에 접근: 각 행의 갯수만큼 반복해라(i가 0 or 1이면 0 or 1행의 갯수만큼 반복)
		document.write(arr[i][j] + " "); // i행 j열에있는 값 출력
	}
	document.write("<br>")
}

●for in 문
for(i in arr) { // i에 행 번호 들어옴(0,1)
	//document.write(i+","+j+" ");
	for(j in arr[i]) { // j에 0행에 들어간 열 번호(0,1,2), 1행에 들어간 열 번호(0,1,2,3,4) 들어옴
		document.write(arr[i][j] + " ");
	}
	document.write("<br>")
}

→ 2차원 배열 방법②
var arr2 = new Array(2); // Array: 객체 / 방 2개있다고 지정 안해도 자동으로 방 2개가 생김
arr2[0] = ['rose','tulip','lily'];
arr2[1] = ['윤아','태연','서현','효연','티파니'];

for(i=0; i<arr2.length; i++){ // 행에 접근
	for(j=0; j<arr2[i].length; j++) { // 열에 접근
		document.write(arr2[i][j] + " ");
	}
	document.write("<br>")
}

◎출력문
행의 길이: 2
0행의 갯수: 3
1행의 갯수: 5

rose tulip lily 
윤아 태연 서현 효연 티파니 

rose tulip lily 
윤아 태연 서현 효연 티파니 

rose tulip lily 
윤아 태연 서현 효연 티파니


▶Ex03_Array_Date
<!-- java에서는 date라는 클래스를 사용해서 오늘 날짜를 가지고 올 수 있다. -->

<script type="text/javascript">
	var now = new Date(); // 객체 생성
	document.write("now1: " + now + "<br>"); // 프로그램을 사용한 현재 시간(시분초)
	document.write("now2: " + now.toString() + "<br>"); // 참조 변수 뒤에는 .toString() 있음
	document.write("now3: " + now.toDateString() + "<br>"); // 날짜만 조회
	document.write("now4: " + now.toTimeString() + "<br>"); // 시간만 조회
	
	document.write("오늘은");
	document.write(now.getYear() + 1900 + "년" + "<br>"); //1900+212 = 올해 년도 출력  → 2021년
	//document.write(now.getYear()); //→ 121 출력됨
	//1900을 더한이유: 1900년 기준으로 121년이 흘렀다는 뜻이기 때문에 더해줌
	document.write(now.getUTCFullYear() + "년"); //올해 년도 출력→ 2021년
	document.write(now.getMonth() + 1 + "월"); // +1 한 이유: 월이 0부터 시작하기 때문
	document.write(now.getDate() + "일<br>"); // 날짜는 잘 나옴
	
	document.write("현재 시간은");
	document.write(now.getHours() + "시");
	document.write(now.getMinutes() + "분");
	document.write(now.getSeconds() + "초<br>");
	
	var day = now.getDay(); // 요일 숫자로 표시됨(일요일: 0 ~ 토요일: 6)
	document.write("day: " + day + "<br>");
	
	/* 배열로 요일 사진 가져오기 */
	var yoil = new Array(); // 여기까지만 쓰면 아직 방이 없다.
	yoil[0] = "./../images/sun.gif";
	yoil[1] = "./../images/mon.gif";
	yoil[2] = "./../images/tue.gif";
	yoil[3] = "./../images/wed.gif";
	yoil[4] = "./../images/thu.gif";
	yoil[5] = "./../images/fri.gif";
	yoil[6] = "./../images/sat.gif";
	
	document.write("오늘은 <img src='" + yoil[day] + "'/> 요일 입니다.");
	// 실행하는 요일(day)에 따라 이미지 달라짐
	
</script>


▶Ex05_Array_select_option
●이벤트 속성(document 객체)
onLoad: body 영역 로드하자마자 호출
onChange: select 옵션에 변화가 생겼을 때 change()함수 불러서 호출
onKeyUp: 키보드에서 손 뗐을 때 나타남 / 키를 놓았을 때 발생
onKeyDown: 키를 눌렀을 때 발생
onKeyPress: 키를 눌렀다 놓았을 때 발생
onClick: 마우스로 클릭했을 때 발생
onDblClick: 마우스로 더블 클릭했을 때 발생
onFocus: onFocus: 입력창에 마우스 포커스를 클릭했을 때(브라우저에 포커스를 얻을 때) 발생★
onmouseDown: 마우스를 눌렀을 때 발생
onmouseUp: 마우스를 놓았을 때 발생
onBlur: 브라우저에 포커스를 잃을 때 발생

▶Ex07_Math함수

▶Ex08_문자열함수

▶Ex09

------------------------------ 03_JavaScript_03_windowObj ------------------------------
●내장객체: JavaScript에 이미 정의되어 있는 객체 (.찍어서 접근하는 것들) - 화면 정보(Screen), 날짜(Date), 배열(Array) 등을 사용할 수 있도록 미리 생성하여 내장시켜 둔 객체 모음
String: 문자열을 다룰 수 있게 함
Array: 배열을 사용할 수 있게 함
Date: 날짜와 시간을 다룰 수 있게 함
Math: 수학적인 함수와 특수 함수를 제공함
Number: 문자로 된 숫자를 숫자로 바꾸어줌
form

window(브라우저 전체 창에 접근): window.open('연결할 url','창이름','팝업창의 속성') - window는 생략가능
	브라우저 창안에 존재하는 모든 요소의 최상위 객체
	브라우저 창이 열릴 때마다 하나씩 만들어지는 객체
history: 현재 창에서 사용자의 방문 기록을 저장하고 있는 객체
location : 현재 사용하는 브라우저에 대한 정보를 가지고 있는 객체
document: 웹 문서마다 하나씩 만들어지는 객체, <body>태그에 의해 만들어지고 HTML 문서에 대한 정보를 가지고 있다. (결과를 출력할 수 있는 흰 부분) // window.document
arguments: 함수가 호출될 때 함수 내의 매개 변수 정보를 읽어온다. Explorer에서 지원이 되지 않음
screen 객체: 내가 사용하고 있는 모니터의 정보를 알 수 있는 객체
navigator 객체 .. 등등


▶Ex01_window_open
→ 웹 브라우저 시작하자마자 무언가 띄우고 싶을 때
팝업창 띄우는 방법① <body> 사용
<body onLoad="window.open('Ex01_news.html','pop','width=530 height=730')">
	안녕하세요
</body>

▶Ex02_window_open
팝업창 띄우는 방법② javascript 사용
<script type="text/javascript">
	window.open('Ex02_popup1.html','창이름','width=450 height=400');
</script>

//window.open('연결할 url','창이름','팝업창의 속성') */
//window.open: 윈도우 창을 열어라 / 웹 브라우저 전체가 window 객체이다.


▶Ex05_setInterval-0
→ body 영역 로드하자마자 호출하는 방법① <body> 사용
<body onload="alert(1)"></body>

body 영역 로드하자마자 호출하는 방법② javascript 사용
window.onload = function() {}

▶Ex05_setInterval
●자바스크립트 주기적인 실행(setInterval 함수): 
	일정한 시간 간격으로 작업을 수행하기 위해서 사용
	clearInterval() 함수를 사용하여 중지할 수 있다.
형식: window.setInterval(해야할일,시간);

→ 시간 간격(정한 시간)마다 자동으로 img가 바뀌는 설정 방법②
시간 간격(정한 시간)마다 자동으로 img가 바뀌는 설정 방법①

▶Ex06_setInterval
setTimeout 함수 : 일정한 시간 후에 작업을 한번 실행
	보통 재귀적 호출을 사용하여 작업을 반복
	기본적으로 setInterval 과는 달리 지정된 시간을 기다린후 작업을 수행하고, 다시 일정한 시간을 기다린후 작업을 수행하는 방식
	지정된 시간 사이에 작업 시간이 추가 되는 것
	clearTimeout() 을 사용해서 작업을 중지할 수 있다.

- clearInterval(), clearTimeout()이 실행중인 작업을 중지시키는 것은 아니다. 지정된 작업은 모두 실행되고 다음 작업 스케줄이 중지 되는 것이다.


------------------------------ 03_JavaScript_03_windowObj ------------------------------
▶Ex03_parent_child(부모), Ex03_popup(자식)
●자식창
<script type="text/javascript">
	function receiver(){
		//alert(1);
		
		/* 부모창(Ex03_parent_child.html)에서 id 입력한 값을 자식창(현재창:Ex03_popup.html)에서 팝업으로 뜨게하기 */
		window.document.myform.child_id.value = window.opener.document.myform.id.value;
		// myform child_id에 값(value)으로 넣어라 → window.opener: 부모창(정의되있음)
		// window.opener가 있으면 부모쪽, 없으면 자식쪽(현재창)
		// window: 전체가 윈도우창 / document: 흰색 출력되는 창
		// myform: input으로 선택창에 입력한 값들이 들어감. 부모와 자식의 form 이름이 같아도되고 달라도됨
		// 부모창 myform에 있는 id에 입력한 값을 자식창 child_id에  값(value)으로 넣어봐라
		
		/* 부모창(Ex03_parent_child.html)에서 password 입력한 값을 (현재창:Ex03_popup.html)에서 팝업으로 뜨게하기 */
		window.document.myform.child_password.value = window.opener.document.myform.password.value;
		
	} // receiver()
	
	function meClose(){
		/* 닫기버튼 누르면, 자식창에 입력한 것을 부모창에 입력하도록 하기(↑위랑 반대로 하면됨) */
		opener.myform.id.value = document.myform.child_id.value; // window, document객체 생략가능
		opener.myform.password.value = document.myform.child_password.value;
		
		//window.close(); //현재 윈도우창 닫기 버튼 눌러 닫기
		self.close(); //현재 창(팝업창) 닫기 버튼으로 닫기
		//close(); //close()로만 써도 잘 실행됨
	}
</script>

→ 창닫기
window.close(); //현재 윈도우창 닫기 버튼 눌러 닫기
self.close(); //현재 창(팝업창) 닫기 버튼으로 닫기
close(); //close()로만 써도 잘 실행됨


------------------------------ 03_JavaScript_04_historyObj ------------------------------
●history 객체: 내가 지나왔던 페이지들을 기억하고 다시 되돌아갈 수 있음
→ 브라우저를 이용하여 본 URL 사이트를 임시로 저장하고 있음
→ 뒤로(Back), 앞으로(Forward) 버튼을 이용하여 볼 수 있음

메소드: 
back(): 이전 화면으로 갈때는 history.back
go(숫자): 상대적인 숫자를 설정하여 화면 이동 할 때는 history.go(-1) , 이전이전으로 갈때는 go(-2), 이전이전이전으로 갈때는 go(-3)
forward(): 다음으로 갈때는 history.forward 또는 history.go(+1), 다음다음으로 갈때는 go(+2), 다음다음다음으로 갈때는 go(+3) 등

<body>
	<h2>세번째 페이지입니다.</h2>
	<a href="first.html"><img src="./../images/01_s.gif"></a>
	<a href="second.html"><img src="./../images/02_s.gif"></a>
	<img src="./../images/03.gif">
	<a href="fourth.html"><img src="./../images/04_s.gif"></a>
	
	<hr>
	
	<form>
		<a href="#" onClick="javascript:history.go(-2)">
			<input type="button" value="두 페이지 이전으로">
		</a>
		
		<a href="#" onClick="javascript:history.back()"> <!-- .go(-1)도 사용가능 -->
			<input type="button" value="이전페이지로">
		</a>
		
		<a href="#" onClick="javascript:history.forward()">
			<input type="button" value="다음페이지로">
		</a>		
	</form>
</body>


------------------------------ 03_JavaScript_05_locationObj ------------------------------
●location 객체: 브라우저의 주소 표시줄 쪽에 접근하는 객체
→ location.reload(): 새로 고침(F5), 현재 문서를 다시 읽어 온다.
	출력창에서 주소창 뒤에 마우스 한번 클릭하고 엔터 치면 새로고침
	onClick="location.reload()">
→ location.href: 다른 주소 링크 불러옴(문서의 URL 주소로 이동)
	버튼 누르면 주소 바꿔줌: <input type="button" value="다음" onClick="location.href='http://www.daum.net'">

<title>Ex01_location.html</title>
<script type="text/javascript">
	var now = new Date();
	document.write("now: " + now + "<br>");
	
	function goNaver(){
		location.href="http://www.naver.com";
	}
	/* &nbsp;: 띄어쓰기 */
	document.write("<a href='http://www.melon.com'>멜론<a>&nbsp;&nbsp;"); // 멜론 글자 클릭해서 주소이동
	document.write("줌".link("http://www.zoom.us"));
</script>
	

</head>
<body>
	<form>
		<input type="button" value="지금 시간은?" onClick="location.reload()"> <!-- reload: 새로고침 -->
		<!-- 출력창에서 주소창 뒤에 마우스 한번 클릭하고 엔터 치면 새로고침 -->
		<br><br>
		
		<input type="button" value="다음" onClick="location.href='http://www.daum.net'"> <!-- 버튼누르면 주소 바꿔줌 -->
		<br><br>
		
		<input type="button" value="네이버" onClick="goNaver()"> <!-- 함수 호출해서 주소 이동 -->
	</form>
</body>


------------------------------ 03_JavaScript_06_form ------------------------------
▶Ex01_form
<title>Ex01_form.html</title>

</head>
<body>
	<form name="first_form">
		<span>아이디</span>
		<input type="text" name="id" value="kim">
		<br><br>
		<span>비밀번호</span>
		<input type="password" name="pw" value="1234">
	</form>
	
	<hr>
	
	<form name="second_form">
		<input type="submit" value="로그인">
		<input type="button" value="회원가입">
	</form>
	
	<hr>
	
	<script type="text/javascript">
	/* 아직 아무것도 정의된것이 없기 때문에 맨 위(title 아래쪽)에 쓰지않고 body 닫기 직전에 써줌 - body 안에 script 사용가능 */
		document.write(document.first_form.name+"<br>"); // <form>의 이름을 직접 지정해서 접근 : document 영역에 first_form인 곳에 name이 뭐냐?
		document.write("폼의 갯수:"+document.forms.length +"<br>"); // form들을 다룰 수 있는 forms라는 이름의 내장 객체가 있음. - form의 갯수가 몇개인지? 
		document.write(document.forms[1].name +"<br><br>"); // forms라는 객체로 <form> 다룰 수 있다.[]배열의 위치로 몇번방인지 접근 - forms 1번방의 이름이 뭐냐?
		
		
		// 0번째 form의 요소가 몇개있는지? : <form> 안에 input 태그 갯수만 가져옴
		document.write("0번째 폼의 요소의 갯수:"+ document.forms[0].elements.length+"<br>");
		// form의 요소가 elements 배열(정해져있는 객체 배열)로 관리됨
		document.write(document.forms[0].elements[0].type+"<br>"); // 0번째 요소의 타입이 뭔지? → text
		document.write(document.forms[0].elements[1].type+"<br>"); // 1번째 요소의 타입이 뭔지? → password
		// <form>의 이름(name)을 직접 입력해서 출력
		document.write(document.forms[0].id.type+"<br>"); // → text
		document.write(document.forms[0].pw.type+"<br>"); // → password
		// <form>의 id의 value를 직접 입력해서 출력		
		document.write(document.forms[0].id.value+"<br>"); // →  kim
	</script>

</body>


▶Ex02_유효성검사
→ JavaScript는 action으로 넘어오기 전에 유효성 검사로 많이 쓰임

<title>Ex02_유효성검사</title>
<script type="text/javascript">
	function check(){ // check() 함수는 
		//alert(1); // alert 띄우고 abc.jsp로 넘어감
		
		//누락됐는지 유효성 검사하는 방법① 
		//둘다 값이 누락되면 제일 처음 값만 누락된 alert이 뜸, 둘다 누락됐다고 alert 두번 뜨는 것 아님
		if(window.document.myform.id.value == ""){ // document.myform에 아이디에 입력된 값이 있는지 없는지 확인 → 비교할 때는 null 입력x
			alert("id 누락");
			return false; //action(jsp)으로 넘어가지 못하도록 설정. 호출한 onClick="return check()"로 false가 return이 됨
		}
		
		if(myform.pw.value == ""){ // window.document. 생략가능
			alert("pw 누락");
			return false;
		}
		//비번의 길이가 4글자~6글자만 입력되도록 설정
		if(myform.pw.value.length<4 || myform.pw.value.length>6){ // 입력한 값의 길이
			alert("비번의 길이가 4글자~6글자로 입력하세요");
			return false;
		}
		//비번은 숫자만 입력 하도록 설정
		/* NaN: Not a Number(숫자가 아니다), isNaN("a2"): true(숫자가아닐때 참), isNaN("123"): false(숫자일때 거짓) */
		if(isNaN(myform.pw.value)){ // 입력한 값이 숫자가 아니면 true 이기 때문에 alert창 나타나고 jsp로 안넘어감
			alert("비번은 숫자만 입력하세요");
			return false;
		}
			
	} // function check()
</script>
</head>
<body>
	<h3>아이디와 비번을 입력하세요</h3>
	<form name="myform" action="abc.jsp">
		<span>아이디</span>
		<input type="text" name="id" value="kim">
		<br><br>
		<span>비밀번호</span>
		<input type="password" name="pw" value="1234">
		<br><br>
		<!--Ex02.html에서 값(id,pw) 입력하고 등록버튼(submit 타입) 누르면 action에 써놓은 곳으로 넘어가서(abc.jsp) DB table에 insert 작업함
		*유효성 검사: 입력된 내용을 서버로 전송하기 전에 입력한 자료가 적합한지 미리 확인 후  부적합이면 jsp로 아예 넘어가지 못하게 처리. 소스 코드 노출되는 단점 있음.
		→ return값에 false가 들어오면 action에 써놓은 곳으로 넘어가지 못함
		→ submit과 action은 하나의 쌍임 -->
		<input type="submit" value="등록" onClick="return check()"> <!-- 함수 호출하는 곳 앞에 return 꼭 써줘야 action 값으로 안넘어감 -->
		<input type="reset" value="취소"> <!-- 초기 상태로 돌아감(input의 value 값 유무에 따라 초기값 달라짐) -->
	</form>
</body>


▶Ex03_유효성검사
→ onFocus(이벤트 속성): 입력창에 마우스 포커스를 클릭했을 때(브라우저에 포커스를 얻을 때) 커서가 깜빡이는 포커스 발생
→ submit과 action은 하나의 쌍임

<title>Insert title here</title>
<script type="text/javascript">

	/* onFocus 했을 때 값 지워지게 해주기 */
	function clearText(myid){ // myid: myform.id(id input 박스)
		//alert(1);
		
		//document.write(myid.defaultValue); // value 기본값(아이디를 입력하세요)을 출력해보기-id value에 마우스 클릭하면 새로운 창에서 출력됨)
		//document.write(myid.value); // value에 입력되어있는 값 → 아이디를 입력하세요 
		
		if(myid.defaultValue == myid.value){ // value 기본값과 value에 내가 입력되어있는 값이 같다면,
			myid.value = ""; // onFocus 했을 때 value 값을 없애준다.
		}
		
	} // clearText(myid)
	
	<!-- **radio/checkbox 타입 유효성 검사** -->
	function check(){
		/* movie 유효성 검사 처리 - 하나라도 check되어있지않으면 jsp로 안넘어가도록 설정 */
		str = "선택한 영화는: \n"; // str 변수 만들어서 내가 체크한 값들 모두 alert 창에 뜨게 하기
		len = document.myform.movie.length;
		//alert(len); // movie라는 이름을 가지고 있는 요소 갯수는 3개
		
		flag = false; // flag 초기상태
		//movie의 0번,1번,2번방 중 하라나도 선택이 됐는지 확인하기
		for(i=0;i<len;i++){ //len보다 작을 때 까지만 for문 돌려라
			if(document.myform.movie[i].checked){ // movie [i]번방에 있는 check 상태가 어떤지 확인
					// → 0,2번방:false, 1번방:true(checked 되어있음) / == ture는 생략가능
				flag = true; // 어떤 방이든 check가 되어있는 방과 만나면 true가 됨
				str += document.myform.movie[i].value; // str = str + document ~ : 기존 str에 str+document ~ value 값 연결해서 넣어라
				// movie [i]번째에 체크된 값을 가져와서 누적시켜라
				break; // radio는 하나만 선택이기 때문에 n번째에서 찾았으면 나머지 항목 안보고 빠져나가는것 설정해줌 (필수사항은 아님)
			}
		}
		
		if(flag == false) { // for문 다 돌았는데 아직도 flag가 false(check된 것 못찾았을 때)일 경우 alert 띄움
			alert("movie 하나는 꼭 선택해야 합니다.");
			return false; // action으로 넘어가지 못하도록 해주기 → onClick=check()"에  return 써주기
		}
		
		//song 유효성 검사 처리 - 하나라도 check되어있지않으면 jsp로 안넘어가도록 설정
		
		str += "\n선택한 노래는: \n";
		song_len = document.myform.song.length;
		//alert(song_len);
		
		flag = false;
		for(i=0; i<song_len; i++) {
			if(document.myform.song[i].checked){ // document myform의 song[i]번방이 checked 되어있는지 확인
				flag = true;
				str += document.myform.song[i].value; // song[i]번째 선택된 값을  가져와서 누적해라 
				break;
			}
		}
		
		if(flag == false){ // for문을 다 돌았는데 아직 false면 check된것 하나도 못만났다는 뜻
			alert("song 하나는 꼭 선택해야 합니다.");
			return false;
		}
		
		//fruit 유효성 검사 처리 - 하나라도 check되어있지않으면 jsp로 안넘어가도록 설정
		str += "\n선택한 과일은: \n";
		fruit_len = document.myform.fruit.length; // name이 fruit인 것의 갯수 구하기
		//alert(fruit_len);
		
		flag = false;
		for(i=0; i<fruit_len; i++){
			if(document.myform.fruit[i].checked){ // fruit [i]번방에 있는 check 상태가 어떤지 확인
				flag = true;
				str += document.myform.fruit[i].value + " "; // 여러개 선택될 경우 " "로 띄어쓰기 표시해줌
				//break; // checkbox에서는 break쓰면안되는 이유: 여러개 선택이기 때문에 break 사용하면 하나만 확인하고 빠져나가서 나머지 값 출력못함
			}
		}
		
		if(flag == false){ // for문을 다 돌았는데 아직 false면 check된것 하나도 못만났다는 뜻
			alert("fruit 최소 한개는 꼭 선택해야 합니다.");
			return false;
		}
		
		alert(str); // 그동안 누적한것 출력
		
	} //check ()
	
</script>
</head>
<body>
	<form name="myform" action="abc.jsp">
		<span>아이디</span>
		<input type="text" name="id" value="아이디를 입력하세요" onFocus="clearText(myform.id)"> <!-- myform.id: myform의 id인 곳의 정보를 넘기겠다 -->
		<br><br>
		
		1. 가장 좋아하는 영화 한개만 선택하세요 <br>
		<!-- <input type="radio" name="movie" value="나홀로집에" checked>나홀로집에 - 해리포터가 기본으로 체크되서 출력됨 -->
		<input type="radio" name="movie" value="해리포터">해리포터
		<input type="radio" name="movie" value="나홀로집에">나홀로집에
		<input type="radio" name="movie" value="반도">반도
		<!-- movie가 3개 있어서 배열로 만들어짐 -->
		
		<hr>
		
		2. 가장 좋아하는 노래 한개만 선택하세요<br>
		<input type="radio" name="song" value="세월이 가면">세월이 가면
		<input type="radio" name="song" value="광화문연가">광화문연가
		<input type="radio" name="song" value="희망사항">희망사항
		<input type="radio" name="song" value="붉은 노을">붉은 노을
		
		<br><br>
		
		3. 좋아하는 과일 여러개 선택하세요<br>
		<input type="checkbox" name="fruit" value="수박">수박
		<input type="checkbox" name="fruit" value="딸기">딸기
		<input type="checkbox" name="fruit" value="사과">사과
		<input type="checkbox" name="fruit" value="포도">포도
		
		<br><br>
		
		<input type="submit" value="등록" onClick="return check()">
		<input type="reset" value="취소">
	</form>
</body>


▶Ex04_selectedIndex_multiple
<title>Insert title here</title>
<script type="text/javascript">
	function check(){
		sindex = document.myform.nation.selectedIndex; //선택된 값의 해당위치를(순서값=index) 불러옴
		//alert(index); // "선택"이 선택되어있으면 sindex에 0값이 들어옴
		
		if(sindex == 0) { // 따로 선택하지 않음
			alert("나라 하나 선택하세요");
			return false; // action으로 넘어가지 못하게함
		}
		else{
			//str = "선택한 나라는 '" + myform.nation.value + "' 입니다.";
			//str = "선택한 나라는 " + myform.nation[sindex].value; // nation sindex번째 옵션의 값을 가져와라 
			str = "선택한 나라는 " + myform.nation.options[sindex].value; // 내장객체(Array_select_option) 할때 사용해봄
		}

		str += "\n선택한 산은 ";
		mlength = document.myform.mountain.length; // mountain 갯수는 mlength에 들어가있는 option의 갯수 (5개)
		//mlength = document.myform.mountain.selectedIndex;
		//alert(index);
		
		flag = false;
		for(i=0; i<mlength; i++){
			if(document.myform.mountain[i].selected){ // mountain[i]번방이 selected 됐는지 확인
				flag = true;
				str += document.myform.mountain[i].value+" ";
			}
		}
		if(flag == false) {
			alert("산 최소 한개 이상 선택하세요");
			return false;
		}
		alert(str);	
	}
</script>
</head>
<body>
	<form name="myform" action="abc.jsp">
	여행하고 싶은 나라를 선택하세요.<br>
	
	<select name="nation">
		<option value="선택">선택</option> <!-- option 닫는 괄호 생략해도됨 -->
		<option value="캐나다">캐나다</option>
		<option value="뉴질랜드">뉴질랜드</option>
		<option value="미국">미국</option>
		<option value="스위스">스위스</option>
		<option value="영국">영국</option>
	</select>
	
	<hr>
	
	좋아하는 산 선택하세요.
	<!-- multiple(다중선택): ctrl 버튼 누르고 다중 선택해야함 -->
	<select name="mountain" multiple="multiple" size="3"> <!-- size="3" : 한번에 3개 목록이 보이도록 설정 -->
		<option value="지리산">지리산</option>
		<option value="한라산">한라산</option>
		<option value="내장산">내장산</option>
		<option value="관악산">관악산</option>
		<option value="북한산">북한산</option>
	</select>
	<input type="submit" value="확인" onClick="return check()">
	</form>
</body>


------------------------------ 03_JavaScript07_RegularExpression(정규표현식) ------------------------------
●Regular Expression: 특정한 형태의 패턴 문자열을 찾아 내기 위한 수식
→ 정규표현식으로는 좀더 정밀한 유효성 검사 가능함 (주민번호,이메일,전화번호,휴대폰번호 등등)
	ex) 휴대폰번호: 숫자3개, 하이픈, 숫자3~4개, 하이픈, 숫자 4개
→ 슬래시(/)로 시작하고, 슬래시(/)로 끝나야 한다.
	ex) 우편번호: /^\d{3}-?\d{3}$/
		①^: 문자열의 시작(맨 앞)을 의미
		②\d{3}: 우편 번호 앞자리 3개
		③-?: 하이폰(-)은 없거나 있으면 1개
		④\d{3}: 우편 번호 뒷자리 3개(정수 3자리)
		⑤$: 문자열의 맨 끝을 의미
	 앞에 ^표시 없이 \d{3}로만 있으면 숫자3자리만 어느 위치에 있으면 됨. 숫자 3자리로 시작안해도됨
		
●관련 메소드
search(): 문자열에서 특정 패턴(정규 표현식)에 일치하는지 알아내는 함수
	일치하지 않으면 –1을 리턴해준다.
●자주 사용되는 서브 패턴
기호  최소  최대  설명
? 	0 	1 	이전 요소(? 앞에있는 요소가)가 없거나 하나 있을 때 사용
+ 	1 	∞ 	이전 요소(+ 앞에있는 요소가)가 최소 하나 이상~무한대 사이 반복될 때 사용
* 	0 	∞ 	이전 요소(* 앞에있는 요소가)가 없거나 한번 이상 반복될 때 사용

●표현식
^: 문자열의 시작을 의미
$: 문자열의 끝을 의미

\d: 0~9 사이의 정수(short for [0-9])
\D: 정수가 아닌 문자(short for [^0-9])
\w: 알파벳 문자, 숫자, 밑줄 기호(_)
\W: \w의 반대 개념


------------------------------ 04_jQuery ------------------------------
☆기본 구조
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		//alert(1);
	});
</script>



<!--
	even,odd,eq,nth(n),lt(n): 0부터 시작
	nth-child: 1부터 시작 // child 붙은거 빼고는 0부터 시작인듯
	
	nth(n): 모든 span에서 n번째 시작 - 0부터 시작 
	lt(n): less then(n) n보다 작은 - 0부터 시작(선택자)
	gt(n): greater then(n) n보다 큰 - 0부터시작(선택자)
	-->
	
	함수
	ready
	addClass
	removeClass
	css
	.attr 속성 추가
	.removeAttr("title"); // 타이틀 속성 제거
	append
	each
	text
	.click(); 버튼을 클릭했을 때 하고싶은 일이 뭐냐?

	$(''): 객체를 만드는(표현하는) 방법 - java에서는 new 클래스
	
------------------------------ 04_jQuery_ch01 ------------------------------
▶Ex01_element


▶Ex02


▶Ex03_first_nth-child


▶Ex04_first-child


▶Ex05_lt_gt


▶Ex07_속성 적용


------------------------------ 04_jQuery_ch02 ------------------------------
	
	//.append() 특징: 버튼 누를때마다 계속 추가됨
			//.html(): 기존에 있던 것은 지우고 방금 만든 이미지만 불러옴
