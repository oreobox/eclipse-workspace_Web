------------------------------ 초기 setting 과정 ------------------------------
1.Apache Tomcat-9.0.41 SetUp 과정
	C:\Program Files\Java\jre1.8.0_261 버전으로  jre 설치되어있는것 확인하기
	→ Destination Folder 에서 C:\Program Files\Apache Software Foundation\Tomcat 9.0로 되어있는 것을
	→ C:\Tomcat 9.0로 짧게 경로 바꿔주고 Install
2.워크 스페이스 생성
3. 프로젝트 생성
	File → New → Dynamic Web Project 또는 File → New → other... → Web → Dynamic Web Project
	만약 Dynamic Web Project가 안보인다면 Web Project(Web applications) 가능한 이클립스 재설치
	이클립스 재설치 : eclipse-inst-win64.exe 파일 실행 후 Eclipse IDE for Enterprise Java Developers(두번째) 눌러서 설치
4. Tomcat 설치 후 초기에 Run On Server(초록버튼) 실행 시 설정 단계
	How do you want to select the server? 에서 Manually define a new server 선택
	→ Apache에서 Tomcat v9.0 Server 클릭 후 next
	→ Tomcat installation directory 비어있는 부분에 입력
	→ Brouse 클릭
	→ C드라이브 Tomcat9.0 저장해놨던 폴더 한번 클릭 후 폴더선택
	→ finish
5. Tomcat Servers 생성 및 설정
	하단 Servers 탭 → tomcat v9.0 더블클릭
	→ port number (tomcat admin port 옆) 빈칸에  '9191' 입력 후 엔터 (9191 포트번호로 웹서버와 통신하면서 실행하겠다는 뜻) 
	→ ctrl+s (저장)
	→ Ex01 탭와서 다시 실행하면 insert html 창에 오류뜨면서 Inner Web Browser(이클립스 내부 브라우저)로 실행됨

------------------------------ Tomcat 삭제 후 재설정 방법 ------------------------------
1. 상단 Window탭 → Show View → Servers
2. 기존 Tomcat 삭제 후 포트번호 재설정

------------------------------ 한글 설정 ------------------------------
[meta charset = 기본으로 설정된 meta charset="EUC-KR"을 "UTF-8"로 설정하는 방법]
	Window탭 → Preferences → Web = Html Files → 오른쪽 Encording에서 UTF-8 선택(맨 첫번째)
	EUC-KR : 영어는 기본이고 한글 처리 하겠다는 뜻
	UTF-8 : 다른 외국어까지 처리하겠다는 뜻

상단 Window탭 → Preference → encoding 검색 후 모두 "UTF-8"로 변경해주기
참고 사이트: https://blog.naver.com/zzang9ha/222045444073

※모든 파일은 WebContent 찍고 실행하기
	WebContent 찍고 파일 붙여넣기 해도됨
	또는 우클릭하고 new - folder 로 가져올 수 있음
	
------------------------------ HTML ------------------------------
■주석 단축키 : (ctrl + shift + /) <!--주석-->로 표현함

■요소(Element)
시작과 종료 태그의 조합
셀프 클로징 태그 = 비어있는 태그 = 홀 태그 : meta,img,hr,br
열고 닫는 태그 사이에 입력할 것이 없을 경우 <태그명/>로 표시
■태그(Tag)
< >(꺽쇠)로 둘러 싸인 범위 안에 명령어 이름을 표시하며, 거의 모든 태그는 닫는 태그가 존재한다(/).
■속성(Attribute)
시작 태그 안에 삽입되며 =와 쌍따옴표를 이용하여 값을 지정한다.
태그 내의 [키="값"]으로 구성된 항목을 [속성]이라고 한다.
속성 위치 순서 상관없음
→ <태그 속성1="값1" 속성2="값2" 속성3="값3">
■값(Value)
속성에 들어 가는 실제 값이다.

■기본화면
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

</body>
</html>

●<html></html> : 문서의 맨 처음과 맨 끝에 들어감
●<head></head> : HTML 문서의 큰 제목 부분을 정함
●<title> </title> : 웹 페이지의 제목을 지정
●<body></body> : 웹 브라우저 화면에 보일 HTML 문서의 실제 내용이 기술되는 곳, HTML 문서의 본문
			 	  <body> 안에는 흰 바탕 화면에 실행되는 내용 작성
●link, vlink, alink : <body> 태그 내의 속성으로 사용이 된다. 링크, 방문한 링크, 클릭시 색을 지정

<body> 태그의 속성 :
	bgcolor(배경색), background(배경 이미지), text(본문 글자색)
	link(링크색), vlink(방문한 링크 색), alink(클릭하는 순간 링크색)
	leftmargin(왼쪽 여백), righrmargin(오른쪽 여백)
	topmargin, oncontextmenu, onselectstart, bgproperties, scroll


------------------------------ 서식 관련 태그 ------------------------------
●블럭(block)요소 : h1~h6, p, div, ul, ol
	그 줄 전체를 차지하며, 한줄 다 차지하지 못하도록 너비/높이 속성 지정해준다. 문단을 나눌 때 사용
●인라인(inline)요소: span, img(너비높이 속성 지정 가능) - 내가 원하는 만큼만 영역으로 잡음.
	일반적으로 인라인 요소는 너비/높이 속성 필요없지만, img는 너비/높이 속성 지정 가능하다.

<h1~6>제목</h1~6> : 클자크기 1~6 지정, 숫자가 작을수록 글씨가 큼, 자동 줄바꿈(엔터) 기능있음
<p>내용</p> : 본문에서 단락(문단)을 구분/나눌 때 사용, 자동 줄바꿈(엔터) 기능 있음
<div></div> : 블럭 레벨 요소, 구역(division)을 나타내는 요소
<br> : 줄 바꿈(엔터) / 닫는 태그 없어도 됨

<b>내용</b> : 지정된 내용을 굵게(bold)
<em></em> : 강조, 이태릭체(기울임)
<i></i> : 이태릭체(italic)(기울임)
<u> </u> : 밑줄(underline)
<sub> </sub> : 아래 첨자(subscript)
<sup> </sup> : 위 첨자(superscript)
<hr></hr> : 수평선(horizontal rule)입력, 분리선 긋기 - 속성 들어갈 수 있음
	<hr size=n width=n align=left|center|right></hr> 수평선의 세로 두께,가로 넓이,문단에서 왼쪽|중앙|오른쪽을 지정
<font size=n color=영어,색상코드 face=글꼴체>내용</font> 글자를 크기,색상,글꼴을 지정

 <caption>렌터카 요금표</caption> : 제목 넣는 태그
 <tr></tr>: table 줄
 <th></th>: 글자 진해짐 (제목 쓸 때 많이 사용)
 <td>/<td>: table 칸

------------------------------ 목록 관련 태그(HTML_Ex02) ------------------------------
→ 리스트(목록) 만들기 : <ul> 태그와 <ol> 태그
→ 리스트 형태의 문서를 만들 때 사용
→ <li>로 목록(쓰고싶은 것) 묶어줌
→ <ul속성>, <ol속성> 과 같이 속성 써줄 수 있음

●<UL><LI></UL> : 비순차적 목록(Unordered List)
	번호에 관계없이 목록을 나열할 때 사용
	type : square(사각형),circle(흰원),disc(검은원,default값)
	→ 속성 작성 : <ul type="disc"> 또는 <ul type=" ">
●<OL><LI></OL> : 순차적 목록(Ordered List)
	번호가 있는 목록이 시작하는 곳에 <OL>을 사용
	type : A,a(알파벳),I,i(로마숫자),1(숫자,default값)
	→ 속성 작성 : <ol type="1"> 또는 <ol type=" ">
●<DL><DT><DD></DL> 정의 리스트(Definition List)
	용어에 대한 설명이나 정의를 위해 사용, 기본적으로 들여쓰기 하는 기능 있음
	dl,dt(제목),dd(내용) : 용어 정의
<!-- dl:정의목록태그, dt:정의용어태그  dd:정의설명태그 -->

------------------------------ 그림 관련 태그(HTML_Ex03) ------------------------------
●<img> 태그는 그림을 삽입하기 위한 태그

alt : 이미지를 표시할 수 없을 때 대신 출력할 내용(글)
src : 보여줄 이미지의 경로(중요)
width : 이미지의 가로 크기를 지정
height : 이미지의 세로 크기를 지정
title : 이미지 위에 마우스 포인터 올리면 나타나는 툴팁
border : 이미지 테두리 두께(굵기)
align : 이미지 옆에 출력될 텍스트 정렬 방식(top, middle, bottom, left, right)
	<img src="파일명" width=n height=n border=n> 
	<img src="파일명" alt="그림설명" align=left, center, right> - Alt=그림에 대한 설명, ALIGN=그림정렬방식
	<img src="파일명" align=top, middle, bottom> - 그림 다음에 오는 글자를 그림의 상단,중앙,아랫부분에 집어넣을 수 있도록 지정
loading : 이미지 로딩 방식(모든 브라우저가 loading 속성을 지원하는 것은 아님)
	lazy: 모든 이미지를 로드하지 않고 일부만 불러옴
	eager: 모든 이미지를 불러옴(default값)
	
./images : 현재위치(WebContent) 밑에 있다 (./생략가능)
./../images : 같은폴더 위치 아니고, 현재폴더 상단에 있는 폴더(WebContent)


●<figure> : 사진, 이미지, 다이어그램 등을 감싸는 요소
<figcaption>이미지제목</figcaption> : figure 요소에 캡션을 만든다. figure 요소의 자식 요소이며,제일 처음 또는 제일 마지막에 위치
<img/> : img와 figcaption 위치 순서에 따라 figcaption 글자의 위치가 이미지 상단/하단에 위치한다.
</figure>

------------------------------ audio, vidio(HTML_Ex04) ------------------------------
★ audio, vidio 모두 외부 브라우저에서 실행해야 잘 실행됨

●<audio> 태그는 HTML 문서에 오디오을 삽입하는 태그

.ogg: firefox,opera 브라우저에서 실행 가능
.mp3: 인터넷 익스플로러,safari,chrome 브라우저에서 실행 가능


●<vidio> 태그는 HTML 문서에 동영상을 삽입하는 태그
→ HTML 5에서 추가된 것이므로, HTML 5를 지원하지 않는 웹브라우저(예를 들어 IE 8 이하)에서는 작동하지 않음
→ 상충되거나 혼자서는 작동하지 않는 속성이 있다. 예를 들어 autoplay로 정하면 preload는 무시됨
→ 크롬 등 일부 웹브라우저에서는 muted와 autoplay를 같이 사용해야 자동 시작이 작동함.

<video autoplay controls="controls" loop muted poster="aaa" preload="bbb">
  <source src="xxx" type="yyy">
  zzz
</video>

→ controls ="controls" 이므로 속성=값일 경우 값 생략가능, 속성은 위치 순서 상관없음
autoplay: 동영상을 자동으로 재생
controls: 재생, 정지 등 조작 메뉴를 보여줌
loop: 동영상을 반복 재생
muted: 음소거
poster: 동영상 재생 전에 보여줄 이미지
preload: 페이지를 열 때 무엇을 로드할지 정함
	auto: 동영상, 메타데이타 모두 로드
	metadata: 메타데이타만 로드
	none: 로드하지 않음
source
	src: 동영상 위치를 입력. 웹브라우저가 가장 많이 지원하는 형식은 MP4
	type: 동영상 타입을 알려줌. 만약 MP4 파일이라면 video/mp4라고 적는다.
	zzz: 웹브라우저가 video 태그를 지원하지 않을 때 출력될 텍스트

------------------------------ a 태그(HTML_Ex05) ------------------------------
●<a> 태그
→ 에이 태그 또는 앵커(anchor) 태그라고 부른다.
→ 하이퍼-링크로 많이 사용되는 태그이다.
→ 밑줄이 자동으로 생긴다.

href: 하이퍼링크의 주소(url)를 지정한다.
target: 링크를 어디에서 열지 정한다.
	_self : 같은 웹 브라우저 창(현재 페이지)에서 링크를 처리(default값)
	_blank : 새 창 또는 새 탭에서 링크를 처리
	_parent : 부모 요소의 웹 브라우저 창(부모가 없으면 _self 처럼 표시)
	_top : 최상위 부모 요소의 웹 브라우저 창

방법① 글자를 누르면 링크된 주소로 이동
	<a href="http://www.daum.net" title="www.daum.net" target="_self">다음</a>
document.write("<a href='http://www.melon.com'>멜론<a>&nbsp;&nbsp;"); // 멜론 글자 클릭해서 주소이동
/* nbsp; : 띄어쓰기 */
방법② 그림을 누르면 링크된 주소로 이동
	<a href="https://www.starbucks.co.kr/">
		<img src="images/cafe2.jpg" width="100" height="100">
	</a>
방법③ 또다른 html로 넘어가도록 (같은 위치에 있으면  ./ 지정하지 않고 불러올 수 있음)
	<a href="./Ex03_img.html">
		<img src="images/cafe1.jpg" width="100" height="100">
	</a>
방법④ 글자를 누르면 링크된 주소로 이동 - 문자열에 .link() 함수 이용
document.write("줌".link("http://www.zoom.us"));
	
------------------------------ 프레임(HTML_Ex06) ------------------------------
●<iframe> : 내부 프레임(inline frame)이라는 의미로 하나의 HTML문서내에서 다른 HTML문서를 보여주고자 할때 사용 (프레임을 만들어서 그 안에 들어오게하기)
<frameset> 태그 사이에 올 필요가 없으며, 독립적으로 마치 <img> 태그를 사용하듯 문서내의 원하는 위치에 삽입할 수 있다.
→ 아이프레임에서 사용할 수 있는 속성도 <img> 태그과 유사함.

<iframe></iframe>
	src: iframe에 삽입될 문서의 주소
	width: iframe의 너비 지정(px,% 가능)
	height: 높이 지정(px,% 가능)
	frameborder: iframe 경계선의 두께를 지정(테두리를 표시할지 말지 지정-1은 표시,0은 표시X)
	marginwidth: 내용의 위(top),아래(bottom) 여백 지정
	marginheight: 내용의 좌(left),우(right) 여백 지정
	scrolling: iframe 스크롤바 사용여부를 지정
		yes: 스크롤바가 생김(default값)
		no: 스크롤바가 생기지 않음
		auto: 자동
	align: iframe 정렬 (top:위, middle:중앙, bottom:아래, left:왼쪽, right:오른쪽)
	name: target이 필요한 프레임의 이름
<iframe src="http://www.starbucks.co.kr/" frameborder="0" width="600" height="300"
	marginwidth="0" marginheight="0" scrolling="yes">

------------------------------ id (HTML_Ex07) ------------------------------
●id 속성 : id=""
→ 특정 위치로 가고싶을 때 사용, 책갈피 효과, 값은 아무거나 넣어도됨
	이동하고 싶은 곳 속성에 id 달아주기
→ id 설정해둔 곳으로 가고 싶을때는 #을 사용

<body>
<ul>
<li><a href="#Toy1">Toy1</a></li>
</ul>

<h2 id="Toy1">Toy1</h2>
	<img src="images/toy1.jpg" width="250" height="500"
		alt="Toy1.jpg 이미지 입니다." />
<br>
	<a href="#">맨 위로 이동하기</a>
</body>

------------------------------ 이미지맵 (HTML_Ex08) ------------------------------
●이미지맵(image map): 이미지 상의 클릭 위치에 따라 다른 링카가 열리도록 하는것

<map> 태그: 이미지맵을 만드는 태그
→ name 속성을 통해 이름을 지정하고 <img> 태그에 usemap 속성으로 이미지 맵을 지정한다.
→ <map> 태그의 name의 이름과 usemap 속성의 value는 동일해야한다.
→ usemap 속성의 값에는 #을 앞에 작성해야한다.
→ map요소는 몇 가지의 area 요소를 포함, area요소는 이미지맵에서 영역을 지정한다.

<area> 태그: <map></map> 요소 내부에 포함되어 작성
alt: 대체 텍스트 지정
coords: 링크로 사용할 area(영역)의 좌표 지정(0,0이 왼쪽 상단)
href: 이동할 주소 지정
shape: area(영역)의 형태를 지정 
	rect: 사각형 모양(default값)
		coords="100,100,200,200"/> x1(좌표),y1(좌표),x2(가로길이),y2(세로길이)
		(100,100)좌표 영역 부터 (200,200)좌표 영역까지 사각형으로 지정하겠다는 뜻
	circle: 원형 영역
		coords="60,40,30"/> x1(원 중심좌표), y1(원 중심좌표), 반지름
	poly: 다각형 영역(x1,y1을 시작으로 꼭지점의 갯수대로 늘어나게된다.)
		삼각형: coords="x1,y1,x2,y2,x3,y3" (최소한의 도형)
		육각형: coords="x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6"
		(중요)반드시 한 방향으로만,차례대로 좌표값 입력해야함. x1,y1 으로 갔다가 갑자기 x4,y4로 갈 수 없음.
		
------------------------------ table (HTML_Ex09~Ex11) ------------------------------
//java에서는 Jtable로 table 만들었었음
<table> 태그 : 표 만들기(엑셀 화면과 같이 생김)
<tr>: 줄
<td>: 칸
칸 하나 : 셀(cell)이라고 함
bgcolor="yellow": 색 설정
bgcolor="#1DDB16": 색을 16진수로 바꿔서 표시
	R(red),G(green),B(blue) 각 2자리 씩 총 6자리로 구성
	각 색상은 0부터 255(FF)까지 총 255의 색상을 가지고 조합될 수 있다.
	앞에 #를 붙여서 표기한다.
cellspacing="0": 셀과 셀 사이의 간격 설정
cellpadding="10": 안쪽 여백 설정(셀과 내부 글자와의 간격을 벌려줌)
background="./images/book.jpg" : 배경으로 사진 불러오기

rowspan="2" : 행(칸 밑으로) 몇 줄 병합할지 여부
colspan="2" : 열(칸 옆으로) 몇 줄 병합할지 여부
align="center|rignt|left" : 정렬 방법 설정
	

→ 	<table border="1" width="300" height="200" 
				cellspacing="0" cellpadding="10" background="./images/book.jpg">
			<tr bgcolor="#1DDB16">
				<td bgcolor="yellow">가가가</td>
				<td>나</td>
				<td>다</td>
			</tr>
	</table>
	
→ 	<table border="1" width="400" height="300">
		<tr>
			<td rowspan="2">일</td>
			<td>이</td>
			<td>삼</td>
		</tr>
		
		<tr>
			<td colspan="2">사</td>
			<!-- <td>오</td> -->
			<!-- <td>육</td> -->
		</tr>
		
→ 	</table>
	
		<table border="1" width="400" height="300">
		<tr>
			<td rowspan="3" bgcolor="pink" align="center">일</td>
			<td colspan="3" bgcolor="yellow">이</td>
		</tr>
		
		<tr>
			<td colspan="2">삼</td>
			<td rowspan="3" bgcolor="#2FED28" align="right">사</td>
		</tr>
		
		<tr>
			<td bgcolor="#FF8224">오</td>
			<td bgcolor="cyan" align="center">육</td>
		</tr>
		
		<tr>
			<td colspan="3" bgcolor="blue"><font color="white" size="3">칠</font></td>
		</tr>
	</table>	
------------------------------ form (HTML_Ex12) ------------------------------
 자바 : JTextField
<form> 태그: 데이터를 서버로 전송하는 태그(검색 창, 게시판, 로그인, 주문서, 회원 가입 등에 활용)
관련 속성: name(폼 이름), method(전송 메소드), action(이동할 페이지), targe

<imput> 태그: 사용자로부터 정보를 받아들이는 용도로 사용
type: 입력 태그의 유형
value: 입력 태그의 초기값을 말하며 사용자가 변경 가능함(실제 들어 있는 값 또는 사용자가 입력한 값)
name: 서버로 전달되는 이름을 말함(사용자 임의지정), 컨트롤에 이름을 부여
	input type="유형" name="이름"
	
<lable> 요소: input, textarea, select 요소와 같은 폼 요소의 제목을 달 때 사용

type 속성값: input type="유형"
	text: 텍스트(문자)를 입력하는 창 생성
	password: 비밀번호 입력하는 창 생성(비밀번호처럼 입력한 것 가려짐)
	email: @이메일 형태로 작성하지 않으면 오류남
		<input type="text" name="userEmail1" /> @
			<select name="userEmail2">
				<option>###선택###</option>
				<option value="nate.com">nate.com</option>
				<option value="다음">daum.net</option>
				<option value="naver.com">naver.com</option>
			</select>
	date: 날짜입력(외부 브라우저에서 보면 달력으로 나타남)
	week: 주와 연도 선택 컨트롤 창 생성(외부브라우저 확인)
	number: 숫자만 입력받는 컨트롤 창 생성
	radio: name 값이 같으면 하나만 선택 가능, name 값이 다르면 다중 선택가능-  checked 써주면 기본으로 클릭되서 나옴
	range: 지정한 숫자 사이의 숫자 선택 슬라이더 컨트롤 창 생성(평점) 
	checkbox: 체크박스 생성(여러개 선택가능)
		type="checkbox" value="바베큐" checked="checked" (이미 선택되어 나옴)
		속성이 같을 경우(checked="checked")에는 checked만 입력해도됨
	tel: 전화번호 입력받아서 검증하는 컨트롤 창 생성
	file: 파일을 지정할 수 있는 컨트롤(파일 업로드)
	
	
	<fieldset> 요소: 폼 컨트롤(input, select, textarea) 및  입력 박스들을 그룹화하는 용도로 사용, 자동으로 테두리가 생성
	복수의 컨트롤 요소를 하나의 그룹으로 범위를 정의하며 그룹화 및 구조화 할 수 있다.
			<fieldset style="width:30%">
				<legend>예약할 객실을 선택하세요</legend>
				<input type="radio" name="userRoom1" /> Single
				<input type="radio" name="userRoom2" /> Double
				<input type="radio" name="userRoom3" checked="checked"/> Twin
			</fieldset>	
	
	<select> <option></option> </select> : 콤보박스라고도 하며 Pull-Down Menus라고 표현하기도 한다. (여러 옵션 중 하나 선택할 때 사용)
	<select></select>: 목록 상자의 시작과 끝
	<option>: 목록 상자에 포함될 항목 지정
	<textarea></textarea>: 여러 줄 입력상자
		<textarea name="userMessage" rows="4" cols="30"></textarea> - text 여러줄 입력 가능, rows:몇줄, cols:한줄에 몇글자
	
	button: 일반 버튼 생성(단순히 버튼 눌리는 기능)
	submit: db에 입력한 내용을 서버로 제출/전송하는 버튼 생성 (☆action일 경우에만 jsp로 넘겨서 db작업 해줄 수 있음)★
	reset: 클릭과 동시에 입력한 것 모두 지워짐


------------------------------ ※용어※ ------------------------------
style="" - 영역에 디자인 넣고 싶을 때 사용
font: italic 30px "Times New Roman"
	font-size:12px; - 글자 크기
	font-weight:bold /* 글자 굵게 */
		normal | bold | bolder | lighter | lighter
	font-family: "맑은 고딕", 궁서; /* 폰트 설정(처음쓴 글꼴이없으면 두번째 폰트로 넘어감-글자에 공백있으면 ""로 묶기) */
	font-style: italic|nomal;
text-align: center|left(default값)|right|justify(양쪽정렬) - 문단 정렬

color:#FF00DD; - 글자 색
line-height:150%; - 줄간격
background-color: green; - 배경색
background-color: rgb(205,205,205); /* 색표시 방법은 3가지 */

width: 50%; /* 너비 */
line-height: 150%; /* 상하 문자열 간의 줄 간격 */
list-style: none; /* 리스트 스타일 지정X */
	square(사각형),circle(흰원),disc(검은원),lower-alpha(알파벳 소문자),upper-alpha(알파벳 대문자),upper-roman(로마자(소문자) 숫자),lower-roman(로마자(대문자) 숫자)
list-style-position: 리스트의 블릿이 밖에 있을지, 안에 있을지를 결정
	outside: 블릿을 바깥에 위치(default값)
	inside: 블릿을 내부에 위치
	inherit: 부모의 값을 상속 받음
list-stype-image : url('../img/dot.png'); /* 리스트 블릿으로 기본 형태가 아닌 이미지를 사용하고자 할 때 사용한다. 속성 값으로 해당 이미지 주소 url을 적어주면 된다. */
text-decoration: none; /* 하이퍼링크 기본으로 들어가는 글자에 밑줄 없애고 싶을 때 */
	unerline(글자에 밑줄), overline(글자에 윗줄), line-through(글자에 줄긋기), blink(문자열 깜빡임)

border: 1px solid #000; /* 테두리 굵기, 테두리종류(solid 실선), 테두리 색깔 */
	border-bottom: dotted; /* 테두리 종류dotted(점선 밑줄) */
	border-bottom-color: red; /* 테두리 색 설정 */
	border-radius: 40px; /* 숫자가 클 수록 테두리 둥글게 설정 */
	border-radius: 70px 20px 10px 3px; /* 왼쪽상단 부분을 첫 시작으로 시계 방향 순으로 설정  */
	border-radius: 70px 20px; /* 70px 20px 70px 20px 와 같다고 보면됨 */
padding:30px; /* 30px만큼 안쪽 전체(사방으로) 여백 설정 */
	padding-top|bottom|left|right
	padding: 10px 20px 50px 100px; /* top right bottom left(시계방향순으로 작성) */
	padding: 10px 30px; /* (10px 자리 : top,bottom / 30px자리: right,left) */
margin: 20px; /* 바깥쪽 여백 전체(사방으로) 설정-줄간격*/
	margin-top|bottom|left|right|auto(자동설정)
	margin: 10px 5px 10px 20px; /*top right bottom left (시계방향순으로 작성) */

background: url(../images/dot.png) repeat-x bottom left;
	background-color: 색상;
	background-image: url(./../images/shoes1.png); /* 이미지 불러와서 배경 설정-이미지 계속 반복 */
	background-repeat: repeat-y; /* y축 또는 x축 한줄로만 반복 넣기 */
	background-repeat: no-repeat; /* 반복하지 않는다 */
	background-position: top right; /* default값 : top left */
	background-attachment: fixed; /* 배경 이미지는 멈춰있고 글만 움직임 (default값: scroll) */

float: right; /* 이미지가 오른쪽 비어있는 공간으로  띄어오르게하기  */
float: left; /* 이미지가 옆으로 붙어 나오게 하기 */
clear : left; /* 이미지가 왼쪽에 떠오르지 않도록 하기 */

&quot; : 큰 따옴표
&nbsp; : 공백(띄어쓰기) - Non-breaking Space
&laquo; : << 표시 - < 하나는 태그 표시기 때문에 << 로 표시됨
&raquo; : >> 표시
$amp; : &


→ 그림자 효과
/* h1영역을 박스처럼 생각해서 좌우위치 위아래위치 번짐정도 그림자,글씨 색지정 */
	box-shadow: 10px 20px 30px #ff0066;
	text-shadow: 5px 20px 7px #000;
→ 테이블
order: 1px solid black; /* 전체 테두리 */
border-collapse: collapse; 
	separate: 셀 테두리를 겹쳐서 표시
	collapse(default값): 셀의 테두리 선 간격을 벌려 표시
empty-cells: hide; /* 값이 비어있는 셀 안보이게 설정 */
border-spacing: 0px; /* 셀과 셀 사이의 간격 설정 */

→ 다단 나누기
column-count: 6; /* 6칸으로 단이 나뉨 */
column-rule: 1px dashed #666; /* 단과 단 사이 구분선 넣고 싶을 때 */
column-gap: 40px; /* 칼럼과 칼럼 사이에 간격 설정 */
text-align:justify; /* 문단 양쪽 정렬 */

→ 벤더 프리픽스(Vendor Prefix):
	어떤 속성, 스타일들의 기능이 가끔 실행 안될 경우 맨 앞에 붙여서 사용
	회사별로 붙여주는 접두어
-webkit-: 크롬, Safari 에서 실행할때 사용
-moz-: Firefox
-ms-: IE(인터넷익스플로어)
	↓
-webkit-column-count: 6;
-moz-column-count: 6;
-ms-column-count: 6;

→ transform 속성: 요소에 회전, 크기 조절, 기울이기, 이동 효과
transform: rotate(20deg); /* 네모칸 가운데 중심 기준으로 20도만큼 기울이기(degree), 음수도 가능 */
transform: rotate(20deg); /* (-20deg) 음수 넣으면 반대반향(반시계뱡향으로) 모양 돌아감 */
transform-origin: 0% 0%; /* 0.0 좌표 중심 기준으로 고정하고 기울이기 */
transform: skewX(20deg); /* 사다리꼴 모양으로 기울인 형태(찌그러진 효과)-skewX, skewY */
transform-origin: 0% 100%; /* 왼쪽 하단을 중심으로 고정하고 거기를 기준으로 기울임 */
	/* 기본 중심 default값: 50% 50% */
	/* 0,0 → 좌측 상단, 0,100 → 좌측 하단, 100,0 → 우측 상단 , 100,100 → 우측 하단   */ 

→ display: 원래의 속성 특징을 바꾸고 싶을 때 display 사용 (img, table 태그에서 주로 사용)
	none: 아무 속성도 갖지 않겠다는 뜻 (해당 요소를 화면에 표시하지 않음, 글자 안보이게 설정)
	inline: 인라인 요소로 형식을 바꿈 (default값)
	block: 블록 요소로 형식을 변경, 블럭요소의 특징을 가져서 한칸씩 띄어짐

document.write(typeof('abc') + "<br>"); // typeof: 데이터 타입이 뭔지 알 수 있는 함수


●대화상자:
prompt: 입력 받을 수 있는 창(입력대화상자)
	형식: prompt("윈도우창", "메세지 입력창");
	확인 버튼 : 내가 입력한 것이 출력됨
	취소 버튼: null값 반환 (내가 입력한 것 무시됨)
confirm: 확인/취소 버튼있는 창 생성(보통 두가지 선택지[boolean형태] 있을 때 사용)
	확인 버튼: answer:true
	취소 버튼: answer:false
alert: 확인 버튼 하나만 있는 대화상자(경고창 비슷)
		
●조건(삼항) 연산자
	조건 ? 참(일때수행할식) : 거짓(일때수행할식)
	예시) var result = answer ? "yes" : "no" ;



------------------------------ 02_CSS/chap01 ------------------------------
☆HTML에서는 style="" 으로 사용하지만, CSS에서는 :로 속성 지정해줌

●스타일 적용 방법① 인라인 방식 : Body에서 직접 적용
→ 스타일형식 : <style type="text/css"></style>
▶블록 요소에 인라인 방식으로 CSS 적용하기(1-1)
	<body>
		<h1>블록 요소에 인라인 방식으로 CSS 적용하기</h1>
		<!-- 인라인 스타일로 p 요소에 CSS를 적용합니다. -->
		<p style="font-size:12px; color:#FF00DD; line-height:150%; background-color:green;">Vegetables fit for use are recognized by the small sprout.<br />
		쓸모있는 야채는 어린 싹으로 알 수 있다. 될성 싶은 나무는 떡잎부터 알아본다.</p>
	</body>
	
▶span 요소의 사용과 특정 글자 꾸미기(1-2)
<span>영역잡기</span>: 특정 글자의 범위를 지정할 때 사용
	<body>
		<h1>span 요소의 사용과 특정 글자 꾸미기</h1>
		<!-- 특정 글자의 범위를 지정할 때 사용하는 span 요소를 사용하여 CSS를 적용합니다. -->
		<p style="color:orange; background-color: green;">
		<span style="color:white; backgroud-color: #FF3366">Vegetables</span> fit for use are recognized by the small sprout.<br />
		쓸모있는 <span style="color:green; background-color: #ffffff">야채</span>는 어린 싹으로 알 수 있다. 될성 싶은 나무는 떡잎부터 알아본다.</p>
	</body>

●스타일 적용 방법② 내장 CSS/유형 선택자 : <head> 요소 내에 <style> 요소를 사용하는 방식 ★많이사용
→ id 스타일, class 스타일, tag 스타일
→ HTML 태그 모두에 적용됨
→ 미리 적용될 공통된 스타일들을 정의해 두고, 필요할 때마다 스타일을 호출
→ 이를 [Embedding Style Sheet]라고 부른다.
→ 태그이름 { 속성 : 값 ; … ; 속성 : 값 }

▶내장 CSS방식으로 문서 전체의 배경 색상, 글자 색상 적용하기(2-1)
	<head>
		<title> 문서 전체의 배경 색상, 글자 색상 적용하기 </title>
		<meta charset="UTF-8" />
		
		<!-- 밖에다 쓰면 모드 p태그에 적용 -->
		<style type="text/css">
		
			body{
				background-color: #000000;
				color:red;
			}
			
			p{
				background-color: gray;
				color:yellow; /* -위에있는걸 덮어쓰기함 */
				width:400px;
			}
		</style>
	</head>

●스타일 적용 방법③ 외장 CSS : 외부에 CSS 파일을 만들어 두고 내부로 불러 들여서 사용하는 방식 (자주 사용하는 스타일 외부에 만들어놓고 수시로 가져다 사용가능)
→ <style> 태그와 주석 부분을 제외한 나머지 부분을 따로 편집기로 작성한 다음 스타일 시트 파일로 저장한다.
→ 확장자를 [.css]로 붙여주고 필요할 때마다 페이지의 <HEAD> 부분에서 호출한다.

<HEAD>
	<link rel="stylesheet" type="text/css" href="Part2Ch0103.css">
</HEAD>

rel: 현재 표시된 문서와 href 속성에 명시된 URL로 지정한 문서간의 계층적인 관계를 나타내는 속성
href: 이동하려는 파일 또는 URL을 지정하는 속성
	스타일 시트 파일의 URL
type: 이동하려는 파일 또는 URL의 문서의 종류
	text/css(MIME 타입)

▶link 요소로 CSS 문서 연결하기(3-1)
[unit03_01_link_before.html 파일]
	<head>
		<title> link 요소로 CSS 문서 연결하기 </title>
		<meta charset="UTF-8" />
		<link rel="stylesheet" type="text/css" href="s0301.css" /> <!-- s0301.css를 여기에 적용할것 -->
	</head>
[s0301.css 파일]
	body{
		background-color: #000;
		margin-top : 50px;
		
	}
	
	h1{
		color:#fff;
		font-size: 35px;	
	}


------------------------------ 02_CSS/chap02 선택자 ------------------------------
▶태그 선택자(1-1)
●태그선택자: 요소 선택자라고 한다.해당되는 모든 요소에 스타일이 적용된다.
→ htmlTagElement { 속성 : 값 ; }
→ htmlTagElement에는 h1, h2, p 등과 같은 html 요소를 입력한다

	<head>
		<title>태그 선택자 사용하기</title>
		<meta charset="UTF-8" />
		<style type="text/css">
		/* h3 요소에 관련된 CSS 속성을 정의합니다. */
			h3{
				background-color: #000;
				color:#fff;
				width:50%; /* 너비 */
				margin-left: 20px; /* 줄간격 */
			}
		/* li 요소에 관련된 CSS 속성을 정의합니다. */	
			li{
				line-height: 200%;
				color:#660;
				font-size: 12px;
				margin-left: 20px;
			}
		</style>
	</head>

▶클래스 선택자(2-1,2-2)
●클래스 선택자: 사용자 정의 선택자/도트(dot)선택자라고도 한다.
→ 문서 내에서 여러 번 반복하여 재사용할 수 있다.
→ 특정한 부분만 선택하여 스타일을 적용하고자 하는 경우에 사용된다.
→ .className { 속성 : 값 ; }

		<style type="text/css">
			.cook1{
				background-color: #f03;
				color: #fff;
				border:1px solid #000; /* 테두리 굵기, 테두리종류(solid 실선|dotted 점선), 테두리 색깔 */
				padding:30px; /* 30px만큼 안쪽 여백 설정 */
				margin:20px; /* 바깥쪽 여백 설정*/
			}
			.cook2{
				background-color: #fc3;
				color: #783212;
				border:1px dotted #f00;
			}
			
			.reddotline{
				color: red;
				border-bottom: dotted;
				border-bottom-color: red; /* 테두리 색 */
			}
			
			.bluedotline{
				color:blue;
				border-bottom: dotted;
				border-bottom-color: blue;
			}
		</style>
		
	<h3 class="cook1">재료-4인분 기준</h3> <!-- class 속성 넣기 - 각각의 h3에 다른 스타일 적용 : .cook1 -->
	<h3 class="cook2">조리법</h3>

▶id 선택자(3-1,3-2)
●id 선택자: 식별 선택자
→ 문서 내에서 유일하게 한 번만 사용되어야 한다.(여러번 사용해도 에러가 나지는 않는다.)
→ #idName { 속성 : 값 ; }

		<title>아이디 선택자 사용하기</title>
		<meta charset="UTF-8" />
		<style type="text/css">
			#source{ /* id소스에 적용시킴 */
				background-color: #ffc;
				width:200px;
				line-height: 150%;
				list-style: none; /* 리스트 스타일 지정x */
				border:1px solid #000;
			}

		</style>
	</head>

	<body>
		<h1>아이디 선택자 사용하기</h1>
		<hr />
		<h2>도가니탕</h2> 
		<h3>재료-4인분 기준</h3>
		<ul id="source"> 
			<li>도가니 1개</li>
			<li>양지머리 300g</li>
			<li>무 200g</li>
			<li>마늘 5쪽</li>
			<li>대파 3뿌리</li>
			<li>생강 1쪽</li>
		</ul>

▶속성 선택자(4-1,4-2)
●속성 선택자: 속성에 적용하고 싶을 때 사용하는 선택자
→ a 요소를 이용하여 선택자를 정의

a[target]: target 속성에만 적용(html 요소에서 속성이 있는 요소를 선택자로 지정)
a[target="_blank"]: html 요소에서 속성에 특정 값이 지정되어 있는 요소를 선택자로 지정

a[title^="제과"] : ^ : a태그 title 속성에 제과로 시작하는 글자만 해당
a[title$="기능장"] : $ : 기능장으로 끝나는 글자만 해당
a[title*="산업기사"] : * :  중간에 산업기사 들어간 글자만 해당

▶자식 선택자(5-1)
●자식 선택자: 선택자 내의 직계 자식 요소만 선택자로 지정
→ 선택자1 > 선택자2 { 속성 : 값 ; }
●자손 선택자: 선택자 안에 삽입된 모든 요소(직계 여부에 상관 없이)를 지정할 때 사용
→ 선택자1 선택자2 { 속성 : 값 ; } : 선택자 사이에 띄어쓰기

h2>span{ /* h2의 자식인 span만 선택 적용 */
				color:#f00;
			}

▶인접 형제 선택자(5-2) - 같은 부모 안에있는 형제 선택 시 사용
●인접 형제 선택자: 같은 부모 안에있는 형제 선택 시 사용
→ 같은 단계의 요소를 '+'를 이용하여 정의한다
→ 선택자1 + 선택자2 { 속성 : 값 ; }

		<style type="text/css">
			hr+h3{ /* hr 바로 뒤에나오는 h3 자리 선택 적용 - 부모가 모두 body*/
				background-color: #f60;
			}
		</style>
			
▶링크 관련 가상 클래스 선택자(6-1)	
●가상 클래스 선택자:  
→ 하이퍼링크와 폼 입력 상자에 마우스 포인터의 접근 상태에 따라 서로 다른 디자인의 변화를 주어 동적인 형태로 반응할 수 있게 만든 클래스를 말한다.
→ 즉, 가상으로 클래스를 설정한 것처럼 작동하는 클래스를 말한다.

a:hover{ /* a 태그에 마우스 올렸을 때 적용됨 */
	background-color: #cf3;
}

a:focus{ /* a 태그에 마우스 클릭했을 때 적용됨 */
				background-color: #000;
				color:yelow;
			}

▶순서 관련 가상 선택자(7-1)	
●순서 관련 가상 선택자: 
:first-child /* 첫 번째 자식 요소를 찾음  */
	li:first-child { color:lime; background-color: brown; }
:last-child /* 마지막 자식 요소를  찾음  */
	li:last-child { color:blue; }
:nth-child /* 맨 앞에서부터 특정 자식 요소를 찾음  */
	li:nth-child(even) : 짝수
	li:nth-child(odd) : 홀수
	li:nth-child(n) : n 번째
:first-letter /* 첫 번째 글자를 찾음  */
:first-line /* 첫 번째 행을 찾음  */
:before /* h1~h6, p 등과 같이 글자의 입력과 관련된 요소의 앞에 문자열이나 특수 기호를 삽입한다. content 속성 값으로 지정한 글자가 표시된다. */
	dt:before { /* 모든 dt태그 앞에 // 넣으라는 뜻 */
	content: "    //     ";
	font-size: 2em;
	color: #666;
	}
		
:after /* h1~h6, p 등과 같이 글자의 입력과 관련된 요소의 뒤에 문자열이나 특수 기호를 삽입한다.
		content 속성 값으로 지정한 글자가 표시된다.
		span.weight:after {
 		content: "lbs"; color:#bbb;
		}
		span 요소들 중에서 클래스 속성이 weight인 요소 다음에 content로 지정한 내용을 덧붙인다. */★다시 찾아보기

▶전체 선택자 사용하기(8-1)
●전체선택자: 아스타,별(*)를 사용하여 모든 태그에 적용
→ * { 속성 : 값 ; }

		<style type="text/css">
		/* html 전체 요소의 CSS 속성을 정의합니다.  */
			*{
				color:silver;
				margin: 10px;
				padding: 0px;
			}
		</style>
			
▶그룹 선택자 사용하기(8-2)
●그룹 선택자
→ 쉼표(,)를 사용하여 선택자를 나열하는 방식이므로, 중복되는 소스 부분을 줄일 수 있다.
→ 선택자1, 선택자2, 선택자3, … { 속성 : 값 ; }

/* 여러 선택자에 같은 CSS 속성을 정의합니다.  */
			h1, h2, h3, h4 { /* 공통적으로 설정할 것들을 그룹(,)으로 묶어 적용시키기 */
				font-size:20px;
				/* 폰트 설정(처음쓴 글꼴이없으면 , 다음 폰트로 넘어감 - 글자에 공백있으면 ""로 묶기) */
				font-family: "맑은 고딕", 궁서; 
			}
▶소속을 정하는 트리 구조의 하위 자손 선택자(9-1,9-2)
●하위 자손 선택자: 단계와 상관 없이 모든 요소를 선택할 수 있다.
→ 공백( )을 사용하여 종속된 다른 요소를 나열
→ 선택자1 선택자2 선택자3, … { 속성 : 값 ; }

			/* #box1>p>span{ /* id="box1"의 자식 p, p의 자식 span에 적용 */
			#box1 span{ /* 자손선택 : 띄어쓰기 */
				color:red;
			}
			
/* licenseList1 아이디로 지정된 li 요소의 a 요소의 title에 조리 포함된 곳 배경 노랑 설정 */
			/* #licenseList1 a[title*="조리"]{ */
			/* #licenseList1 li a[title*="조리"]{ */
			#licenseList1 > li > a[title*="조리"] {
				background-color: yellow;
			}
▶속성 값의 상속 관계 알아보기(10-1)
<style type="text/css">
			*{ /* 전체영역 설정 */
				font-family: "맑은 고딕", 바탕, "Times new Roman";
			}
			
			#cookingSrc{
				color : #f0d;
				font-size:15px;
			}
			
			#cookingSrc > p{ /* 자식 or 자손 둘다 사용가능 */
				line-height: 150%;
				width: 500px;
				background-color: cyan;
			}
			
			#cookingSrc p span{ /* 자식 or 자손 둘다 사용가능 */
				color:blue;
				font-weight:bold; /* 글자 굵게 */
			
			}
		</style>
▶선택자 우선 순위 (10-2)
!important > HTML에서 style을 직접 지정한 속성 > 아이디 선택자 > 클래스/속성/가상 선택자 > 태그 선택자(예:span) > 전체선택자

<style type="text/css">
			body{
				background-color: #000;
				color:cyan;
			}
			
			#bgPage1{
				color:#fff;	
			}
			
			.bgPage2 {
				color:#cf0;
			}
			
			.blueText{
				color:blue;
				background-color: yellow;
			}
			
			span{ /* 클래스선택자>태그선택자 이지만, !important 중요 표시해주면 지정된 값나옴 */
				color:red !important;
			}
		</style>

------------------------------ 02_CSS/chap03 ------------------------------
글꼴설정
요소 여백처리
이미지 넣기
글자 그림자, 블럭요소 그림자
테이블 스타일 설정

▶글자와 관련된 속성(1-1)
	<head>
		<title> 글자와 관련된 속성 알아보기 </title>
		<meta charset="UTF-8" />
		<style type="text/css">
		
			#box1 h2 { /* 따로따로 설정  - 쉼표로 구분해주지 않음 */
				font-family: "Times New Roman", sans-serif;
				font-size: 2em;
				font-weight: nomal; /* 글씨 굵기(bold 등) */
				font-style: italic; 
			}
			
			#box2 h2{ /* 한꺼번에 설정 */
				font: italic 30px "Time New Roman"
			}
			
		</style>
	</head>
	

▶요소의 크기 지정 및 여백 처리하기(3-1)
<style type="text/css">
			h1{
				border : 2px solid red; /* 테두리 설정 */
				margin-top: 30px;
				font : 1.5em "맑은 고딕",sans-serif /* 쉼표로 구분해 주는 것은 글꼴에 관한 설정 */
				padding-bottom:20px;
				text-align: center; /* 글자 가운데 정렬 */
			}
			
			div{
				border : 2px solid green;
			}
			
			p{
				border : 2px solid cyan;
				/* padding-top: 10px;
				padding-right: 10px; */
				/* padding : 10px 20px 50px 100px; */ /* top right bottom left(시계방향순으로 작성) */
				/* padding:10px 30px; */ /* (10px 자리 : top,bottom / 30px자리: right,left) */
				padding:10px;
			}
		</style>
		
▶모서리가 둥근 테두리 만들기(3-3)
<style type="text/css">
			div {
				background: #6d6d6d;
				border: 10px solid #f00;
			}
			p{
				background-color: #fff;
				line-height: 200%; /* 줄간격 */
				margin: 40px;
				padding: 15px;
			}
			.round1{
				border: 10px solid #ff9933;
				/* border-radius: 40px; */ /* 숫자가 클 수록 테두리 둥글게 설정 */
				/* border-radius: 70px 20px 10px 3px; */ /* 왼쪽상단 부분을 첫 시작으로 시계 방향 순으로 설정  */
				border-radius: 70px 20px; /* 70px 20px 70px 20px 와 같다고 보면됨 */
				
			}
			.round2{
				border: 10px solid yellow;
				border-radius: 20px 70px;
			
			}
		</style>

▶요소의 배경 처리하기(4-1)
		<title>요소의 배경 처리하기</title>
		<meta charset="UTF-8" />
		<style type="text/css">
			body{
				background-color: silver;
				background-image: url(./../images/shoes1.png); /* 이미지 불러와서 배경 설정 */
				background-repeat: repeat-y; /* y축 또는 x축 한줄로만 반복 넣기 */
				/* background-repeat: no-repeat; */ /* 반복하지 않는다 */
				background-position: top right; /* default값 : top left */
				background-attachment: fixed; /* 배경 이미지는 멈춰있고 글만 움직임 (default값: scroll) */
			}
			
			div{
				background: url(./../images/bg1.png) repeat-y fixed;
				width : 80%;
			}
			p{
				background: url(../images/dot.png) repeat-x bottom Left;
			}
		</style>
		

▶그림자 효과 만들기(5-2)
		<style type="text/css">
			h1{
				width: 400px;
				background: #fc3;
				border-radius: 20px 0px;
				/* h1영역을 박스처럼 생각해서 좌우위치 위아래위치 번짐정도 그림자,글씨 색지정 */
				box-shadow: 10px 20px 30px #ff0066;
				text-shadow: 5px 20px 7px #000;
				
			}
		</style>
		
▶테이블에 관련된 속성 알아보기(6-1)
border: 1px solid black; /* 전체 테두리 */
border-collapse: collapse; 
	separate: 셀의 테두리 선 간격을 벌려 표시
	collapse(default값): 셀 테두리를 겹쳐서 표시
empty-cells: hide; /* 값이 비어있는 셀 안보이게 설정 */
border-spacing: 0px; /* 셀과 셀 사이의 간격 설정 */
<caption>제목</caption>: 제목 넣을 때 사용하는 태그


→ css에 적용 (style 이용)
		<style type="text/css">
			#table1{ /* 스타일이용해서 적용하는 방법 */
				border: 1px solid black;
				border-collapse: collapse; 
				empty-cells: hide;
				border-spacing: 0px;
				width : 500px; /* 테이블 너비 설정 */
			}
			#table1 caption, #table1 th, #table1 td{ /* 하나하나 넣을땐 tr은 안됨 / 그룹으로 묶어줌 */
				border: 2px solid blue;
			}
			#table1 caption {
			 border-radius : 10px;
			
			}
			#table1 th{
				background: #b2ebf4;
			}
			#table1 td:first-child{ /* td의 모든 첫번째 태그에 적용  */
				background: #2f9d27;
				text-align: center;
			}
		</style>

------------------------------ 01_HTML_Ex13_semantic ------------------------------
▶시맨틱(semantic) 요소를 이용한 마크업
dt:before { /* 모든 db 앞에 // 넣으라는 뜻 */
→시멘틱 요소 : 어떤 내용을 쓸 지에 대해 더 자세히 알려주기 위한 태그들. 아래 태그들을 사용 안했다고 해서 오류가 나지 않지만, 무엇을 작성했는지 한눈에 알아볼 수 있도록 사용
<header></header> : body 안 본문의 제목으로 넣고 싶을 때 사용
<hgroup></hgroup> : 헤더 안 그룹으로 넣어서 사용
<nav></nav> : 메뉴 넣고 싶을 때 사용
<section></section> : 진짜 본문의 내용 작성(글의 내용-기사 본문 같은 것들)
<article></article> : section(본문) 안에 있음
<aside></aside> : 배너 같은 것 넣을 때 사용(본문하고는 약간 거리가 있음)
<footer> : 맨 아래쪽 내용 위치하는 내용 표시하고 싶을 때 사용(저작권, 오시는 길, 약도 등)

------------------------------ 02_CSS/chap04 ------------------------------
▶이미지 요소 옆에 문단 흐르게 만들기(1-1)
→ 그림과 글자가 어우러지도록 만들기
	/* img Design. Layout */
	.floatLeft {
		float: right; /* 이미지가 오른쪽 비어있는 공간으로  떠오르게하기 */
		margin: 10px 5px 10px 20px; /* 위, 오른쪽, 아래, 왼쪽 여백 지정 */
	}
	.floatRight {
		float: left; /* 이미지가 왼쪽 비어있는 공간으로  떠오르게하기 */
		margin: 0px 20px 10px 0px;
	}

▶02_00_position
position 속성: 배치를 내 마음대로 하고 싶을 때 사용
<style type="text/css">
		div{
			width: 250px;
			height: 250px;
		}
		.box1 {
			border: 3px solid red;
			position: fixed;
					/*
					static(default): 차례대로 나옴
					relative: 원래 있어야하는 자리에서 상대적으로 px 크기 만큼 꼭지점(0.0) 이동
					absolute: 꼭지점(0.0)을 항상 기준으로 놓고 px 크기 만큼 이동
					fixed: 고정
					*/
			left: 20px;
			top: 30px;
			
		}
		.box2 {
			border: 3px solid blue;
			position: fixed;
			left: 100px;
			top:100px;
			
		}
		.box3 {
			border: 3px solid green;
			position: fixed;
			left: 200px;
			top:200px;
			
		}
	</style>

▶고정 좌표 방식으로 배치하기(2-3)
&quot; : 큰 따옴표
&nbsp; : 공백(띄어쓰기) - Non-breaking Space
letter-spacing: 1px; → 글자와 글자 사이의 간격 설정 (양수: 간격이 커짐, 음수: 간격이 작아져서 글자 겹침)

			/* layout */
			/* ★ */
			header {
				position: fixed;
				width: 100%;
				top: 0px;
				left: 0px
				
			}
			nav {
				border: 1px solid gray;
				width: 200px;
				background-color: #FFd8d8;
				position: fixed;
				top: 80px;
				left: 50px;
				padding: 15px;
			}
			section {
				width: 500px;
				margin : 80px 0px 50px 350px;	
			}
			/* ★ */
			
*****210104
▶다단 나누고 구분선 표시하기(4-1)
		#bookPart{
			width:850px;
			margin-left: 50px;
			margin-bottom: 50;
			column-count: 6; /* 6칸으로 단이 나뉨 */
			column-rule: 1px dashed #666; /* 단과 단 사이 구분선 넣고 싶을 때 */
			column-gap: 40px; /* 칼럼과 칼럼 사이에 간격 설정 */
			text-align:justify; /* 문단 양쪽 정렬 */
			
→ 벤더 프리픽스(Vendor Prefix):
	어떤 속성, 스타일들의 기능이 가끔 실행 안될 경우 맨 앞에 붙여서 사용
	회사별로 붙여주는 접두어
-webkit-: 크롬, Safari 에서 실행할때 사용
-moz-: Firefox
-ms-: IE(인터넷익스플로어)
		↓
webkit-column-count: 6;
-moz-column-count: 6;
-ms-column-count: 6;
}

▶transform (05_00_transform)
      .trans01{
         background-color: rgb(205,205,205);  /* 색표시 방법은 3가지 */  
      
      }
      .trans02{
         background-color: rgb(205,205,205);   
         transform: rotate(20deg);
			/* 네모칸 가운데 중심 기준으로 20도만큼 기울이기(degree), 음수도 가능 */
		}
		.trans03{
			background-color: rgb(205,205,205); 
			transform: rotate(20deg); /* (-20deg) 음수 넣으면 반대반향(반시계뱡향으로) 모양 돌아감 */
			transform-origin: 0% 0%; /* 0.0 좌표 중심 기준으로 고정하고 기울이기 */
		}
		.trans04{
			background-color: rgb(205,205,205);
			transform: skewX(20deg); /* 사다리꼴 모양으로 기울인 형태(찌그러진 효과)-skewX, skewY */
			transform-origin: 0% 100%; /* 왼쪽 하단을 중심으로 고정하고 거기를 기준으로 기울임 */
			/* 0,0 → 좌측 상단, 0,100 → 좌측 하단, 100,0 → 우측 상단 , 100,100 → 우측 하단   */ 
		}		

▶transform 속성으로 요소 변경하기(5-1)
		/* 이미지 Transform */	
			#book1 {
			background:url(../images/snow_book1.png) no-repeat;
			width:300px;
			height:193px;
			transform:rotate(25deg);
			transform-origin: 20% 40%; /* (default값: 50% 50%) */
			/* margin: 20px; */
			}

▶display (03_00_display.html)
<style type="text/css">
	img{
		display: block; /* 블록 요소로 형식을 변경, 블럭요소의 특징을 가져서 한칸씩 띄어짐 */
			/* display: 원래의 속성 특징을 바꾸고 싶을 때 display 사용 (img, table 태그에서 주로 사용)
				none: 아무 속성도 갖지 않겠다는 뜻 (해당 요소를 화면에 표시하지 않음,안보이게함)
				inline: 인라인 요소로 형식을 바꿈 (default값)
				block: 블록 요소로 형식을 변경, 블럭요소의 특징을 가져서 한칸씩 띄어짐 */
	}
</style>


------------------------------ 02_CSS/chap05 ------------------------------
▶해상도 크기에 따라 디자인 다르게 설정하기(7-1)
/* Media Query */
@media only screen and (min-width: 320px) and (max-width: 799px){ - min~max 사이 픽셀일 경우 적용
	h1{
		background: url(../images/1.png) no-repeat center top;
		height: 295px;
	}
	.btn{
		border-radius:5px;
		padding: 5px 10px;
		font-size:1.1em;
	}
}
@media only screen and (min-width: 800px) and (max-width: 1024px){

@media only screen and (min-width: 1025px){ - 해당 픽셀 이상이면 아래 설정 적용


------------------------------ 03_JavaScript_01_Bagic ------------------------------
▶Ex01
	<script type="text/javascript"> // JavaScript 작성 코드
		var a,b,c; /* 변수선언: var 생략가능, 자료형 사용X */
		a = 5;
		b = "20";
		c = "0.7";
		
		// 큰 따옴표(""),작은 따옴표('')로 문자열임을 나타냄
		window.document.write(a+"<br>"); // body영역 이외 JavaScript 영역 출력 명령어 //window 객체는 생략가능 document: 흰색 배경영역 
		document.write(a+1+"<br>"); // 문자열 태그로 만들어서 "<br>" 출력
		document.write(b+1+"<br>"); // +(플러스)는 문자 연결(나열)의 뜻
		document.write(c+1+"<br>") // 자동 엔터기능이 없기때문에 습관처럼 <br> 같이 써주기
		
		document.write(typeof('abc') + "<br>"); // typeof: 변수(데이터) 타입이 뭔지 알 수 있는 함수
		document.write(typeof('123') + "<br>"); //→ string 타입
		document.write(typeof(123) + "<br>"); //→ number 타입
		document.write("<br>");
		document.write(typeof(true) + "<br>"); //→ boolean 타입
		document.write(typeof('true') + "<br>"); //→ string 타입
		document.write(typeof(a) + "<br>"); //→ number 타입
		document.write(typeof(d) + "<br>"); // undefined: 없는 변수의 타입을 출력하려고 할 때 출력됨
		
		document.write("3"+1+"<br>"); //→ 31 (문자열에 연결이 되어 출력)
		document.write(+"3"+1+"<br>"); // 문자열 앞에 + 쓰면 문자열이 숫자가 됨
		document.write(Number("3")+1+"<br>"); // 괄호 안에있는 것(문자열)을 숫자로 바꾸는 함수
		document.write(eval("3")+1+"<br>");
		//문자열을 숫자로 바꿔주는 기호(+),함수(number,eval)
		
		document.write('<h1>Java Script</h1>'); //블럭요소이기 때문에 자동 엔터
		document.write("<h2>" +b + "</h2><br>");
		
		document.write("<img src='shoes3.png' width='100px' height='100px'>");
		
	</script>

●대화상자:
prompt: 입력 받을 수 있는 창
	확인 버튼 : 내가 입력한 것이 출력됨
	취소 버튼: null (내가 입력한 것 무시됨)
confirm: 확인/취소 버튼있는 창 생성(보통 두가지 선택지[boolean형태] 있을 때 사용)
	확인 버튼: answer:true
	취소 버튼: answer:false
alert: 확인 버튼 하나만 있는 대화상자(경고창 비슷)
		
●조건(삼항) 연산자
	조건 ? 참(일때수행할식) : 거짓(일때수행할식)
	예시) var result = answer ? "yes" : "no" ;
	
▶Ex02_prompt
<!-- style과 script 위치 순서 상관없음 -->
<script type="text/javascript">
	var yourName = prompt("이름을 넣어주세요", "아무개"); // 내가 입력한 이름이 yourName에 들어감
	document.write("<p><span>"+yourName +"</span></p><br>");
		
	if(yourName == ""){ // 아무것도 안넣으면 null값 출력
			document.write("이름 누락");
	}
	else if(yourName != null){
		document.write("<p><span>"+yourName +"</span></p><br>"); // 입력한 값 나옴
	}
	else{
		document.write("취소 클릭함"); // null값 나옴
	}
</script>

▶Ex03_confirm
<script type="text/javascript">
	var answer = confirm("게임 한판 하시겠습니까?");
	document.write("answer:"+answer+"<br>");
	
	var result = answer ? "yes" : "no" ;
	document.write(result);
</script>

▶Ex04_alert
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Ex04.html</title>
<script type="text/javascript">
	function isWinter(choice) { // 정의(function) - isWinter(true)를 호출하면 이쪽으로 넘어옴(true/false 가지고올 수 있음)
		// document.write(choice); // '예' 버튼 클릭하면 true 나오고, '아니오' 버튼 클릭하면 false 나옴
		alert(choice); // 팝업창 띄움
		if(choice == true){ // "예" 버튼 클릭할 때 출력
			alert("올해 겨울은 춥습니다."); // choice에 들어온 값이 true일 경우 출력 (경고창 두번 출력됨-alert가 2개있기 때문)
		}
		else{ // "아니오" 버튼 클릭할 때 출력
			alert("올해 겨울은 춥지 않습니다."); // choice에 들어온 값이 false일 경우 출력
		}
	}
</script>
</head>
<body>
	<h3>올해 겨울은 춥습니까?</h3>
	<form> <!-- input태그는 form 사용 -->
		<input type="button" value="예" onClick="isWinter(true)"> <!-- 함수, (java에서)메서드 호출하는 것: (true)값 넘긴다 -->
		<input type="button" value="아니오" onClick="isWinter(false)"> <!-- 버튼 클릭할때 마다 호출됨 -->
		<!-- true나 false를 ''문자열로 출력해 넘길 경우 위에 function if문 에도 true나 false를 문자열 형태로 비교해줘야함   -->
	</form>
</body>
</html>


▶Ex05_function
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Ex05.html</title>
<style type="text/css">
	#result{
		width: 100px;
		height: 100px;
		border: 1px solid black;
	}
</style>

<script>
	function SumofTwo(a,b){ //변수만 쓰면됨. 자바처럼 int a, int b 안써도됨
		//alert(1);
		//alert(a); // 버튼 누를때마다 1 출력되는 경고창 뜸 (잘 호출되는지 확인하고 주석처리)
		//alert(b); // undefined 출력됨
		
		//HTML코드 : body 안에 써넣은 모든 코드들(태그, 태그없는것 등등 모든것)
		
		myarea = document.getElementById("result") // document 영역: 출력되는 흰색 창 모두 
			// .getElementById("result"): id가 result인 영역(div)에 대한 정보를 가져와서 myarea 변수에 넣기
			// myarea 영역 : 정사각형 박스
		if(a==null){ // 2번째 버튼 클릭 했다는 뜻 - if문 : 어떤 버튼을 클릭했는지 구분해서 나타냄
			alert('2번째 버튼 클릭');
			myarea.innerHTML = "변수 a가 초기화 되지 않았습니다.<br> 변수 b의 값은 " + b + "입니다."
			// body 안에 써놓은 모든것 : html 코드(태그 있으나 없으나 똑같음)
			//myarea.innerHTML: myarea 영역의 정보를 가져와서 html 코드로 형태로 넣어라
		}else if(typeof b == "undefined") { // typeof b : b의 타입이 무엇인지
			alert('3번째 버튼 클릭'); // 3번째 버튼 클릭 했다는 뜻(3번째 버튼에는 2번째 자리 값(b자리)이 아예 없기 때문에)
			myarea.innerHTML = "변수 b에는 아무 값도 들어오지 않습니다.";
		}else{ // 1번재 버튼 클릭 했다는 듯
			alert('1번째 버튼 클릭');
			myarea.innerHTML = "a+b의 값은 " + (a+b)+"입니다."; // JavaScript; 생략가능
		}
	} // SumofTwo(a,b)
</script>

</head>
<body>

	<form>
		<!-- 자바에서는 넘기는 갯수만큼 똑같이 받아줘야하는데 javascript는 변수 값 몇개(최대값) 넣었는지에 따라 넣어도되고 안넣어도됨 -->
		<!-- 변수가 2개 준비되어있으면 변수가 최대 2개 (3,10)만 호출되고, 뒤에 1은 넣으나 안넣으나 의미가 없다. -->
		<input type="button" value="a=3,b=10" onclick="SumofTwo(3,10,1)"> <!-- sum of Two 호출 -->
		<input type="button" value="b=8" onclick="SumofTwo(null,8)"> <!-- sum of Two 호출, 하나만 넘김 -->
		<input type="button" value="a=3" onclick="SumofTwo(3)"> <!-- sum of Two 호출 -->
		<!-- 버튼 누를 때마다 alert 창이 뜸 - 잘 호출이 된다는 뜻 -->
	</form>
	
	<div id="result">
	  <!-- div에 값 넣지 않았기 때문에 있는지 없는지 아무것도 보이지않음 - 결과출력 예정 -->
	</div>

</body>
</html>

▶Ex06_function
<script type="text/javascript">
	document.write("나이0: " + age + "<br>");

	var age = 30; // 전역변수-선언한 이후에만 사용 가능(var는 생략가능)
	document.write("나이1: " + age + "<br>");
	
	function test(){ // 함수 정의
		// var가 있으면 새로 변수가 만들어지는것이고(지역변수로 사용), var가 없으면 기존에 만든 값 그대로 다음에 호출
		//(함수 안에서는 var의 유무에 따라 값 달라짐-전역변수가 될 수도있고, 지역변수가 될 수도있다.)
		var age = 40; // 지역변수(var를 붙이면 함수 안에서만 사용가능)
		document.write("나이2: " + age + "<br>");
	}
	
	test(); // 함수 호출
	
	document.write("나이3: " + age + "<br>");
</script>

<!--
→ 함수(function) 안 변수에 var를 붙였을 경우 출력값:
나이0: undefined
나이1: 30
나이2: 40
나이3: 30

→ 함수(function) 안 변수에 var를 생략했을 경우 출력값:
나이0: undefined
나이1: 30
나이2: 40
나이3: 40
-->

▶Ex07_switch_int
<script type="text/javascript">
	var favorite = prompt("어느계절을 좋아하세요? (1:봄, 2:여름, 3:가을, 4:겨울)", "1");
	// alert("favorite"+favorite);
	// alert(typeof(favorete)); // favorite 변수의 타입을 조회하기: String 문자열 : 내가 입력한 숫자를 문자열로 받는다.
	// 내가 입력한 모든것은 문자열 처리가 되기 때문에, case 뒤  숫자에 "" 따옴표 붙여서 문자열처리 해줘야함
	
	//int.parseInt: java에서 사용
	switch(parseInt(favorite)) { // paseInt(): 내가 입력한 문자열을 숫자로 바꿔준다. (case 뒤 숫자에 ""(따옴표) 안써도됨)
	case 1 :
		document.write("<h2>봄을 좋아하시는군요..</h2>");
		document.write("<img src='../images/spring.png' width='200px'");
		break;
		
	case 2 :
		document.write("<h2>여름을 좋아하시는군요..</h2>");
		document.write("<img src='../images/summer.png' width='200px'");
		break;
		
	case 3 :
		document.write("<h2>가을을 좋아하시는군요..</h2>");
		document.write("<img src='../images/fall.png' width='200px'");
		break;
		
	case 4 :
		document.write("<h2>겨울을 좋아하시는군요..</h2>");
		document.write("<img src='../images/winter.png' width='200px'");
		break;
		
	default : // 숫자 1~4 사이 이외의 모든것은 default 호출함 (다른번호 입력하거나, 취소버튼, 창x 버튼 눌러도 호출됨)
		alert("1~4만 입력 가능");
	} // switch
</script>

▶Ex08_for
<script type="text/javascript">
	for (i = 1; i <= 10; i++) {
		document.write(i + "<br>")
	}

	/* <h6>h6사이즈 글자입니다.</h6>
	~
	<h1>h1사이즈 글자입니다.</h1> */
	for (i = 6; i >= 1; i--) { // i가 6에서 1보다  크거나 같을 때까지 - 감소 하기
		document.write("<h"+i+"> h" + i + "사이즈 글자입니다. </h" +i+">");
	}

	/* 1~100사이의 수 중 짝수의 합 구하기 */
	total = 0;
	for (i = 1; i <= 100; i++) {
		if (i % 2 == 0) {
			total += i; // 짝수번째에 해당하는 숫자(i) 누적해봐라
		}
	}
	document.write("짝수의 합: " + total + "<br>");

	/* 이중포문 */
	for (i = 1; i < 3; i++) {
		for (j = 5; j <= 7; j++) {
			document.write(i + "," + j + "<br>")
		}
	}
</script>

▶Ex09_do_while
<script type="text/javascript">
	
	count = 0; // 몇번만에 stop 입력했는지 확인하기

	do {
		count++; // 반복 획수 
		str = prompt("입력하세요", "") // 비어있는 것으로 표시하고 싶을 경우 ""로 빈칸 넣기. 아예 값을 안넣을 경우 undefined 출력됨
		document.write("<h3>입력한값: " + str + "</h3>"); // document는  흰색 출력문 영역에 접근할 수 있는 내장객체 
		if (str == "stop") // 문자열 비교도 == 로 작성
			break;  // 내가 입력한 값이 stop 이면 빠져나가기
	} while (true); // 내가 입력한게 stop이 아닐 경우 계속 반복

	document.write("여기는 do~while 밖이다. <br>" + count + "번만에 빠져나왔습니다.");

	/* 내장객체: 대표적으로 document / 내가 new 사용해서 쓰지 않아도 자동으로 만들어져 있는 객체 */
</script>


------------------------------ 03_JavaScript_02_implicitObj(내장객체) ------------------------------
<!-- 
class Person{ // 내가만든 클래스
	String name;
}
Person p = new Person(); // Person class 객체 생성 / 내가 만든 객체
p.name = "길동"; // p라는 참조변수로 name이라는 멤버변수에 접근(값 넣음)

ArrayList<String> list = new ArrayList<String>(); // 자바 개발자들이 만들어놓은 내장 객체
list.add("아이유")
// 참조변수에 .을 찍었다는 것은 내가 만든 클래스나, 이미 만들어져있는 클래스에 객체를 생성한 후 어떤 매서드나 변수에 접근하겠다는 뜻
/* 내장객체: 대표적으로 document / 내가 new 사용해서 쓰지 않아도 자동으로 만들어져 있는 객체 */
-->

●내장객체: JavaScript에 이미 정의되어 있는 객체 (.찍어서 만드느것들)
String(문자열)
Array(배열)
Math
Date(날짜)
Document(문서)
window(브라우저 창) 객체
navigator 객체
form 객체 등등

▶Ex01_Array배열
→ 방법①		
var a = Array(4);
document.write(a.length +"<br>") // 배열의 방의 갯수 조회

for(var i=0;i<a.length;i++){ // 0~3번방 까지 각 방에 들어있는 값을 구해라
	document.write(a[i] + " "); // 변수에 값 없어서 undefined 4개 출력됨 (방4개)
}

→ 방법②
var arr = new Array('one', 'two' ,'three'); // array로 관리하는 방 3개
document.write("arr 갯수: " + arr.length +"<br>")

for(var i=0;i<arr.length;i++){ // for문 돌려가며 3번방 까지 하나씩 출력해서 보겠다
	document.write(arr[i] + " "); // 변수에 값 없어서 undefined 4번 출력됨 (방4개)
}

→ 방법③
var arr2 = new Array(); // ()괄호 안에 array 갯수는 쓰지않음
document.write("arr2 갯수: " + arr2.length +"<br>") // 배열 값 없기 때문에 0개방 출력됨
arr2[0] = 'spring'; // 문자열은 작은따옴표(''), 큰따옴표("") 상관없음
arr2[1] = "summer"; // 주석 달아도 방의 갯수는 동일하게 4개 / , 사이 빈칸으로라도 표시됨
arr2[2] = 'fall';
arr2[3] = 'winter';
document.write("arr2 갯수: " + arr2.length +"<br>")
document.write(arr2 +"<br>"); // 참조변수(arr2) 출력 : 자동으로 쉼표로 연결되어 출력됨
document.write(arr2.toString() +"<br>"); // 자바에서는 참조변수 뒤 .toString() 함수 붙어있음

→ 방법④
var arr3 = ['rose', 'tulip', 'lily'];
document.write("arr3 갯수: " + arr3.length + "<br>");

●for in문 = 확장 for문
for( ele in arr3 ) { //for(요소 in 작업대상) {} / ele : 0~2번방에 각각 접근(방 번호가 들어감)
	document.write(ele +" → " + arr3[ele] + "<br>");
}

 
/* 배열: 같은 자료형을 갖는 데이터 여러개를 한 묶음으로 묶어놓은 것 */
● 각기 다른 자료형으로 배열 만들기 - java와 다르게 종류가 다른 자료형을 묶음으로 배열을 만들 수 있음
var arr4 = [1,0.987,"abc",true];
document.write("arr4 갯수: " + arr4.length + "<br>");
for(pos in arr4){
	document.write(pos + " → " + arr4[pos] + "<br>");
}

◎출력문
4
undefined undefined undefined undefined 

arr 갯수: 3
one two three 

arr2 갯수: 0
arr2 갯수: 4
spring,summer,fall,winter
spring,summer,fall,winter

arr3 갯수: 3

0 → rose
1 → tulip
2 → lily

arr4 갯수: 4
0 → 1
1 → 0.987
2 → abc
3 → true

▶Ex02_Array_2차원배열
/* 2줄짜리로 구성된 2차원 배열 */
→ 2차원 배열 방법①
var arr = [
			['rose','tulip','lily'],
			['윤아','태연','서현','효연','티파니']
		];

document.write("행의 길이: " + arr.length + "<br>"); // 행의 갯수
document.write("0행의 갯수: " + arr[0].length + "<br>"); // 각 행마다 열이 몇 개 있는지 출력
document.write("1행의 갯수: " + arr[1].length + "<br>");

●이중 for문 이용해서 각 방에 들어있는 값들 출력
for(i=0; i<arr.length; i++){ // 행에 접근
	for(j=0; j<arr[i].length; j++) { // 열에 접근: 각 행의 갯수만큼 반복해라(i가 0 or 1이면 0 or 1행의 갯수만큼 반복)
		document.write(arr[i][j] + " "); // i행 j열에있는 값 출력
	}
	document.write("<br>")
}

●for in 문
for(i in arr) { // i에 행 번호 들어옴(0,1)
	//document.write(i+","+j+" ");
	for(j in arr[i]) { // j에 0행에 들어간 열 번호(0,1,2), 1행에 들어간 열 번호(0,1,2,3,4) 들어옴
		document.write(arr[i][j] + " ");
	}
	document.write("<br>")
}

→ 2차원 배열 방법②
var arr2 = new Array(2); // Array: 객체 / 방 2개있다고 지정 안해도 자동으로 방 2개가 생김
arr2[0] = ['rose','tulip','lily'];
arr2[1] = ['윤아','태연','서현','효연','티파니'];

for(i=0; i<arr2.length; i++){ // 행에 접근
	for(j=0; j<arr2[i].length; j++) { // 열에 접근
		document.write(arr2[i][j] + " ");
	}
	document.write("<br>")
}

◎출력문
행의 길이: 2
0행의 갯수: 3
1행의 갯수: 5

rose tulip lily 
윤아 태연 서현 효연 티파니 

rose tulip lily 
윤아 태연 서현 효연 티파니 

rose tulip lily 
윤아 태연 서현 효연 티파니


▶Ex03_Array_Date
<!-- java에서는 date라는 클래스를 사용해서 오늘 날짜를 가지고 올 수 있다. -->

<script type="text/javascript">
	var now = new Date(); // 객체 생성
	document.write("now1: " + now + "<br>"); // 프로그램을 사용한 현재 시간(시분초)
	document.write("now2: " + now.toString() + "<br>"); // 참조 변수 뒤에는 .toString() 있음
	document.write("now3: " + now.toDateString() + "<br>"); // 날짜만 조회
	document.write("now4: " + now.toTimeString() + "<br>"); // 시간만 조회
	
	document.write("오늘은");
	document.write(now.getYear() + 1900 + "년" + "<br>"); //1900+212 = 올해 년도 출력  → 2021년
	//document.write(now.getYear()); //→ 121 출력됨
	//1900을 더한이유: 1900년 기준으로 121년이 흘렀다는 뜻이기 때문에 더해줌
	document.write(now.getUTCFullYear() + "년"); //올해 년도 출력→ 2021년
	document.write(now.getMonth() + 1 + "월"); // +1 한 이유: 월이 0부터 시작하기 때문
	document.write(now.getDate() + "일<br>"); // 날짜는 잘 나옴
	
	document.write("현재 시간은");
	document.write(now.getHours() + "시");
	document.write(now.getMinutes() + "분");
	document.write(now.getSeconds() + "초<br>");
	
	var day = now.getDay(); // 요일 숫자로 표시됨(일요일: 0 ~ 토요일: 6)
	document.write("day: " + day + "<br>");
	
	/* 배열로 요일 사진 가져오기 */
	var yoil = new Array(); // 여기까지만 쓰면 아직 방이 없다.
	yoil[0] = "./../images/sun.gif";
	yoil[1] = "./../images/mon.gif";
	yoil[2] = "./../images/tue.gif";
	yoil[3] = "./../images/wed.gif";
	yoil[4] = "./../images/thu.gif";
	yoil[5] = "./../images/fri.gif";
	yoil[6] = "./../images/sat.gif";
	
	document.write("오늘은 <img src='" + yoil[day] + "'/> 요일 입니다.");
	// 실행하는 요일(day)에 따라 이미지 달라짐
	
</script>


▶Ex05_Array_select_option
●이벤트 속성(document 객체)
onLoad: body 영역 로드하자마자 호출
onChange: select 옵션에 변화가 생겼을 때 change()함수 불러서 호출
onKeyUp: 키보드에서 손 뗐을 때 나타남 / 키를 놓았을 때 발생
onKeyDown: 키를 눌렀을 때 발생
onKeyPress: 키를 눌렀다 놓았을 때 발생
onClick: 마우스로 클릭했을 때 발생
onDblClick: 마우스로 더블 클릭했을 때 발생
onFocus: onFocus: 입력창에 마우스 포커스를 클릭했을 때(브라우저에 포커스를 얻을 때) 발생★
onmouseDown: 마우스를 눌렀을 때 발생
onmouseUp: 마우스를 놓았을 때 발생
onBlur: 브라우저에 포커스를 잃을 때 발생

▶Ex07_Math함수
<title>Ex07_Math함수.html</title>
<script type="text/javascript">
	var maxNum = Math.max(30,70,2,123); // java는 2개만 쓸수있지만, javaScript는 인자 여러개 넣을 수 있음
	document.write("maxNum:" + maxNum + "<br>") // 대소문자 구분함
		// 출력값 → maxNum:123
		
	var minNum = Math.min(30,70,2,123); // java는 2개만 쓸수있지만, javaScript는 인자 여러개 넣을 수 있음
	document.write("minNum:" + minNum + "<br>") // 대소문자 구분함
		// 출력값 → minNum:2
		
	var roundNum = Math.round(3.5); // 소수점 아래 첫번째 자리를 보고 반올림 결정함
	document.write("roundNum:" + roundNum + "<br>")
		// 출력값 → roundNum:4
		
	var ceilNum = Math.ceil(3.1); // 무조건 올림하는 함수
	document.write("ceilNum:" + ceilNum + "<br>");
		// 출력값 → ceilNum:4
	
	var floorNum = Math.floor(3.7); // 무조건 소수점 버리는 함수
	document.write("floorNum:" + floorNum + "<br>");
		// 출력값 → floorNum:3
	
	var parseIntNum = parseInt(3.7); // 소수점 밑에 무조건 버리는 함수 (Math. 붙이지 않음)
	document.write("parseIntNum:" + parseIntNum + "<br>");
		// 출력값 → parseIntNum:3
	
	var randomNum = Math.random(); // 난수 발생시키는 함수 // 0<=x<1, 0보다 크고 1보다 작은 실수 난수의 범위 지정 가능
	//var randomNum2 = parseInt((Math.random()*3)+4); // parseInt = Math.floor
	document.write("randomNum:" + randomNum + "<br>");
		// 출력값 → randomNum:0.208408059666284 (출력할 때 마다 랜덤으로 출력)
	
	/* 4이상~7미만(4,5,6)의  정수 난수 1개 발생시키기 */
	var randomNum2 = Math.floor((Math.random()*3)+4); // 4부터 시작이니까 +4, 맨 뒷 숫자에서 첫번째 숫자 빼고 +1 한것 *뒤에쓰기
	document.write('randomNum2: ' + randomNum2 + "<br>");
		// 출력값 → 4~6 사이 숫자 (출력할 때 마다 랜덤으로 출력)
	
	/* 0~2정수 난수 이미지 불러오기 */
	var image = new Array('./../images/pic1.jpg','./../images/pic2.jpg',
			'./../images/pic3.jpg'); // 발생된 난수가 0,1,2 중 하나일 때 각각 0,1,2번방에 들어옴
	num = parseInt(Math.random()*3);
	document.write("<img src='" + image[num] + "'/>");
</script>


▶Ex08_문자열함수
<title>문자열 관련 함수</title>
<script type="text/javascript">

	var str = "태양처럼 뜨거운, 바람처럼 자유로운 영혼";
	document.write("str: " + str + "<br>"); // str 뒤에 .toString() 생략가능
		// 출력값 → str: 태양처럼 뜨거운, 바람처럼 자유로운 영혼
		
	document.write("str의 문자열의 갯수: " + str.length + "<br>"); // 글자 갯수 구할 때 length() 사용 X
		// 출력값 → 22
	
	/* 0부터 시작해 3번째 위치에 있는 글자 확인하는 함수 */
	ch = str.charAt(3);
	document.write("ch: " + ch + "<br>");
		// 출력값 → ch: 럼
		
	document.write(str.indexOf('처럼') + "<br>"); // (첫번째 해당되는)글자 위치 찾고 싶을 때 사용하는 함수 - 해당 글자 있으면 0보다 큰 숫자나옴
		// 출력값 → 2
		
	document.write(str.indexOf('가나다') + "<br>"); // 값을 못찾으면 '-1'로 출력됨
		// 출력값 → -1
		
	document.write(str.slice(10,13) + "<br>"); // 10번째 ~ 13번째 앞에 것 까지만 출력 (13번째는 안가져옴)
		// 출력값 → 바람처
		
	document.write(str.slice(10) + "<br>"); // 10번째 ~ 끝까지 다 가져옴
		// 출력값 → 바람처럼 자유로운 영혼
		
		document.write(str.slice(10,-4) + "<br>"); // 10번째~ 뒤에서부터 4칸 앞에있는 곳 앞에까지 출력
		// 출력값 → 바람처럼 자유로
		
	document.write("<br>");
	document.write(str.substring(10,13) + "<br>"); // 10번째 ~ 13번째 앞에 것 까지만 출력 (13번째는 안가져옴)
		// 출력값 → 바람처
	
	document.write(str.substring(10) + "<br>"); // 10번째 ~ 끝까지 다 가져옴
	//document.write(str.substring(10,-4) + "<br>"); // substring에는 음수가 들어갈 수 없음
		// 출력값 → 바람처럼 자유로운 영혼
	
	document.write("<br>");
	document.write(str.substr(10,3) + "<br>"); // 10번째 부터 3개 문자 가져와라
		// 출력값 → 바람처
	
	document.write("<br>");
	document.write(str.replace('처','★') + "<br>"); // 처음 나온(만난) '처'를 뒤에 문자(★)로 바꿔라
		// 출력값 → 태양★럼 뜨거운, 바람처럼 자유로운 영혼
	
	document.write("<br>");
	document.write(str + "<br>"); // 출력값 → 태양처럼 뜨거운, 바람처럼 자유로운 영혼
	document.write(str.replace(/처/g,'★') + "<br>"); // 모든 '처' 다 바꾸고 싶을 때 '' 안써줌
		// 출력값 → 태양★럼 뜨거운, 바람★럼 자유로운 영혼
	
	document.write("<br>");
	word = "I Can Do It!";
	document.write(word.toUpperCase() + "<br>"); // 모두 대문자로 변경
	document.write(word.toLowerCase() + "<br>"); // 모두 소문자로 변경
	
	document.write("<br>");
	document.write("<a href='https://www.daum.net'>네이버</a><br>"); // 문자에 하이퍼링크 쓰기
	document.write("다음".link("https://www.daum.net") + "<br>"); // 문자열에 링크 함수 사용
	document.write("<br>");

	info = "하니 70 80 90";
	
	arr = info.split(" ");  // info 방에 들어가 있는 값을 공백을 기준으로 쪼개라
	document.write(arr.length+ "<br>"); // array의 방의 갯수는 몇개냐?
		// 출력값 → 4
	sum=0;
	for(i=1; i<arr.length; i++){
		//sum += arr[i]; // "70" 숫자로 나열됨
		sum += +arr[i]; // 문자열을 숫자로 바꿈 (+, Number, eval 사용 가능)
	
	}
	document.write("sum: " + sum + "<br>"); // 출력값 → sum: 240
	
	document.write(eval("12") + 3 + "<br>"); // 출력값 → 15
	document.write(Number("12") + 3 + "<br>"); // 출력값 → 15
	
	document.write("15+3*2" + 3 + "<br>"); // 연산 안됨
		// 출력값 → 15+3*23
	
	document.write(eval("15+3*2") + 3 + "<br>"); // eval: 연산을 한다
		// 출력값 → 24
	
	document.write(Number("15+3*2") + 3 + "<br>"); // Number: 숫자 이외의 것들(수식)을 넣으면 인식 못하고 에러(NaN)
	document.write(+("15+3*2") + 3 + "<br>"); // +: 수식 인식 못하고 에러남
		// 출력값 → NaN

</script>

▶Ex09_string.html


------------------------------ 03_JavaScript_03_windowObj ------------------------------
●내장객체: JavaScript에 이미 정의되어 있는 객체 (.찍어서 접근하는 것들) - 화면 정보(Screen), 날짜(Date), 배열(Array) 등을 사용할 수 있도록 미리 생성하여 내장시켜 둔 객체 모음
String: 문자열을 다룰 수 있게 함
Array: 배열을 사용할 수 있게 함
Date: 날짜와 시간을 다룰 수 있게 함
Math: 수학적인 함수와 특수 함수를 제공함
Number: 문자로 된 숫자를 숫자로 바꾸어줌
form

window(브라우저 전체 창에 접근): window.open('연결할 url','창이름','팝업창의 속성') - window는 생략가능
	브라우저 창안에 존재하는 모든 요소의 최상위 객체
	브라우저 창이 열릴 때마다 하나씩 만들어지는 객체
history: 현재 창에서 사용자의 방문 기록을 저장하고 있는 객체
location : 현재 사용하는 브라우저에 대한 정보를 가지고 있는 객체
document: 웹 문서마다 하나씩 만들어지는 객체, <body>태그에 의해 만들어지고 HTML 문서에 대한 정보를 가지고 있다. (결과를 출력할 수 있는 흰 부분) // window.document
arguments: 함수가 호출될 때 함수 내의 매개 변수 정보를 읽어온다. Explorer에서 지원이 되지 않음
screen 객체: 내가 사용하고 있는 모니터의 정보를 알 수 있는 객체
navigator 객체 .. 등등


▶Ex01_window_open
→ 웹 브라우저 시작하자마자 무언가 띄우고 싶을 때
팝업창 띄우는 방법① - <body> 사용
<body onLoad="window.open('Ex01_news.html','pop','width=530 height=730')">
	안녕하세요
</body>

→ window.open: 윈도우 창을 열어라 / 웹 브라우저 전체가 window 객체이다.
→ window.open('연결할 url','창이름[아무거나 창이름 사용가능]','팝업창의 속성')을 사용해서 팝업창 띄우기

▶Ex02_window_open
팝업창 띄우는 방법② - javascript 사용

<title>Ex02_window_open.html</title>
<script type="text/javascript">
 /* window.open('연결할 url','창이름','팝업창의 속성') */
	window.open('Ex02_popup1.html','창이름','width=450 height=400'); // width=450 height=400 사이 공백이나 쉽표9(,)로 꼭 띄어주기(연달아 쓰지말기)

function showCenter(url){ // 내가 호출한 showCenter(url) 함수를 통해서 팝업창을 가운데 띄우기
	//alert(1);
	
	var winW = 600; // 띄우려는 팝업창의 크기를 변수 임의 지정해서 써줌
	var winH = 400;
	
	//팝업창을 중앙으로 띄우기
	document.write(screen.width + "," + screen.height+"<br>"); //screen 객체: 내가 사용하고 있는 모니터의 정보를 알 수 있는 객체 // 1920,1080	

	var winLeft = (screen.width -  winW)/2; // (자기가 쓰고있는 스크린 가로 길이 - 모니터 넓이/길이)에서 나누기 2
	var winTop = (screen.height - winH)/2; // (자기가 쓰고있는 스크린 세로 높이 - 모니터 높이)에서 나누기 2
	
	var options = "width=" +winW +",height="+winH +",left="+winLeft+",top="+winTop; // 위치에서 얼마나 떨어진 자리인지를 options 변수에넣음
	
	window.open(url,'mywindow',options); // 넘어온게 url에 들어있음, '창이름', options 변수에 있는 내용으로 옵션설정
	// 위에 창에 
	
} // showCenter(url)
	
function openWindow(){
	//alert(2);	
	mywin  = window.open('Ex02_popup2.html','my','width=300 height=200'); // Ex02_popup2.html을 팝업으로 띄우는 창을 mywin 변수로 만듬
	/* 별도의 창으로 열고 싶을 때는 창의 이름을 다른거로 써주고,
	같은 창에 이어서 다른 팝업 내용 띄우고 싶을 때(덮어쓰기)는 창 이름을 똑같은거로 써준다.  → 'my'를 'mywindow'로 똑같이 썼을 경우 */
}

function closeWindow(){
	//alert(2);	
	mywin.close();	//mywin으로 관리하는 팝업창을 닫는다 → 창열기 버튼누르고 뜬 팝업을 창닫기 버튼으로 닫을 수 있다.	
}
</script>

</head>
<body>
	<input type="button" value="이벤트" onClick="window.open('Ex02_popup2.html','popup','')" >
	<!-- window.open: java에서 만든 함수 --> 
	<!-- 너비높이 안쓴다고 오류는 아니지만 그래도 쓰는걸 권장 -->
	
	<input type="button" value="화면 중앙에 띄우기" onclick="showCenter('Ex02_popup3.html')"> <!-- 함수 호출 -->
	
	<input type="button" value="창열기" onclick="openWindow()"> <!--onclick: 버튼을 출력했을 때 호출하는 함수 -->
	<input type="button" value="창닫기" onclick="closeWindow()">
	
</body>


▶Ex03_parent_child(부모).html
<title>Ex03_parent_child(부모).html</title>
<style type="text/css">
	body{
		text-align: center;
	}
</style>

<script type="text/javascript">
	function openWin(fileName){
		
		var wName = "popup"; //창 이름 설정
		var winW = 600;
		var winH = 450; //팝업창 높이
		
		//팝업창 화면 정 중앙에 띄우기 (가로에서 얼마 떨어진자리, 세로에서 얼마 떨어진 자리에 배치할지 정하기)★
		var winLeft = (screen.width - winW)/2; // winLeft: 왼쪽에서 얼만큼 떨어진 자리인지 지정
		var winTop = (screen.height - winH)/2; // winTop: 위에서 얼만큼 떨어진 자리인지 지정
		
		var options = "width=" +winW +
						",height="+winH +
						",left="+winLeft +
						",top="+winTop; //가로,세로,왼쪽,위쪽 옵션설정
		
		window.open(fileName,wName,options);
			//fileName 내용으로 채울꺼다, 창이름: popup, 속성: options 변수 있는 곳으로
	}
</script>
</head>
<body>
	<form name="myform">
		<input type="text" name="id"> <br><!-- id:kim -->
		<input type="text" name="password"> <br><!-- password:1234 -->
	
		<input type="button" value="팝업창열기" onclick="openWin('Ex03_popup(자식).html')">
	</form>
</body>


▶Ex03_popup(자식).html
<title>Ex03_popup(자식).html</title>
<style type="text/css">
	body{
		text-align: center;
	}
	input{ /* input 태그 선택자 설정 */
		border: 1px solid brown;
		background: yellow;
		color: brown;
	}
	img{
		width: 300px;
		height: 200px;
	}
</style>

<script type="text/javascript">
	function receiver(){
		//alert(1);
		
		/* 부모창(Ex03_parent_child.html)에서 id 입력한 값을 자식창(현재창:Ex03_popup.html)에서 팝업으로 뜨게하기 */
		window.document.myform.child_id.value = window.opener.document.myform.id.value;
		// myform child_id에 값(value)으로 넣어라 → window.opener: 부모창(정의되있음)
		// window.opener가 있으면 부모쪽, 없으면 자식쪽(현재창)
		// window: 전체가 윈도우창 / document: 흰색 출력되는 창
		// myform: input으로 선택창에 입력한 값들이 들어감. 부모와 자식의 form 이름이 같아도되고 달라도됨
		// 부모창 myform에 있는 id에 입력한 값을 자식창 child_id에  값(value)으로 넣어봐라
		
		/* 부모창(Ex03_parent_child.html)에서 password 입력한 값을 (현재창:Ex03_popup.html)에서 팝업으로 뜨게하기 */
		window.document.myform.child_password.value = window.opener.document.myform.password.value;
		
	} // receiver()
	
	function meClose(){
		/* 닫기버튼 누르면, 자식창에 입력한 것을 부모창에 입력하도록 하기(↑위랑 반대로 하면됨) */
		opener.myform.id.value = document.myform.child_id.value; // window, document객체 생략가능
		opener.myform.password.value = document.myform.child_password.value;
		
		//window.close(); //현재 윈도우창 닫기 버튼 눌러 닫기
		self.close(); //현재 창(팝업창) 닫기 버튼으로 닫기
		//close(); //close()로만 써도 잘 실행됨
	}
</script>
</head>
<body onLoad="receiver()"> <!-- 자식 팝업창이 뜨자마자(로드) 하고싶은 작업 -->
	<img src='./../images/pop1.jpg'/>
	<br>
	
	<form name="myform">
		<input type="text" name="child_id"> <br>
		<input type="text" name="child_password"> <br> <!-- type="password": 비밀번호 가리기 효과 -->
		
		<input type="button" value="닫기" onclick="meClose()">
	</form>
</body>


▶Ex04_start_이도흔.html
<title>Ex04_start_이도흔.html</title>
<script type="text/javascript">
	function openWin(fileName) { //onclick 에서 openWin() 호출한 것 불러옴 : 'Ex04_end_이도흔.html' 내용 팝업창에 띄울것
		/* 팝업창 크기, 이름 지정 */
		var wName="popupCal";
		var winW = 500;
		var winH = 300;
		/* 팝업창 화면 정 중앙에 띄우기 */
		var winLeft = (screen.width - winW)/2;
		var winTop = (screen.height - winH)/2;
		
		var options = "width="+winW+",height="+winH; //",left=" + winLeft + ",top=" + winTop; (생략해도됨)
		window.open(fileName,'pop',options);
	}
</script>
</head>
<body>
	<h3>열기 버튼을 클릭하세요</h3>
	<form name="parentForm">
		결과 : <input type="text" name="result"> <br><br>
		<input type="button" value="열기" onClick="openWin('Ex04_end_이도흔.html')"> <!-- openWin() 함수 호출 하고 html 파일 넘김 -->
	</form>
</body>


▶Ex04_end_이도흔.html
<title>Ex04_end_이도흔.html</title>
<style type="text/css">
	body{
	text-align: center;
	}
</style>

<script type="text/javascript">		
	function meClose(){
		// 자식창에 입력한 것을 부모창에 입력되도록 하기
		var su1 = Number(document.myform.su1.value); // su1에 입력한 값 숫자로 바꿔줌 "14" → 14
		var su2 = eval(document.myform.su2.value); // su2에 입력한 값
		//alert(su1 + su2);

		operator = document.myform.operator.value; // 곱하기 선택할 경우 value에 써놓은 문자 "3" 넘어옴 → 3 (문자열을 숫자로 바꿔도됨)
		//alert(operator);
		
		switch(operator){
		case "1" : result = su1 + su2 ; break;
		case "2" : result = su1 - su2 ;break;
		case "3" : result = su1 * su2 ;break;
		case "4" : result = su1 / su2 ;break;
		}
		
		opener.parentForm.result.value=result; // 부모창 form(parentForm)의 name이 result인 곳의 값(value)으로 넣어라
		window.close();
		
	} // meClose()
	
</script>
</head>
<body onLoad="init()">
	<form name="myform">
		<input type="text" name="su1" value="14" size="5"> <!-- 첫번째 숫자입력, value(기본값)도 넣어줌-->
		<select name="operator"> <!-- 고정된 옵션 -->
			<option value="1">더하기</option>
			<option value="2">빼기</option>
			<option value="3">곱하기</option>
			<option value="4">나누기</option>			
		</select>
		
		<input type="text" name="su2" value="5" size="5"> <!-- 두번째 숫자입력 -->
		<br><br>
		
		<input type="button" value="닫기" onClick="meClose()">
	</form>
</body>


▶Ex05_setInterval
<title>Ex05_setInterval</title>
<script type="text/javascript">
	/* body영역이 로드가 됬을 때 호출되는 것을 script 사용해서 함수 만드는 방법 */
	window.onload = function(){
		//alert(1);
		
		
		//window.setInterval(해야할일,시간);
	
		/* 시간 간격(정한 시간)마다 자동으로 img가 바뀌는 설정 방법② */
		var arrimage = ['pic1.jpg','pic2.jpg','pic3.jpg','pic4.jpg'];
		var cnt = 0;
		
		 var image = window.setInterval(function() { // 1초마다 img가 바뀌는 기능을 변수에 담기
			var area = document.getElementById("myimg"); // myimg 영역에 이미지를 출력할 예정
			if(cnt == 4)
				cnt = 0; // 4까지 갔다가 다시 1로 되돌아오게 초기화 설정
			var result = "<img src='./../images/" + arrimage[cnt++] + "'/>"; // 다음번에 abc를 호출하면 cnt가 ++(증가)되서 다른사진으로 불러옴
			area.innerHTML = result;
			
		}, 1000);

		
		/* 시간 간격(정한 시간)마다 자동으로 img가 바뀌는 설정 방법① */
		/* window.setInterval(abc, 1000); // 1초: 1000 마다 img 계속 반복됨 / 함수 호출할때는 abc()로 써서 호출하면 안된다.
		
		function abc() { //함수 정의
			var area = document.getElementById("myimg"); // myimg 영역에 이미지 출력 예정
			if(cnt == 4)
				cnt = 0; // 4까지 갔다가 다시 1로 되돌아오게 설정
			var result = "<img src='./../images/" + arrimage[cnt++] + "'/>"; // 다음번에 abc를 입력하면 cnt가 ++되서 다른사진으로 불러옴
			area.innerHTML = result; // result 변수에 써놓은 것 myimg 자리에 출력해라
		} // abc() */

		
		//setTimeout(해야할일, 시간); - 이미지 그만 멈추게 하는 방법
		setTimeout(function() { // 딱 한번만 실행됨
			clearInterval(image); // 이미지에 저장되어있는 기능 그만하기
			var area = document.getElementById("myimg");
			area.innerHTML = "중지합니다.";	
		}, 5000); // 10000: 10초, 5000: 5초
		
	} // onload()
</script>
</head>
<body> <!-- <body onload="alert(1)"> 이렇게 써도됨 -->
	
	<div id="myimg"></div>

</body>


▶Ex06_setInterval
setTimeout 함수 : 일정한 시간 후에 작업을 한번 실행
	보통 재귀적 호출을 사용하여 작업을 반복
	기본적으로 setInterval 과는 달리 지정된 시간을 기다린후 작업을 수행하고, 다시 일정한 시간을 기다린후 작업을 수행하는 방식
	지정된 시간 사이에 작업 시간이 추가 되는 것
	clearTimeout() 을 사용해서 작업을 중지할 수 있다.
- clearInterval(), clearTimeout()이 실행중인 작업을 중지시키는 것은 아니다. 지정된 작업은 모두 실행되고 다음 작업 스케줄이 중지 되는 것이다.


<title>Ex06_Ex06_setTimeout.html</title>
<!-- 1초마다 새로운 날짜와 시간을 출력하고 10초가 지나면 중지 -->
<style type="text/css">
	body{
		text-align: center;
	}
</style>

<script type="text/javascript">
	window.onload = function(){ // <body>영역 로드 되자마자 하고싶은 일
		//alert(1);
		
		var time = setInterval(function () { // 1초에 한번씩 출력되는 기능을  time 변수에 담음
			var now = new Date(); // 날짜 가져오는 객체 생성
			//document.write(now); //→ 출력값: Mon Jan 18 2021 23:37:54 GMT+0900 (대한민국 표준시)
			
			hours = now.getHours();
			//alert(hours);
			if(hours>=12){ // 12시가 넘었을 경우: 오후
				str = "오후" + (hours-12) + "시";
			}
			else{ // 12시가 넘지 않았을 경우: 오전
				str = "오전" + hours + "시";
			}
			
			minutes = now.getMinutes();
			//alert(minutes);
			if(minutes < 10){
				str += ":0" + minutes+"분"
			}
			else{
				str += ":" + minutes+"분"
			}
			
			seconds = now.getSeconds();
			//alert(minutes);
			if(seconds < 10){
				str += ":0" + seconds+"초"
			}
			else{
				str += ":" + seconds+"초"
			}
			
			var area = document.getElementById("myarea");
			area.innerHTML = str // area 자리에 HTML코드로 str 변수에 누적했던 것들 모아서 출력
			
		},1000); // 1초에 한번씩 출력
		
		
		setTimeout(function(){
			clearInterval(time); // time 변수로 설정한 것 그만하기
			var area = document.getElementById("myarea");
			area.innerHTML = "중지합니다.";
		},10000); // 10초 후에 딱 한번 실행됨
		
	} // onload()
			
			/* var hour = now.getHours();
			var ampm;
			if(hour >= 12){
				ampm="오후";
				hour %= 12;
			}else{
				ampm = "오전";
			}
			
			document.write(ampm + " " + hour + "시" +
					now.getMinutes() + "분" +
					now.getSeconds() + "초 입니다.<br>") */
			
			/* document.write("now4: " + now.toTimeString() + "<br>"); */
			/* document.write(now.getHours() + "시");
			document.write(now.getMinutes() + "분");
			document.write(now.getSeconds() + "초 입니다.<br>"); */

</script>
</head>
<body>
	*setInterval 메소드*
	<hr>
	
	<h3>현재 시간이 나타납니다.</h3>
	<br>
	<div id="myarea">    </div>
</body>


------------------------------ 03_JavaScript_03_windowObj ------------------------------
▶Ex03_parent_child(부모), Ex03_popup(자식)
●자식창
<script type="text/javascript">
	function receiver(){
		//alert(1);
		
		/* 부모창(Ex03_parent_child.html)에서 id 입력한 값을 자식창(현재창:Ex03_popup.html)에서 팝업으로 뜨게하기 */
		window.document.myform.child_id.value = window.opener.document.myform.id.value;
		// myform child_id에 값(value)으로 넣어라 → window.opener: 부모창(정의되있음)
		// window.opener가 있으면 부모쪽, 없으면 자식쪽(현재창)
		// window: 전체가 윈도우창 / document: 흰색 출력되는 창
		// myform: input으로 선택창에 입력한 값들이 들어감. 부모와 자식의 form 이름이 같아도되고 달라도됨
		// 부모창 myform에 있는 id에 입력한 값을 자식창 child_id에  값(value)으로 넣어봐라
		
		/* 부모창(Ex03_parent_child.html)에서 password 입력한 값을 (현재창:Ex03_popup.html)에서 팝업으로 뜨게하기 */
		window.document.myform.child_password.value = window.opener.document.myform.password.value;
		
	} // receiver()
	
	function meClose(){
		/* 닫기버튼 누르면, 자식창에 입력한 것을 부모창에 입력하도록 하기(↑위랑 반대로 하면됨) */
		opener.myform.id.value = document.myform.child_id.value; // window, document객체 생략가능
		opener.myform.password.value = document.myform.child_password.value;
		
		//window.close(); //현재 윈도우창 닫기 버튼 눌러 닫기
		self.close(); //현재 창(팝업창) 닫기 버튼으로 닫기
		//close(); //close()로만 써도 잘 실행됨
	}
</script>

→ 창닫기
window.close(); //현재 윈도우창 닫기 버튼 눌러 닫기
self.close(); //현재 창(팝업창) 닫기 버튼으로 닫기
close(); //close()로만 써도 잘 실행됨


------------------------------ 03_JavaScript_04_historyObj ------------------------------
●history 객체: 내가 지나왔던 페이지들을 기억하고 다시 되돌아갈 수 있음
→ 브라우저를 이용하여 본 URL 사이트를 임시로 저장하고 있음
→ 뒤로(Back), 앞으로(Forward) 버튼을 이용하여 볼 수 있음

메소드: 
back(): 이전 화면으로 갈때는 history.back
go(숫자): 상대적인 숫자를 설정하여 화면 이동 할 때는 history.go(-1) , 이전이전으로 갈때는 go(-2), 이전이전이전으로 갈때는 go(-3)
forward(): 다음으로 갈때는 history.forward 또는 history.go(+1), 다음다음으로 갈때는 go(+2), 다음다음다음으로 갈때는 go(+3) 등

<body>
	<h2>세번째 페이지입니다.</h2>
	<a href="first.html"><img src="./../images/01_s.gif"></a>
	<a href="second.html"><img src="./../images/02_s.gif"></a>
	<img src="./../images/03.gif">
	<a href="fourth.html"><img src="./../images/04_s.gif"></a>
	
	<hr>
	
	<form>
		<a href="#" onClick="javascript:history.go(-2)">
			<input type="button" value="두 페이지 이전으로">
		</a>
		
		<a href="#" onClick="javascript:history.back()"> <!-- .go(-1)도 사용가능 -->
			<input type="button" value="이전페이지로">
		</a>
		
		<a href="#" onClick="javascript:history.forward()">
			<input type="button" value="다음페이지로">
		</a>		
	</form>
</body>


------------------------------ 03_JavaScript_05_locationObj ------------------------------
●location 객체: 브라우저의 주소 표시줄 쪽에 접근하는 객체
→ location.reload(): 새로 고침(F5), 현재 문서를 다시 읽어 온다.
	출력창에서 주소창 뒤에 마우스 한번 클릭하고 엔터 치면 새로고침
	onClick="location.reload()">
→ location.href: 다른 주소 링크 불러옴(문서의 URL 주소로 이동)
	버튼 누르면 주소 바꿔줌: <input type="button" value="다음" onClick="location.href='http://www.daum.net'">

<title>Ex01_location.html</title>
<script type="text/javascript">
	var now = new Date();
	document.write("now: " + now + "<br>");
	
	function goNaver(){
		location.href="http://www.naver.com";
	}
	/* &nbsp; : 띄어쓰기 */
	document.write("<a href='http://www.melon.com'>멜론<a>&nbsp;&nbsp;"); // 멜론 글자 클릭해서 주소이동
	document.write("줌".link("http://www.zoom.us"));
</script>
	

</head>
<body>
	<form>
		<input type="button" value="지금 시간은?" onClick="location.reload()"> <!-- reload: 새로고침 -->
		<!-- 출력창에서 주소창 뒤에 마우스 한번 클릭하고 엔터 치면 새로고침 -->
		<br><br>
		
		<input type="button" value="다음" onClick="location.href='http://www.daum.net'"> <!-- 버튼누르면 주소 바꿔줌 -->
		<br><br>
		
		<input type="button" value="네이버" onClick="goNaver()"> <!-- 함수 호출해서 주소 이동 -->
	</form>
</body>


------------------------------ 03_JavaScript_06_form ------------------------------
▶Ex01_form
<title>Ex01_form.html</title>

</head>
<body>
	<form name="first_form">
		<span>아이디</span>
		<input type="text" name="id" value="kim">
		<br><br>
		<span>비밀번호</span>
		<input type="password" name="pw" value="1234">
	</form>
	
	<hr>
	
	<form name="second_form">
		<input type="submit" value="로그인">
		<input type="button" value="회원가입">
	</form>
	
	<hr>
	
	<script type="text/javascript">
	/* 아직 아무것도 정의된것이 없기 때문에 맨 위(title 아래쪽)에 쓰지않고 body 닫기 직전에 써줌 - body 안에 script 사용가능 */
		document.write(document.first_form.name+"<br>"); // <form>의 이름을 직접 지정해서 접근 : document 영역에 first_form인 곳에 name이 뭐냐?
		document.write("폼의 갯수:"+document.forms.length +"<br>"); // form들을 다룰 수 있는 forms라는 이름의 내장 객체가 있음. - form의 갯수가 몇개인지? 
		document.write(document.forms[1].name +"<br><br>"); // forms라는 객체로 <form> 다룰 수 있다.[]배열의 위치로 몇번방인지 접근 - forms 1번방의 이름이 뭐냐?
		
		
		// 0번째 form의 요소가 몇개있는지? : <form> 안에 input 태그 갯수만 가져옴
		document.write("0번째 폼의 요소의 갯수:"+ document.forms[0].elements.length+"<br>");
		// form의 요소가 elements 배열(정해져있는 객체 배열)로 관리됨
		document.write(document.forms[0].elements[0].type+"<br>"); // 0번째 요소의 타입이 뭔지? → text
		document.write(document.forms[0].elements[1].type+"<br>"); // 1번째 요소의 타입이 뭔지? → password
		// <form>의 이름(name)을 직접 입력해서 출력
		document.write(document.forms[0].id.type+"<br>"); // → text
		document.write(document.forms[0].pw.type+"<br>"); // → password
		// <form>의 id의 value를 직접 입력해서 출력		
		document.write(document.forms[0].id.value+"<br>"); // →  kim
	</script>

</body>


▶Ex02_유효성검사
→ JavaScript는 action으로 넘어오기 전에 유효성 검사로 많이 쓰임

<title>Ex02_유효성검사</title>
<script type="text/javascript">
	function check(){ // check() 함수는 
		//alert(1); // alert 띄우고 abc.jsp로 넘어감
		
		//누락됐는지 유효성 검사하는 방법① 
		//둘다 값이 누락되면 제일 처음 값만 누락된 alert이 뜸, 둘다 누락됐다고 alert 두번 뜨는 것 아님
		if(window.document.myform.id.value == ""){ // document.myform에 아이디에 입력된 값이 있는지 없는지 확인 → 비교할 때는 null 입력x
			alert("id 누락");
			return false; //action(jsp)으로 넘어가지 못하도록 설정. 호출한 onClick="return check()"로 false가 return이 됨
		}
		
		if(myform.pw.value == ""){ // window.document. 생략가능
			alert("pw 누락");
			return false;
		}
		//비번의 길이가 4글자~6글자만 입력되도록 설정
		if(myform.pw.value.length<4 || myform.pw.value.length>6){ // 입력한 값의 길이
			alert("비번의 길이가 4글자~6글자로 입력하세요");
			return false;
		}
		//비번은 숫자만 입력 하도록 설정
		/* NaN: Not a Number(숫자가 아니다), isNaN("a2"): true(숫자가아닐때 참), isNaN("123"): false(숫자일때 거짓) */
		if(isNaN(myform.pw.value)){ // 입력한 값이 숫자가 아니면 true 이기 때문에 alert창 나타나고 jsp로 안넘어감
			alert("비번은 숫자만 입력하세요");
			return false;
		}
			
	} // function check()
</script>
</head>
<body>
	<h3>아이디와 비번을 입력하세요</h3>
	<form name="myform" action="abc.jsp">
		<span>아이디</span>
		<input type="text" name="id" value="kim">
		<br><br>
		<span>비밀번호</span>
		<input type="password" name="pw" value="1234">
		<br><br>
		<!--Ex02.html에서 값(id,pw) 입력하고 등록버튼(submit 타입) 누르면 action에 써놓은 곳으로 넘어가서(abc.jsp) DB table에 insert 작업함
		*유효성 검사: 입력된 내용을 서버로 전송하기 전에 입력한 자료가 적합한지 미리 확인 후  부적합이면 jsp로 아예 넘어가지 못하게 처리. 소스 코드 노출되는 단점 있음.
		→ return값에 false가 들어오면 action에 써놓은 곳으로 넘어가지 못함
		→ submit과 action은 하나의 쌍임 -->
		<input type="submit" value="등록" onClick="return check()"> <!-- 함수 호출하는 곳 앞에 return 꼭 써줘야 action 값으로 안넘어감 -->
		<input type="reset" value="취소"> <!-- 초기 상태로 돌아감(input의 value 값 유무에 따라 초기값 달라짐) -->
	</form>
</body>


▶Ex03_유효성검사
→ onFocus(이벤트 속성): 입력창에 마우스 포커스를 클릭했을 때(브라우저에 포커스를 얻을 때) 커서가 깜빡이는 포커스 발생
→ submit과 action은 하나의 쌍임

<title>Insert title here</title>
<script type="text/javascript">

	/* onFocus 했을 때 값 지워지게 해주기 */
	function clearText(myid){ // myid: myform.id(id input 박스)
		//alert(1);
		
		//document.write(myid.defaultValue); // value 기본값(아이디를 입력하세요)을 출력해보기-id value에 마우스 클릭하면 새로운 창에서 출력됨)
		//document.write(myid.value); // value에 입력되어있는 값 → 아이디를 입력하세요 
		
		if(myid.defaultValue == myid.value){ // value 기본값과 value에 내가 입력되어있는 값이 같다면,
			myid.value = ""; // onFocus 했을 때 value 값을 없애준다.
		}
		
	} // clearText(myid)
	
	<!-- **radio/checkbox 타입 유효성 검사** -->
	function check(){
		/* movie 유효성 검사 처리 - 하나라도 check되어있지않으면 jsp로 안넘어가도록 설정 */
		str = "선택한 영화는: \n"; // str 변수 만들어서 내가 체크한 값들 모두 alert 창에 뜨게 하기
		len = document.myform.movie.length;
		//alert(len); // movie라는 이름을 가지고 있는 요소 갯수는 3개
		
		flag = false; // flag 초기상태
		//movie의 0번,1번,2번방 중 하라나도 선택이 됐는지 확인하기
		for(i=0;i<len;i++){ //len보다 작을 때 까지만 for문 돌려라
			if(document.myform.movie[i].checked){ // movie [i]번방에 있는 check 상태가 어떤지 확인
					// → 0,2번방:false, 1번방:true(checked 되어있음) / == ture는 생략가능
				flag = true; // 어떤 방이든 check가 되어있는 방과 만나면 true가 됨
				str += document.myform.movie[i].value; // str = str + document ~ : 기존 str에 str+document ~ value 값 연결해서 넣어라
				// movie [i]번째에 체크된 값을 가져와서 누적시켜라
				break; // radio는 하나만 선택이기 때문에 n번째에서 찾았으면 나머지 항목 안보고 빠져나가는것 설정해줌 (필수사항은 아님)
			}
		}
		
		if(flag == false) { // for문 다 돌았는데 아직도 flag가 false(check된 것 못찾았을 때)일 경우 alert 띄움
			alert("movie 하나는 꼭 선택해야 합니다.");
			return false; // action으로 넘어가지 못하도록 해주기 → onClick=check()"에  return 써주기
		}
		
		//song 유효성 검사 처리 - 하나라도 check되어있지않으면 jsp로 안넘어가도록 설정
		
		str += "\n선택한 노래는: \n";
		song_len = document.myform.song.length;
		//alert(song_len);
		
		flag = false;
		for(i=0; i<song_len; i++) {
			if(document.myform.song[i].checked){ // document myform의 song[i]번방이 checked 되어있는지 확인
				flag = true;
				str += document.myform.song[i].value; // song[i]번째 선택된 값을  가져와서 누적해라 
				break;
			}
		}
		
		if(flag == false){ // for문을 다 돌았는데 아직 false면 check된것 하나도 못만났다는 뜻
			alert("song 하나는 꼭 선택해야 합니다.");
			return false;
		}
		
		//fruit 유효성 검사 처리 - 하나라도 check되어있지않으면 jsp로 안넘어가도록 설정
		str += "\n선택한 과일은: \n";
		fruit_len = document.myform.fruit.length; // name이 fruit인 것의 갯수 구하기
		//alert(fruit_len);
		
		flag = false;
		for(i=0; i<fruit_len; i++){
			if(document.myform.fruit[i].checked){ // fruit [i]번방에 있는 check 상태가 어떤지 확인
				flag = true;
				str += document.myform.fruit[i].value + " "; // 여러개 선택될 경우 " "로 띄어쓰기 표시해줌
				//break; // checkbox에서는 break쓰면안되는 이유: 여러개 선택이기 때문에 break 사용하면 하나만 확인하고 빠져나가서 나머지 값 출력못함
			}
		}
		
		if(flag == false){ // for문을 다 돌았는데 아직 false면 check된것 하나도 못만났다는 뜻
			alert("fruit 최소 한개는 꼭 선택해야 합니다.");
			return false;
		}
		
		alert(str); // 그동안 누적한것 출력
		
	} //check ()
	
</script>
</head>
<body>
	<form name="myform" action="abc.jsp">
		<span>아이디</span>
		<input type="text" name="id" value="아이디를 입력하세요" onFocus="clearText(myform.id)"> <!-- myform.id: myform의 id인 곳의 정보를 넘기겠다 -->
		<br><br>
		
		1. 가장 좋아하는 영화 한개만 선택하세요 <br>
		<!-- <input type="radio" name="movie" value="나홀로집에" checked>나홀로집에 - 해리포터가 기본으로 체크되서 출력됨 -->
		<input type="radio" name="movie" value="해리포터">해리포터
		<input type="radio" name="movie" value="나홀로집에">나홀로집에
		<input type="radio" name="movie" value="반도">반도
		<!-- movie가 3개 있어서 배열로 만들어짐 -->
		
		<hr>
		
		2. 가장 좋아하는 노래 한개만 선택하세요<br>
		<input type="radio" name="song" value="세월이 가면">세월이 가면
		<input type="radio" name="song" value="광화문연가">광화문연가
		<input type="radio" name="song" value="희망사항">희망사항
		<input type="radio" name="song" value="붉은 노을">붉은 노을
		
		<br><br>
		
		3. 좋아하는 과일 여러개 선택하세요<br>
		<input type="checkbox" name="fruit" value="수박">수박
		<input type="checkbox" name="fruit" value="딸기">딸기
		<input type="checkbox" name="fruit" value="사과">사과
		<input type="checkbox" name="fruit" value="포도">포도
		
		<br><br>
		
		<input type="submit" value="등록" onClick="return check()">
		<input type="reset" value="취소">
	</form>
</body>


▶Ex04_selectedIndex_multiple
<title>Insert title here</title>
<script type="text/javascript">
	function check(){
		sindex = document.myform.nation.selectedIndex; //선택된 값의 해당위치를(순서값=index) 불러옴
		//alert(index); // "선택"이 선택되어있으면 sindex에 0값이 들어옴
		
		if(sindex == 0) { // 따로 선택하지 않음
			alert("나라 하나 선택하세요");
			return false; // action으로 넘어가지 못하게함
		}
		else{
			//str = "선택한 나라는 '" + myform.nation.value + "' 입니다.";
			//str = "선택한 나라는 " + myform.nation[sindex].value; // nation sindex번째 옵션의 값을 가져와라 
			str = "선택한 나라는 " + myform.nation.options[sindex].value; // 내장객체(Array_select_option) 할때 사용해봄
		}

		str += "\n선택한 산은 ";
		mlength = document.myform.mountain.length; // mountain 갯수는 mlength에 들어가있는 option의 갯수 (5개)
		//mlength = document.myform.mountain.selectedIndex;
		//alert(index);
		
		flag = false;
		for(i=0; i<mlength; i++){
			if(document.myform.mountain[i].selected){ // mountain[i]번방이 selected 됐는지 확인
				flag = true;
				str += document.myform.mountain[i].value+" ";
			}
		}
		if(flag == false) {
			alert("산 최소 한개 이상 선택하세요");
			return false;
		}
		alert(str);	
	}
</script>
</head>
<body>
	<form name="myform" action="abc.jsp">
	여행하고 싶은 나라를 선택하세요.<br>
	
	<select name="nation">
		<option value="선택">선택</option> <!-- option 닫는 괄호 생략해도됨 -->
		<option value="캐나다">캐나다</option>
		<option value="뉴질랜드">뉴질랜드</option>
		<option value="미국">미국</option>
		<option value="스위스">스위스</option>
		<option value="영국">영국</option>
	</select>
	
	<hr>
	
	좋아하는 산 선택하세요.
	<!-- multiple(다중선택): ctrl 버튼 누르고 다중 선택해야함 -->
	<select name="mountain" multiple="multiple" size="3"> <!-- size="3" : 한번에 3개 목록이 보이도록 설정 -->
		<option value="지리산">지리산</option>
		<option value="한라산">한라산</option>
		<option value="내장산">내장산</option>
		<option value="관악산">관악산</option>
		<option value="북한산">북한산</option>
	</select>
	<input type="submit" value="확인" onClick="return check()">
	</form>
</body>


------------------------------ 03_JavaScript07_RegularExpression(정규표현식) ------------------------------
●Regular Expression: 특정한 형태의 패턴 문자열을 찾아 내기 위한 수식
→ 정규표현식으로는 좀더 정밀한 유효성 검사 가능함 (주민번호,이메일,전화번호,휴대폰번호 등등)
	ex) 휴대폰번호: 숫자3개, 하이픈, 숫자3~4개, 하이픈, 숫자 4개
→ 슬래시(/)로 시작하고, 슬래시(/)로 끝나야 한다.
	ex) 우편번호: /^\d{3}-?\d{3}$/
		①^: 문자열의 시작(맨 앞)을 의미
		②\d{3}: 우편 번호 앞자리 3개
		③-?: 하이폰(-)은 없거나 있으면 1개
		④\d{3}: 우편 번호 뒷자리 3개(정수 3자리)
		⑤$: 문자열의 맨 끝을 의미
	 앞에 ^표시 없이 \d{3}로만 있으면 숫자3자리만 어느 위치에 있으면 됨. 숫자 3자리로 시작안해도됨
		
●관련 메소드
search(): 문자열에서 특정 패턴(정규 표현식)에 일치하는지 알아내는 함수
	일치하지 않으면 –1을 리턴해준다.
●자주 사용되는 서브 패턴
기호  최소  최대  설명
? 	0 	1 	이전 요소(? 앞에있는 요소가)가 없거나 하나 있을 때 사용
+ 	1 	∞ 	이전 요소(+ 앞에있는 요소가)가 최소 하나 이상~무한대 사이 반복될 때 사용
* 	0 	∞ 	이전 요소(* 앞에있는 요소가)가 없거나 한번 이상 반복될 때 사용

●표현식
^: 문자열의 시작을 의미
$: 문자열의 끝을 의미

\d: 0~9 사이의 정수(short for [0-9])
\D: 정수가 아닌 문자(short for [^0-9])
\w: 알파벳 문자, 숫자, 밑줄 기호(_)
\W: \w의 반대 개념

<title>Ex01_RegularExpression.html</title> 
<script type="text/javascript">

	function check() {
		//alert(1)
		
/* 우편번호 확인하는 정규 표현식 */
		var msg = document.forms[0].zipcode.value; // forms[0]: 0번째 form / 내가 입력한 값은 msg 변수에 들어가있음
		//alert(msg);
		
		//var regex = /^\d{3}-?\d{3}$/; // 정수3개로 시작하고, -(하이픈)은 없어나 하나만 있고, 정수3개로 끝나야함 
		
		/* 		
		올바른 형식
		 123456
		 123-456
		
		잘못된 형식
		 123-456a
		 x123-456a
		 a123-456
		 */
		
/* 전화번호 확인하는 형식 */
		
		//var regex = /^0\d{2}-\d{3,4}-\d{4}$/; // 0으로 꼭 시작하고 정수2개, 정수 3자리~4자리 사이 올수 있음, 정수 4자리로 끝냄
		
		/* 
		 올바른 형식
		 011-123-4567
		 010-3456-9876
		 
		 잘못된 형식
		 712-3331-4443
		  */
		
/* 생년월일 확인하는 형식 */
		//var regex = /^(\d{4})[. /-]([01]?\d)[. /-]([0,3]?\d)$/; // 정수4개로 시작(괄호로 묶을 수 있음),
		//alert(regex);
		// [. /-]: 대괄호 묶은 것 중에 아무거나 하나만 오면됨
 		// (\d{4}): 년도 처리 
 		// ([01]?\d): 월 표시 - ? 썼기 때문에 첫번째 자리(십의자리) 숫자에 0이나 1이 사용되는데 써도되고 안써도된다. 일의 자리에는 한자리 숫자 옴
		// ([0,3]?)\d$ 또는 ([0123]?)\d$ : 일 표시 - 첫번째 자리 숫자에 0~3까지 올 수 있고, 일의 자리(두번째 자리)에는 한자리 숫자 옴
		
		/*
		올바른 형식
		 1981.2.7
		 1981.02.7
		 1981.12.17
		 1981 12 27
		 1981/12/27
		 1981-12-07
		  
		잘못된 형식
		 1981@12.17
		*/
		
/* 이메일 확인하는 형식 */
		var regex =  /^[a-zA-Z0-9]{4,8}@[a-zA-Z0-9]+.[a-zA-Z0-9]+$/;
		/* [a-zA-Z0-9]: 소문자,대문자,0-9 숫자 사이가 와야한다 
		{4,8}: 4글자에서 8글자 사이만 입력가능
		+ : 1개에서 무한대까지 입력 가능, 1개는 무조건 입력해야함
		[]밖에있는 .은 모든 문자(전체 기호)뜻함
		[]안에있는 .은 기호(.dott)
		
		올바른 형식
		oreobox@daum.net */
		
		if(msg.search(regex) == -1){
			alert("잘못된 형식");
		}
		else{
			alert("올바른 형식");
		}

	} // check()
	
</script>
</head>
<body>
	<form>
		<input type="text" name="zipcode">
		<input type="button" value="클릭" onClick="check()">
	</form>
</body>


------------------------------ 04_jQuery ------------------------------
☆기본 구조
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		//alert(1);
	});
</script>


./../js/jquery.js = http://code.jquery.com/jquery-3.1.1.min.js

DOM(Document Object Model): document 안에 들어가는 태그들을 객체로 만들어서 document 영역을 구성하는 것
jQurery로 여러가지 작업 가능: css, 유효성검사, 이벤트 처리 등 가능 

	<!--
	even,odd,eq(n),nth(n),lt(n),gt(n),slice(n): 0부터 시작
	nth-child: 1부터 시작 (child 붙은거 빼고는 대부분 0부터 시작)
	
	nth(n): 모든 span에서 n번째 시작 - 0부터 시작 
	eq(n): n번째 요소 - 0부터 시작 
	lt(n): less then(n) n보다 작은 - 0부터 시작(선택자)
	gt(n): greater then(n) n보다 큰 - 0부터시작(선택자)
	
	tr:first - 모든 테이블의 첫번째 tr에만 적용
	tr:first-child - tr의 부모인 테이블 입장에서 봤을 때 첫번째 tr자식에만 스타일 적용
	tr:nth-child(1) = tr:first-child
	tr:last - 모든 테이블의 마지막 tr에만 적용
	tr:last-child - tr의 부모인 테이블 입장에서 봤을 때 마지막 tr자식에만 스타일 적용
	tr:nth-child(2n) - 2의 배수 자리
	td:eq(4) - 4번째 td가 작업대상 / eq(equals)
	-->
	
	※함수
	<script src="./../js/jquery.js" type="text/javascript"></script> <!-- js 폴더안에 jquery.js 위치 지정 -->
	.ready(): ready() 함수에 대한 정의는 js 폴더 안에 들어가있음 - ↑ 위 <script>에서 위치 설정해주기 
		$(document).ready(function() {
			// DOM이 모두 로드된 후 실행할 코드 입력
		});
		↓ 생략가능
		$(function(){
		
		});
		
	→ 콜백함수: function(){}; - ()괄호 안이 비어있음
		어떤 이름을 줘서 명시적으로 호출하는 함수가 아니라,
		어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 자동으로 호출되는 함수
		값 들어가지 않고 정의만 해놓음
		함수는 원래 이름이 있어야 하지만, 이름없는 함수
		
	※메서드(jQuery Method)
	.addClass(): jQuery에서 만든 함수로 적용시켜봄
		$('span').addClass('redtext');
	.css('속성','값'): 선택한 요소의 css 속성값을 가져오거나 style 속성을 추가 ('속성','값')을 한 쌍으로 입력
	.each(function(){}); : 각각 작업해주고 싶을 때 사용, 선택한 요소가 여러 개일 때 각각에 대하여 반복하여 함수를 실행시킴(배열이랑 비슷)
	.remove(); 작업영역 자체가 (HTML 문서에서) 싹 삭제
	.removeClass(): 선택한 요소에서 클래스 값을 제거
	.empty(): 안의 영역이 삭제됨	(선택한 요소의 내용을 지운다. 내용만 지울 뿐 태그는 남아있는 점 주의하기)
	.attr(): 속성 설정
		attr('속성', '값') : 속성에 값을 넣어라 
		attr('속성') : 이 속성으로 설정된 값을 가지고 와라
			$("img").attr({ // 여러가지 속성 값 넣기 위해 { , , } 사용
				width: "100px", // 속성 이름에는 "" 안해도 되지만, 값 자리에는 "" 필수
				height: "100px",
				border:"1px solid black"
			});
	.removeAttr("title"); // 타이틀 속성 제거
	.text(): 문자를 가져옴 (선택한 요소 안의 내용을 가져오거나, 다른 내용으로 바꾼다.)
	.html(): 기존에 있던 것은 지우고 방금 만든 이미지만 새로 출력 (선택한 요소 안의 내용을 가져오거나, 다른 내용으로 바꾼다.)
	.click(); 버튼을 클릭했을 때 하고싶은 일이 뭐냐?
	.filter(): 필요한것만 골라서 적용 (매개 변수에 전달된 셀렉터 표현식 혹은 함수에 만족하는 요소를 추출(필터링)한다.)
		매개변수 selector: 엘리먼트를 추출하기 위한 셀렉터 표현식
			   function: 엘리먼트를 추출하기 위한 함수
	.not(): filter의 반대개념 (선택한 요소 중 특정 선택자를 제외한 요소를 선택)
	.slice(시작위치 숫자,끝위치 숫자): 일치하는 요소의 일부분만 선택 - 끝위치 바로 전 숫자까지만 가져옴
	.slice(n): n부터 끝까지 설정하기 - 0부터 시작
	.children(): 자식에 접근 (어떤 요소의 자식 요소를 선택)
	.parent(): 모든 부모에 접근 (어떤 요소의 부모 요소를 선택)
	.parents(): 모든 부모의 부모(조상)에 접근
	.find(): 자손에 접근하는 함수 (어떤 요소의 하위 요소 중 특정 요소를 찾을 때 사용)
	.siblings(): (자기자신 빼고) 앞 뒤 모든 형제에 적용
	.prev(): 바로 앞에 나오는 형제
	.prevAll(): 앞에 나오는 모든 형제에 접근
	.next(): 바로 뒤에 나오는 형제
	.nextAll(): 뒤에 나오는 모든 형제에 접근
	.toggle(): 클릭하면 잠깐 사졌다가(display: none;) 다시 클릭하면 다시 보임(display: block;)
		.toggle(fast): 빨리 사라지거나 나타나게
		.toggle(slow): 느리게 표시
		.toggle(n): 숫자입력하면 속도 지정 가능 (5000:5초)
		(키보드 내에 toggle 키: Insert, NumLock, CapsLock)	
	.hasClass(): ()괄호 안에있는 이런 클래스를 가지고 있는지? 있으면 true, 없으면 false
		if($(this).hasClass("toggleStyle")){
			$(this).removeClass("toggleStyle"); // 클릭하면 toggleStyle 사라짐
		}
	/*
	.append(): 계속 추가하는 함수 (선택한 요소의 내용의 끝에 콘텐트를 추가) / 배열 순서대로 입력됨(원래있던 자식 뒤에 추가하기)
		$target.append(새로운엘리먼트) == $(새로운엘리먼트).appendTo(target)
	.prepend(): 원래있던 자식 앞에 추가하기 (해당 엘리먼트에 첫자식 엘리먼트로 추가하기)
		$target.prepend(새로운엘리먼트) == $(새로운엘리먼트).prependTo(target)				
		공통점: target의 자식으로 추가
		차이점: 원래있던 자식 바로 뒤에 추가하는지, 바로 앞(첫번째)에 추가하는지
		
	after(): 바로 밑에 형제로 추가됨 - 먼저 형제로 넣은 것이 맨 밑으로 내려감
	insertAfter(): 
		$target.after(새로운엘리먼트) == $(새로운엘리먼트).insertAfter(target)
	before(): 바로 앞에 형제로 추가됨 - 나중에 형제로 넣은 것이 맨 밑으로 내려감
	insertBefore():
		$target.before(새로운엘리먼트) == $(새로운엘리먼트).insertBefore(target)
	공통점: target의 형제로 추가함
	*/
	.val(): 값을 가져오는 함수:
		var row = $("#row").val(); - row의 값을 가져오기
	.bind(): target과 event 엮어주기
		$('a').bind('click mouseover', function(){});
		→ 여러 작업 모두 공통으로 하기 위해서는 bind 함수로 묶어줌
			$('img').bind('mouseover mouseout',function(){ // 마우스 올렸을 때, 치웠을 때 같은 작업 해줄 경우
			//alert(1);
			});
		→ 마우스 올렸을 때 치웠을 때 각기 다른 작업 하기 위해서, 이벤트 마다 동작이 다를 때는 bind로 묶은 후  {}, 사용해서 동작 따로따로 실행
			$('img').bind({
				'mouseover' : function() {
				
				},
				'mouseout' : function() {

				},
				'click' : function() {

				}
	.unbind(); bind 함수 해지
		if(cnt == 5){
			$('img').unbind();
		}
	.live(): 이벤트 처리를 위임할 때 사용하는 함수
			//bind로는 새로 생성된 p 태그에는 이벤트 설정 적용되지 않는다.
			// live로는 새로 생성된 p 태그에도 이벤트 설정 적용시킬 수 있다.
	.die(); live 함수 해지
		if(cnt == 5){
			$('p').die();
		}
	
	.change() : 옵션에 변화가 생겨야지만 함수 호출
		$('#sel').change(function(){}; - 옵션에 변화가 생겼을때
		
	.show(): (왼쪽 위 꼭지점부터)보이게하기 
		$('button:eq(0)').click(function(){
			$('span:first').show();
		});
	.hide(): 숨기기
		$('button:eq(1)').click(function(){
			$('span:first').hide();
		});
	.slideUp(): 미끄러지듯이 올라감
		$('#slideUp').click(function(){
			$('div').slideUp();
		});
	.slideDown(): 미끄러지듯이 내려옴
		$('#slideDown').click(function(){
			$('div').slideDown('slow',function(){ // 천천히 내려오게 한 후,
				$(this).css('background','pink'); // 배경 pink로 설정
			});
		});
	.slideToggle(): 미끄러지듯이 toggle
		$('#slideToggle').click(function(){
			$('div').slideToggle(3000); // 초 설정
		});
	.toggle(): 선택한 요소가 보이면 보이지 않게, 보이지 않으면 보이게 설정
		$('img').toggle( // 이미지 누를때마다 다른 설정하고 싶을 경우 사용
				function(){
					$(this).css('opacity', 0.6); // opacity 속성 : 투명도 설정 (1이 가장 선명, 숫자 작을수록 흐려짐)
				},
				function(){
					$(event.target).css('opacity', 0.2);
				},
				function(){
					$(this).css('opacity', 1.0);
				}
			);	
		
	.fadeIn(): 전체가 서서히 나타내는 효과(점점 나타나는 효과)
	.fadeOut(): 전체가 서서히 사라지는 효과 / 안보임  - display: none 설정됨
	.fadeToggle():fadeIn() 메소드와 fadeOut() 메소드를 번갈아 가면서 실행
	.fadeTo: 투명도 설정
		$('div:hidden:first').fadeIn(3000).fadeTo('slow',0.3).fadeOut(5000); // 차례대로 실행됨
	
	.animate(): 애니메이션 효과(사용자 효과)
	→ 애니메이션 효과 안에 margin 설정할 때는 marginLeft 하이픈(-) 없이 사용
		animate({marginLeft : '-=205px'},2000); // 첫번째 이미지 왼쪽 여백을 2초에 걸쳐서 점점 줄이기
		$('#firstimage').animate({marginLeft : '+=205px'},2000);
		
	.mouseover(): 마우스 올렸을 때
	.mouseout(): 마우스 치웠을 때
	
	
	.load(): 화면의 일부를 변화시키고 싶을 때 사용 - 꼭 html 형태만 불러옴
		$(document).ready(function(){
		$('#menu1').click(function(){
			//.load(): 화면의 일부를 변화시키고 싶을 때 사용
			$('#message1').load("menu.html"); // 불러와서 #message1 자리에 menu.html 넣고싶다
		});
	.ajax(): 아래처럼 쓰는 형식 정해져있음 - 형태를  html만 가져오는 것이 아니라 여러가지 원하는 형태로 불러옴
		$.ajax({
				url : '',
				dataType: '',
				success : ,
				error :  // 필수값은 아님
			});
			
	xml: 내가 만들어 쓰는 태그(e'x'tensible ml)
	
	
	rotator({}); : rotate 하는 함수
		
	
→  opacity 속성 : 투명도 설정 (1이 가장 선명, 숫자 작을수록 흐려짐)
→  메서드 체이닝 (chaining): 작업대상 하나에 여러개 작업을 연달아서 쓸 수 있다.
	$('p em').c0ss('background-color','yellow')
			 .css('border','3pt solid #f00')
			 .each(function(){
			 $('.result1').append($(this).text());
			 });
 
→  $(''): 객체를 만드는(표현하는) 방법 - java에서는 new 클래스
	작업대상(내가 만든 객체들)을 객체로 만들 때는 '',""(따옴표) 써줘야함
	document나 this는 따옴표 붙이지 않음
	
------------------------------ 04_jQuery_ch01 ------------------------------
▶Ex01_element
<title>Ex01_element.html</title>
<style type="text/css">
	.spotlight{
		background: #ff0;
	}
	.redtext{
		color : #f00;
	}
	.largetext{
		font-size : 30pt;
	}
	.italictext{
		font-style: italic;
	}
	.under{
		text-decoration: underline;
	}
</style>

<script src="./../js/jquery.js" type="text/javascript"></script> <!-- js 폴더안에 jquery.js 위치 지정 -->
<script type="text/javascript"> // javascript 코드 실행하고 하기
//작성 기본틀
	// document 영역이 준비됐을 때 하고싶은 일이있으면  function({ }); 안에 작업 
	// ready(): ready() 함수에 대한 정의는 js 폴더 안에 들어가있음 - 위에서 위치 설정해주기 
	$(document).ready(function(){ // 함수 적용시키고 싶은 대상을 객체로 만듬 / 어떤 함수를 적용시키는 것은 항상 객체를 대상으로 함		
		//alert(1);
		$('span').addClass('redtext'); //작업대상(내가 만든 객체들)을 객체로 만들 때는 '',""(따옴표) 써줘야함 / addClass(): jQuery에서 만든 함수로 적용시켜봄
		// ↑ <span> 태그에 redtext라는 class 추가한다. <body>의 <span>태그에서 class="redtext"를 사용하고 있는 효과를 줌
		// ↑ <span id=> 태그에 redtext라는 class 추가한다. class redtext를 사용하고 있는 효과를 줌
		$('div').addClass('spotlight'); // div에 spotlight 적용
		$('#simpletext1').addClass('largetext'); // id가 simpletext1인 곳에 largetext 적용시키겠다는 뜻
		$('.simpletext1').addClass('italictext'); // class가 simpletext1인 곳에 italictext 적용
		$('span').addClass('under');
		$('#simpletext2').css('background-color',"green") // css함수를 적용 : (속성, 값)을 한쌍으로 입력
	}); 
</script>
</head>
<body>
	<!-- <span id="simpletext1" class="redtext">simple</span> addClass는 span에 class 써준 효과를 줌 -->
	<span id="simpletext1">simple</span>
	<div class="simpletext1">jQuery</div>
	<span id="simpletext2">basic</span>
	<div class="simpletext3">example</div>
	
	<hr>
	
	<div>
		<em>Hello!</em>
		<em>jQuery</em>
		<em>forever</em>
	</div>
	
	<span>
		<em>Good bye!</em>
		<em>javascript</em>
	</span>
</body>

▶Ex02
<title>Ex02_css_메서드체이닝.html</title>
<style type="text/css">
	em{
		font-size:20pt;
		line-height: 20pt; /* 줄간격 */
		margin: 20px;
		color: blue;
	}
	
	.result1{
		background: lime;
	}
	.result2{
	background: tomato;
	}
</style>

<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		//alert(1);
		
		//메서드 체이닝 (chaining): 작업대상 하나에 여러개 작업을 연달아서 쓸 수 있다.
		$('p em').css('background-color','yellow') // .css('속성','값')
				 .css('border','3pt solid #f00')
				 .each(function(){ // each(function): 각각 작업 - p의 자손 중 em이 3개(one,two,three)있는데, 각각 하고싶은 일이 있을 때 사용
					 $('.result1').append($(this).text()); // 지금만난 그 아이는 this(한번은 one, 한번은 two, 한번은 three가 됨)의 text를 가져와서 result1에 추가해라
				 	// .append(): class result1 영역을 객체로 만들어서 추가 하는 함수
				 });
	
		//div 자식인 em에 배경 분홍 설정하고, 각각의 문자를 result2에 나타내기
		$('div>em').css('background-color','pink')
				   .each(function(){
					  $('.result2').append($(this).text()) // 'div>em' 각각(for,six)을 보면서 result2에 추가하면 배경색 tomato 보임
				   });
		$('em+span').css('background-color','orange'); // em 바로뒤에 나오는 span 형제 선택자(+ 사용)

	});
	
</script>

</head>
<body>
	<p>
		<em>one</em>
		<em>two</em>
		<span>
			<em>three</em>
		</span>
	</p>
	
	<div>
		<em>four</em>
		<span>
			<em>five</em>
		</span>
		<em>six</em>
	</div>

	<hr>
	
	<div>
		<span>ancestor descendant로 검색된 엘리먼트</span>
		<span class="result1"></span>
	</div>
	
	<div>
		<span>parent child로 검색된 엘리먼트</span>
		<span class="result2"></span>
	</div>
</body>

▶Ex03_first_nth-child_eq
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		//$('tr').addClass('style1'); // 모든 줄마다 styel1 적용
		//$('tr:first').addClass('style1'); // 첫번째 tr에만 적용됨
		//$('tr:first-child').addClass('style1'); // tr의 부모인 테이블 입장에서 봤을 때 첫번째 tr자식에 스타일 적용
			//tr:first-child = tr:nth-child(1)
		//$('tr:nth-child(1)').addClass('style1'); // 첫번째 tr에 적용 -  nth-child : 1부터 시작
		//$('tr:even').addClass('style1'); // even(짝수,홀수-숫자 0부터 카운팅): 전체 테이블 대상으로 0,2,4,6,8칸에 적용-4번째는 적용이됬는데 아래에서 style2 노란색이 덮음
		// 첫번째 자식 요소에만 적용됨-tr의 부모 입장에서 모든 table에서 봤을 때 첫번째 tr에 적용
		
		//$('tr:last').addClass('style2'); // 모든 테이블의 마지막 tr에만 적용
		$('tr:last-child').addClass('style2'); // tr의 부모인 테이블 입장에서 봤을 때 마지막 tr자식에만 스타일 적용
		
		//$('tr:nth-child(2)').addClass('style2');
		
		//$('tr:nth-child(2n)').addClass('style1'); // 2의 배수 자리에 스타일 적용 - tr:nth-child(2n) : 1부터 시작
		$('tr:nth-child(3n+1)').addClass('style1'); // n은 0부터 시작 → 1,4,7 ..
		$('td:eq(4)').css('backgroundColor','green');	
	});
</script>


▶Ex04_Ex04_first-child
<script type="text/javascript">
	$(document).ready(function(){
		//alert(1);
		
		$('span:first-child').css('background','yellow');
		$('span:last-child').css('background','red');
		
		$('span:first').css('color','orange');
		$('span:last').css('color','cyan');
		
		$('span:nth-child(2)').css("font-style",'italic')
							  .css('text-decoration','underline');
		
		/* $('span:nth(2)') */
	    /* nth(n): 모든 span에서 n번째에 적용 - 0부터 시작  */
	});
</script>


▶Ex05_lt_gt
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('td').addClass('bluePink'); // .addClass: 클래스 설정해라 / 모든 td에 bluePink 설정
		$('td:lt(2)').removeClass('bluePink'); // .removeClass: 클래스를 지워라
		// lt(n): less then(n) n보다 작은 - 0부터 시작
		
		$('td:gt(4)').removeClass('bluePink'); // 4보다 큰 부분 핑크배경 지우기
		// gt(n): greater then(n) n보다 큰 - 0부터시작
		
		$('td:gt(7)').addClass('orange');
		
	});
</script>


▶Ex07_속성 선택자 적용
<script src="./../js/jquery.js" type="text/javascript"></script> <!-- js 폴더안에 jquery.js 위치 지정 -->
<script type="text/javascript"> // javascript 코드 실행하고 하기
	//작성 기본틀
	$(document).ready(function(){		
		$('span[id]').addClass('spotlight'); //span 태그 있는 곳에서도 id속성 있는 곳에만 적용시켜라
		$('span[id="simpletext1"]').addClass('redtext');
		$('span[id!="simpletext1"]').addClass('bluetext');
		$('span[id^="complex"]').addClass('italictext'); // id가 complex로 시작하는(^) 곳에 italictext 지정
		$('span[id$="text1"]').addClass('largetext'); // id가 text1로 끝나는($)곳에 글자 크게
		$('span[id*="text"]').addClass('under');
	}); 
</script>
</head>
<body>
	<span id="simpletext1">simple</span>
	<span id="simpletext2">simple2</span>
	<div class="simpletext1">jQuery</div>
	<span id="complex">basic</span>
	<div class="simple">example</div>
</body>

------------------------------ 04_jQuery_ch02 ------------------------------
▶Ex01_Attr(속성)
<title>Ex01_Attr(속성).html</title>
<style type="text/css">
	body{
		text-align: center;
	}
	img{
		padding:20px; /* 사방 모두 여백 설정 */
	}
	div{
		color:blue;
		font-size : 30px;
	}
</style>

<script type="text/javascript" src="../js/jquery.js"></script>
<script type="text/javascript">
	$(document).ready(function(){ // 속성설정할 때 attr() 함수사용, ~~ 할때 css 함수 사용
		//$('img:first').attr("src","../images/im0.jpg") // <body><img> 태그에서 src="" 속성을 설정한 것과 같은 작업
		$('img:eq(0)').attr("src","../images/im0.jpg") // first나 eq(0) 동일한 속성임
						.attr('title','강아지1')
					 	.attr('alt','puppy picture') // alt: 이미지가 없으면 출력됨
						.css('border','3px solid red');
		$('img:eq(1)').attr({ // 1번째 이미지를 대상으로 attr 속성 여러개 설정하고싶을 땐 {,}로 써줌(,쉼표로 여러개 연결)
						src : "../images/im1.jpg", // 속성 넣고싶을 땐 : 사용
						title : '강아지2',
						width : '100px',
						height : '80px'
						})
					  .css({ // css 한묶음으로 묶어서 사용
						border : "2px solid blue",
						background:"yellow"
					  }); 
		
		$('#btn1').click(function(){ // 버튼을 클릭했을 때 하고싶은 일이있으면 function 안에다 작성
			//alert(2);
		
			$('img:eq(0)').removeAttr("title"); // 첫번째 이미지의 타이틀 속성 제거
			$('img:eq(0)').css('border','6px dashed blue')
						  .css('background-color','cyan'); // css 따로따로 사용
		});
		
		//attr('속성', '값') : 속성에 값을 넣어라 
		//attr('속성') : 이 속성으로 설정된 값을 가지고 와라 
		
		temp = $('img:eq(1)').attr('src'); // 1번째 이미지 src 속성에 있는 걸 가져와라 - 원래 속성 , 2개
		//alert(temp);
		
		$('div span').append( temp ); // ↓ 같은 형식 : temp 변수에있는 것을 추가해라
		//$('div span').append( $('img:eq(1)' ).attr('src') ); // div span에 1번 이미지 src속성에 있는 것을 넣어라
		
	}); // ready() 함수
	
</script>
</head>
<body>
	<!-- 첫번째 이미지만 작업대상으로 하고싶을 때 -->
	<img /> <img />
	
	<div>
		<b>어트리뷰트</b>
		<span></span> <!-- span 사이에 뭘 넣고싶을 때 append 사용 -->
	</div>
	
	<button id="btn1">어트리뷰트 값 제거하기</button> <!-- <input type="button"> 처럼 버튼 생성하기 -->
</body>
			
▶Ex02_Attr(for문)
<title>Ex02_Attr(for문).html</title>
<style type="text/css">
	#left_side div{
		float : left; /* 이미지가 최대한 왼쪽으로 붙어 나오게 하기 */
		margin-left: 10px;
	}
	
	#left_side2{ /* left_side2는 왼쪽에 떠오르지 않도록 하기 */
		clear : left;
	}
</style>

<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		//alert(1);
		
		$('#btn').click(function(){ // 버튼 클릭했을 때 alert이 뜨도록 설정
			//alert(2);
			/* 버튼 누를때마다 아래처럼 작업하도록
			0←1 1번째 이미지를 0번째 이미지로 옮겨라(=복사 덮어쓰기)
			1←2
			2←0
			}); */
		
			var temp = $('img').eq(0).attr('src'); // tara01.jpg / 0번째 이미지의 src 속성(tara01.jpg)을 가져와서 temp 변수에 넣어놓기
			
			//a = $('img').eq(1).attr('src'); // 이미지 태그를 작업대상으로 해서 1번째 이미지의 src 속성(tara02.jpg)을 가져와서 a 변수에 넣어놓기
			//$('img').eq(0).attr('src',a); // 두줄인 것을 아래처럼 한줄로 써줌 / 0번째 이미지의 src 속성으로 a변수에 있는 것을 넣어라
			//	↓
			//$('img:eq(0)').attr('src', $('img').eq(1).attr('src')); // $('img').eq(0) = $('img:eq(0)')
			//$('img').eq(0).attr('src',$('img').eq(1).attr('src')); // 0←1 / 1번째 이미지의 속성을 가져와서 0번째 이미지로 넣음
			//$('img').eq(1).attr('src', $('img').eq(2).attr('src')); // 1←2
			//$('img').eq(2).attr('src',temp); // 2←0
			
			/* 0←1, 1←2 두 줄만 배열로 만들어 for문 돌려보기 */
			for(i=0;i<$('img').length-1;i++){ // 이미지 갯수가 몇개인가(3개) = ($('img').length), 이미지가 0번째 부터 시작하니까 -1붙여줌
				$('img').eq(i).attr('src',$('img').eq(i+1).attr('src'));
			}
			
			$('img').eq($('img').length-1).attr('src',temp); // 2←0 // n번째 이미지에 src를 넣어라
			// eq(n번째) = ($('img').length-1) 이미지가 100개가있으면 마지막은 99번째이기 때문에 100-1번째
		
		}); // btm
		
		
		$('#btn2').click(function(){ // 버튼2 클릭했을 때 적용하기
			
			temp = $('img').eq(2).attr('src'); //tara03 //2번째 있던 이미지가 지워지기 때문에 잠깐 임시변수에 보관
			
			$('img').eq(2).attr('src', $('img').eq(1).attr('src')); // 2←1 / 1번째 이미지의 속성을 가져와서 2번째 이미지로 넣음
			$('img').eq(1).attr('src', $('img').eq(0).attr('src')); // 1←0
			$('img').eq(0).attr('src',temp); // 0←2			
		});
	});
</script>
</head>
<body>
	<div id="left_side">
		<div>
			<img src="../images/tara01.jpg" width="90" height="90"> <!-- 이미지 하나가 div 영역을 차지 -->
		</div>
		
		<div>
			<img src="../images/tara02.jpg" width="90" height="90">
		</div>
		
		<div>
			<img src="../images/tara03.jpg" width="90" height="90">
		</div>
	</div>
	
	<div id="left_side2">
		<input id="btn" type="button" value="버튼"> <!-- 버튼 누르면 이미지가 왼쪽으로 이동 -->
		<input id="btn2" type="button" value="버튼2"> <!-- 버튼 누르면 이미지가 오른쪽으로 이동 -->
	</div>
</body>

▶Ex03
<title>Ex03_attr_click_img.html</title>
<style>
/* id가 myarea인 곳에 이미지 넣을 예정 */
	img{ /* img 또는 #myarea img (자손) 사용 */ 
		width: 100px;
		height: 100px;
	}
</style>

<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		
		$('#makeimage').click(function(){
			//alert(1);
			//alert($('input:checked').length); // input 태그에서 체크된 갯수 몇개인지 확인
			
			var result = ""; //result 변수 밖에다 선언해놔야 밖에서도 사용가능(이미지 불러옴)
			
			$('input:checked').each(function(){ //.each()도 또다른 반복문의 형태이다. // input 태그 체크된 것 각각 확인해보기
				//alert($(this).attr('id')); // 지금만난 check박스 id값(속성) 출력해봐라
				result += "<img src='./../images/" + $(this).attr('id') + ".jpg'>" //result 변수에 체크된 갯수만큼 이미지 태그가 만들어짐
				
				/* 코드가 너무 길다 싶으면 변수에 넣어서 할 수도있음
				idvalue = $(this).attr('id'); // 변수에 지금만난 check박스의 id값 담기
				result += "<img src='./../images/" + idvalue + ".jpg'>" */
				
			});
			
			$('#myarea').html(result); // 이미지들이 myarea 영역에 출력됨 // each문 밖에다 써주면 each문 반복해서 돌면서 그동안 모아놨던 것을 한번에 출력한다. 
			//.append() 특징: 버튼 누를때마다 계속 추가됨
			//.html(): 기존에 있던 것은 지우고 방금 만든 이미지만 새로 출력
		
			/* 이미지를 클릭했을 때 클릭한 이미지의 src 속성을 alert으로 띄우기 */
			$('#myarea img').click(function(){ // img만 써도되고 #myarea 자손 img 써도됨
				alert($(this).attr("src"));
			}); 
		
		}); // click
	}); // ready
</script>
</head>
<body>
<!-- 내가 체크한 체크박스에 따라 이미지 다르게 불러오기 -->
	<p>
		<input type="checkbox" id="Koala"/>코알라 <!-- 동물 스펠링 앞글자 꼭 대문자 사용 -->
		<input type="checkbox" id="Penguins" checked="checked"/>펭귄
		<input type="checkbox" id="Desert" checked/>사막
	</p>
	
	<p>
		<input type="button" id="makeimage" value="그림만들기"/>
	</p>
	
	<div id="myarea"></div>
</body>


▶Ex04_Attr
<title>Ex04_Attr_image.html</title>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		/*속성으로 이미지 설정하기*/
		$("img").attr({
			width: "100px", // 속성 이름에는 "" 안해도 되지만, 값 자리에는 "" 필수
			height: "100px",
			border:"1px solid black"
		});
		
		/* 콜백함수: function(){}; - ()괄호 안이 비어있음
			어떤 이름을 줘서 명시적으로 호출하는 함수가 아니라,
			어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 자동으로 호출되는 함수
			값 들어가지 않고 정의만 해놓음
			함수는 원래 이름이 있어야 하지만, 이름없는 함수 */
		
		
		/* title 속성으로 설정되어있는 이미지를 src 속성으로 설정 바꿔서 불러오기 - 3번 써줘야해서 길어짐.
		$('img').eq(0).attr('src',"./../images/"+$('img').eq(0).attr('title'));
		$('img').eq(1).attr('src',"./../images/"+$('img').eq(1).attr('title'));
		$('img').eq(2).attr('src',"./../images/"+$('img').eq(2).attr('title')); */
				//	↓
		/* 몇번째인지 지정하지 않고, 모든 이미지가 작업 대상인데 src 속성으로 넣으라고 하는 순간 콜백함수가 자동으로 호출됨. */
		$('img').attr('src',function(){ // 이름이 없는 함수 : 콜백함수 (정의만 해놓음)
			/* return "../images/" + $(this).attr("title");
			3개 이미지가 모두 작업대상인데, 지금 만난 이미지의 title을 가져와라 - 문자열 리턴하는데 바로 위 function()함수 정의된 곳으로 리턴함 */
			return "../images/" + this.title; // 어떤 속성에 접근할 때는 이렇게 this.title = $(this).attr("title") 써도 상관없음
			//내가만든 문자열("../images/")과 this.title을 합친 것이 function()으로 리턴이되면서 src 자리로 들어갈 수 있음
		});
		
		$('img').attr('title',function(index){ // 작업대상의 위치가 들어옴 / function 안에 아무 변수 써줌 / index에는 0,1,2 들어옴
			return index + "번째 이미지"; // 이미지를 작업대상으로 하고있음. 처음만난 이미지를 가지고 function(){} 안에 내용 작업함 
		});
		
		//버튼을 클릭했을 때 이미지 title 속성을 제거
		$('input').click(function(){
			//$('img').eq(0).removeAttr("title"); // 1번째 이미지만 타이틀 제거
			$('img:nth(0)').removeAttr('title');
			
			//$('img').attr("title",""); // 전체 이미지 타이틀 제거 방법①
			//$('img').removeAttr("title"); // 전체 이미지 타이틀 제거 방법②
		});
	});
</script>
</head>
<body>
	<img title="image1.jpg"/>
	<img title="image2.jpg"/>
	<img title="image3.jpg"/>
	
	<br>
	
	<input type="button" value="속성제거">
	
</body>


▶Ex05_remove
<title>Ex05_remove.html</title>
<style type="text/css">
	p{
		margin: 5px;
	}
	.red{
		color:red;
	}
	.under{
		text-decoration: underline;
	}
	.highlight{
		background: yellow;
	}
</style>

<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		/* p 영역에 .red .under 적용시키기 */
		//$('p').addClass('red').addClass('under'); // 방법①
		$('p').addClass('red under'); // 방법②
		
		/* 짝수번째 p 영역에 under, red 지우기 */
		$("#removeClass").click(function(){ // 콜백함수: 클릭했을 때 자동으로 호출됨
			$('p:even').removeClass('red under'); // 0부터 시작
		});
		
		/* 홀수번째 p 영역 지우자마자 highlight 클래스 추가 */
		$('#changeClass').click(function(){
			$('p:odd').removeClass('red under').addClass('highlight');
		});
		
		/* div영역을 클릭했을 때 작업영역 모두 삭제 */
		$('#div1').click(function(){ // 
			$(this).remove(); // 작업영역 자체가 (HTML 문서에서) 싹 삭제
		});
	});
</script>
</head>
<body>
	<button id="removeClass">removeClass</button>
	<button id="changeClass">changeClass</button>
	<div id="div1">
		<p>엘리먼트로부터</p>
		<p>클래스를</p>
		<p>추가하고</p>
		<p>제거하는</p>
		<p>연습하기</p>
	</div>
</body>


▶Ex06_toggle_hasClass
※css를 이용한 마우스 커서 모양 지정
cursor : pointer; 마우스 손가락 설정(링크 설정된 곳)
		 crosshair; 십자가 모양
		 move;
<p style="cursor:auto">Auto</p> - I 모양
<p style="cursor:crosshair">Crosshair</p> - 십자가 모양
<p style="cursor:default">Default</p> - 기본 마우스 모양
<p style="cursor:pointer">Pointer</p> - 손가락 포인터 모양 (링크 설정된 곳)
<p style="cursor:move">Move</p> - 십자가 화살표 모양
<p style="cursor:e-resize">e-resize</p> - ↔ 모양
<p style="cursor:ne-resize">ne-resize</p> - ↗ 모양
<p style="cursor:nw-resize">nw-resize</p> - ↖ 모양
<p style="cursor:n-resize">n-resize</p> - ↕ 모양
<p style="cursor:se-resize">se-resize</p> - ↖ 모양
<p style="cursor:sw-resize">sw-resize</p> - ↗ 모양
<p style="cursor:s-resize">s-resize</p> - ↕ 모양
<p style="cursor:w-resize">w-resize</p> - ↔ 모양
<p style="cursor:text">text</p> - I 모양
<p style="cursor:wait">wait</p> - 동그라미 무한반복 기다리는 모양
<p style="cursor:help">help</p> - 기본형에 물음표 있는 모양

<title>Ex06_toggle_hasClass.html</title>
<style type="text/css">
	p.a, p.c{ /* p태그 안에 클래스가 a인 곳 */ /* p .a: p태그 자손 중 클래스가 a인 곳(띄어쓰기 주의) */
		font-weight: bold;
		color: blue;
		cursor: pointer; /* 마우스 손가락 설정(링크 설정된 곳) */
			 /* crosshair: 십자가 모양
				move: */
	}
	.toggleStyle{
		color: red;
	}
</style>

<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('p.a').click(function(){ // p태그 안에 클래스가 a인 곳이 작업대상
			$('p.b').toggle(5000); //  클릭하면 잠깐 사졌다가(display: none;) 다시 클릭하면 다시 보임(display: block)
		});
		
		$('p.c').click(function(){
			$('p.d').toggle('fast'); // fast: 빨리, slow: 느리게 표시, 숫자입력하면 속도 지정 가능(5000:5초)
			/* 키보드 내에 toggle 키: Insert, NumLock, CapsLock */
		});
		
		$('div').click(function(){ // div 영역은 한 줄 전체 영역
			/* 지금 클릭한 바로 그 영역에 toggleStyle 클래스 있다면~ 있으면 if문 true, 없으면 false */
			if($(this).hasClass("toggleStyle")){ // if문 true
				$(this).removeClass("toggleStyle"); // 지금 클릭한 그 영역 toggleStyle red 사라짐
			}
		});
	});
</script>
</head>
<body>
	<p class="a">남자 배우 인기순위</p>
	<p class="b">조승우</p>
	<p class="b">하정우</p>
	<p class="b">김수현</p>
	<p class="b">소지섭</p>
	<p class="b">송승헌</p>
	<hr>
	
	<p class="c">여자 배우 인기순위</p>
	<p class="d">송혜교</p>
	<p class="d">전지현</p>
	<p class="d">김태희</p>
	<p class="d">공효진</p>
	<p class="d">하지원</p>
	<br>
	
	<div class="toggleStyle">div 영역입니다.</div>
	
</body>
------------------------------ 04_jQuery_ch03 ------------------------------
▶Ex01_add.html
<title>Ex01_add.html</title>
<style type="text/css">
	div{
		width:50px;
		height:50px;
		margin:10px;
		border : 1px solid black;
		float : left;
	}	
	p{
		clear : left;
	}	
	.redBorder{
		border: 2px solid red;
	}	
	.yellow{
		background: yellow;
	}
</style>
<script type="text/javascript" src="../js/jquery.js"></script>
<script type="text/javascript"> 
	$(document).ready(function(){
		$('button').click(function(){
			/* 원래 작업하던 div에 redBorder 넣고, p까지 추가해서 yellow 적용 */
			$('div').addClass('redBorder').add('p').addClass('yellow'); 
			// 공통되는 yellow는 뒤에 한번만 사용
			/*$('div').addClass('redBorder yellow'); // div에만 redBorder와 yellow 적용됨
			  $('p').addClass('yellow');*/
		});
	});
</script>
</head>
<body>
	<div></div>
	<div></div>
	<div></div>
	<p>여기는 p영역</p>
	
	<button>클릭</button>
</body>


▶Ex02_filter_not_slice.html
<title>Ex02_filter_not_slice.html</title>
<style type="text/css">
	div{
		width: 60px;
		height: 60px;
		border: 2px solid green;
		float: left;
		margin: 5px;
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('div').css('background','yellow') // div 전체 배경은 노란색으로 하고,
				//.filter(".middle").css('border-color',"red") // class가 middle만 걸러서 css 설정하기
				.not(".middle").css('border-color',"red"); // filter의 반대개념
		
		$('div').slice(2,4).css('background','pink'); // 2~4번째 앞까지 - 0부터시작
		//$('div').slice(2).css('background','pink'); // 2 ~ 끝까지
				
	});
</script>
</head>
<body>

	<div id="first"></div>
	<div id="second" class = "middle"></div>
	<div id="third" class = "middle"></div>
	<div id="fourth" class = "middle"></div>
	<div id="fifth" class = "middle"></div>
	<div id="sixth"></div>
	
	<p class="middle"></p>
</body>


▶Ex03_children_find.html
<title> Ex05_children_find.html </title>
<style>
	span {color: blue; background:yellow;}
</style>
<script src="../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(function(){ //document.ready 생략가능
		$('button').click(function(){
			$('div').children().css('border-bottom','3px solid red') // .children(): 자식에 접근 - div 모든 자식에 설정 적용
			
			$('div').children(".selected").css('color','red') // class가 selected인 자식 (하하하) 에만 적용
		
			$('div').find(".selected").css('color','green'); // .find(): 자손에 접근할 때 쓰는 함수
				// 자손은 자식을 포함. 때문에 위에서 div children 글자에 red 한 것은 덮어씌워짐
		});
	});
</script>
</head>
<body>
	<button>엘리먼트에 스타일 입히기</button>
	<p> 이곳은 p문장입니다. </p>
	<div> 
		<h1 class="selected">하하하 
		   <span class="selected"> 이곳은 div의 차일드 span 이다.</span> 
		</h1>
		<h2>호호호</h2>
	</div>
	
	<p>
	그리고 <span> 여기는 p의 차일드 span </span> 문장입니다. 
	</p>
	
	<div> 그리고 마지막으로 
	   <span> 이곳은  div의 차일드 span 이고</span>
	   이곳은 div이다. 
	</div>
	
	<div> 
		div
	   <p> p영역
	   		<span class="selected">span</span>
	   </p>
	</div>
</body>


▶Ex04_parent_parents.html
<title> Ex06_parent_parents.html </title>
<style>
	span {  color: blue; background:yellow;}
</style>
<script src="../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(function(){
	   $('button').click(function(){ // 버튼클릭했을 때 span을 대상으로 작업
		   $('span').parent().css('border-bottom','2px double red'); // parent(): 모든 부모에 두줄짜리밑줄 설정
		   $('span').parents().css('font-style','italic'); // parents(): 모든 부모의 부모(조상)에 접근
		   
	   });
	});
</script>
</head>
<body>
	<button> 엘리먼트에 스타일 입히기</button>
	<div>div</div>
	<p> 이곳은 p문장입니다. </p>
	<div> 
		<h1>하하하 
		   <span class="selected"> 이곳은 div의 차일드 span 이다.</span> 
		</h1>
		<h2>호호호</h2>
	</div>
	
	<p>
	그리고 <span> 여기는 p의 차일드 span </span> 문장입니다. 
	</p>
	
	<div> 그리고 마지막으로 
	   <span> 이곳은  div의 차일드 span 이고</span>
	   이곳은 div이다. 
	</div>
	
	<div> 
		div
	   <p> p영역
	   		<span class="selected">span</span>
	   </p>
	</div>
</body>


▶Ex05_siblings.html
<title>Ex05_siblings.html</title>
<style type="text/css">
	div,span{
		width : 100px;
		height:100px;
		margin:5px;
		float : left;
		border :2px solid red;
	}
	.pink{
		background: pink;
	}
	.blue{
		border: 3px solid blue;
	}
</style>
<script type="text/javascript" src="../js/jquery.js"></script>
<script type="text/javascript">
	$(function(){
		$('button').click(function(){
			//$('span').next().addClass('pink'); // prev(): 바로앞에 나오는 형제 → 1,3,4에 pink 배경
			//$('span').prev('#fourth').addClass('blue'); // span 바로 앞에 형제가 id fourth를 가지고 있는 곳에 blue 설정 → 4에 blue 설정
			
			//$('span').prevAll().addClass('pink');
			
			$('span').siblings().css('background','yellow'); // (자기자신 빼고) 앞 뒤 모든 형제에 적용
		});
	});
</script>
</head>
<body>
	<p>
		<button>형제 엘리먼트에 스타일 입히기</button>
	</p>
	
	<div id="first">1_first</div>
	
	<span id="second" class="middle"> 2_sibling
		<div id="child">child</div>
		<!-- 보통 큰 영역인 div안에 작은영역 span을 쓰는데 span 안에 div가 있어서 노란줄이지만 오류는 아님 -->
	</span>
	
	<div id="third" class="middle">3_sibling</div>
	<span id="fourth" class="middle">4_sibling</span>
	<span id="fifth" class="middle">5_sibling</span>
	
	<div id="sixth">6_last</div>
	
</body>


------------------------------ 04_jQuery_ch04 ------------------------------
▶Ex01_append_prepend.html
<title>Ex01_append_prepend.html</title>
<style type="text/css">
	div{
		float: left;
		margin : 20px;
	}
</style>
<script src="../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">

	$(function() {
		//과일,차 배열로 만들기
		var fruits = ["apple","banana","orange","melon"];
		var cars = ["sonata","grandure","genesis"];
		
		/* ul에 li가 없기 때문에 과일,차 배열로 li를 만들어줌 */
		$(fruits).each(function(index,value){ // fruits가 작업대상.배열 객체 만들기 - 변수는 따옴표로 묶지 않는다. // 0~3번방에있는 것들 돌면서 자식으로 li 추가
			$('#fruit_list').append($('<li>' + index +':'+ value + '</li>')); // id fruit_list에 자식으로 추가해라
		});
		/*
		$.each(cars,function(index){ // each()함수 안에 배열의 이름을 써도됨 - 속성에 index(=방번호)만 써주고 아래에는 배열로 접근
			$('#car_list').append($('<li>'  + index + ':' + cars[index] + '</li>'));
		});
		*/
		$.each(cars,function(index){
			//$('#car_list').append($('<li>'  + index + ':' + cars[index] + '</li>'));
			$('<li>' + index +':' + cars[index] + '</li>').appendTo('#car_list'); //어디에다 추가할건지 뒤에 추가
		});
		 
		$(fruits).each(function(index,value){
			$('#fruit_list2').prepend($('<li>' + index +':'+ value + '</li>'));
		});
		 
		$.each(cars,function(index){
			//$('#car_list').append($('<li>' + index +':' + cars[index] +  '</li>'));
			$('<li>' + index +':' + cars[index] +  '</li>').prependTo('#car_list2');
			
		});
		 
	});
</script>
</head>
<body>
	<div>
		<b>내가 좋아하는 과일</b>
		<ul id="fruit_list"></ul>
	</div>
	
	<div>
		<b>갖고 싶은 차</b>
		<ul id="car_list"></ul>
	</div>
	
	<div>
		<b>내가 좋아하는 과일2</b>
		<ul id="fruit_list2"></ul>
	</div>
	
	<div>
		<b>갖고 싶은 차2</b>
		<ul id="car_list2"></ul>
	</div>
</body>


▶Ex02_before_after_(insert).html
<title>Ex02_before_after_(insert).html</title>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		// header,footer : 시멘틱 요소
		$('header').after($('<div> 좋아하는 과일 : 사과 </div>')); //header가 끝나고 바로 뒤에 형제로 들어옴
		$('header').after($('<div> 좋아하는 과일 : 딸기 </div>')); // 먼저 형제로 넣은 것이 맨 밑으로 내려감
		
		$('<div> 좋아하는 과일 : 바나나 </div>').insertAfter($('header')); 
		$('<div> 좋아하는 과일 : 복숭아 </div>').insertAfter($('header')); 
		
		
		$('footer').before($('<div> 좋아하는 차 : 모닝 </div>')); //footer 바로앞에 배치
		$('footer').before($('<div> 좋아하는 차 : 아반떼 </div>'));
		
		$('<div> 좋아하는 차 : 투싼 </div>').insertBefore($('footer')); 
		$('<div> 좋아하는 차 : 소울 </div>').insertBefore($('footer')); 
	});
</script>
</head>
<body>
	<header>
		<h1>과일</h1>
	</header>
	
	<footer>
		<h3> <i> jQuery 공부중.. </i> </h3>
	</footer>
</body>


▶Ex03_insertAfter_before.html
<style type="text/css">
	.Chapter {
		background-color: Silver;
	}
	.Content {
		height: 100px;
		border: 1px solid red;
	}
</style>
<script type="text/javascript" src="./../js/jquery.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
      //[1] 모든 (.Content) 뒤에 구분선(<hr />) 삽입
        $('<hr size="10" color="blue"/>').insertAfter(".Content"); //insertAfter는 형제로 추가
      //$(".Content").after('<hr size="10" color="blue"/>'); 이것도 가능
      
      //[2] TOP 링크를 4보다 큰 p.Chapter 앞에 추가
      $('p.Chapter:gt(4)').before("<a href='#first'>TOP</a>"); //gt(4): 5번째 / 4보다 큰 : 6~7장 앞에 형제로 넣기

      // 또는
      //$('hr:gt(3)').after("<a href='#'>TOP</a>");    
    });
</script>
</head>
<body>
	<p class="Chapter" id="first">1 장</p>
	<div class="Content">내용...</div><br>

	<p class="Chapter">2 장</p>
	<div class="Content">내용...</div><br>

	<p class="Chapter">3 장</p>
	<div class="Content">내용...</div><br>

	<p class="Chapter">4 장</p>
	<div class="Content">내용...</div><br>

	<p class="Chapter">5 장</p>
	<div class="Content">내용...</div><br>

	<p class="Chapter">6 장</p>
	<div class="Content">내용...</div><br>

	<p class="Chapter">7 장</p>
	<div class="Content">내용...</div><br>
</body>


▶Ex04_append_not_end_filter.html
<title>Ex04_append_not_end_filter.html</title>
<script type="text/javascript" src="./../js/jquery.js"></script> 
   <script type="text/javascript">
   	//var len = 
   	$(function(){
   		$('.term').each(function(i){ // 첫번째 만난 .term의 i에는 0이 들어옴 (.term이 작업대상)
   			$(this).after('<sup>'+(i+1)+'</sup>'); //after(형제에 추가), append(자식에 추가) 결과에는 차이가없음
   			
   			// 0번째 부터 카운팅
   			/* 방법①
   			$('.term:even').each(function(){
   				$(this).css('background','yellow');
   			});
   			$('.term:odd').each(function(){
   				$(this).css('background','aqua');
   			});
   			*/
   			
   			/* 방법②
   			$('span:even').css('background','yellow');
   			$('span:odd').css('background','skyblue');
   			 */
   			 
   			/* 방법③ */
   			$('.term').css('background','yellow')
   					  .not(':even').css('background','lightblue'); // .not(':even') = .filter(':odd')
   			 // 작업대상은 어차피 .term이기 때문에 :even 앞에 생략가능
   		});
   	});
</script>
</head>
<body>
	<h3>jQuery is a new kind of JavaScript Library.</h3>
	<div>
		<span class="term">jQuery</span> is a fast and concise <span class="term">JavaScript</span> Library 
		that simplifies <span class="term">HTML</span> document traversing, 
		<span class="term">event handling</span>, animating, and <span class="term">Ajax</span> interactions 
		for rapid <span class="term">web</span> development. 
		jQuery is designed to change the way that you write JavaScript.
	</div>
</body>


▶Ex05_append(중요).html
<title>Ex05_append(중요).html</title>
<script src="./../js/jquery.js"></script>
<script>
	$(document).ready(function() {
		
		var img1 = "<img src='./../images/tara01.jpg'/>"; //사진아니고 문자열불러옴
		var img2 = "<img src='./../images/tara02.jpg'/>";
		var img3 = "<img src='./../images/tara03.jpg'/>";
		
		var h1 = "<h1>사진 감상</h1>";
		
		$('body').append(h1,img1,img2,img3); // 자식으로 여러개 한번에 추가할 수 있음
		
		/* 방법①
		$('img').css('width','100px').css('height','100px'); */
		
		//방법②
		$('img').css({
	         width : "100",
	         height : "100",
	         margin: "10px"
	     });
	});
</script>
</head>
<body>
 <!-- <h1>사진감상</h1> = $('body').append(h1); 바디의 자식으로 넣어라 -->
</body>


▶Ex06_empty_remove.html
<title>Ex06_empty_remove.html</title>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('#btnEmpty').click(function(){ // id가 btnEmpty인 곳에 접근해서 버튼을 클릭했을 때
			$('div').empty(); // div 안의 영역이 삭제됨 - 내용만 지울 뿐 태그는 남아있는 점 주의하기
			$('div').append("<b>hi~</b>"); // div 영역이 완전히 삭제된게 아니기 때문에 자식으로 추가하면 나타남
		});
			
		$('#btnRemove').click(function(){
			$('div').remove(); // div 영역 자체가 사라짐
			$('div').append("<b>hi~</b>"); // div가 삭제됬기 때문에 자식이 의미가없음 - 안나옴
			/*
			$('').empty(): 안의 영역이 삭제됨
			.remove(); 작업영역 자체가 (HTML 문서에서) 싹 삭제
			.removeClass(): 선택한 요소에서 클래스 값을 제거
			*/
		});
	});
</script>
</head>
<body>
	<div>
		<p>jQuery</p>
		<p>empty/remove</p>
	</div>
	
	<input type="button" id="btnEmpty" value="영역의 내용 삭제"/>
	<br>
	<input type="button" id="btnRemove" value="영역 자체를 삭제"/>
</body>


------------------------------ 04_jQuery_ch05 ------------------------------
▶Ex01_bind.html
<title>Ex01_bind.html</title>
<style type="text/css">
	div{
		width:100px;
		height:100px;
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	/* 강아지, 고양이 글자 클릭하거나 마우스 올리면 원래 있던 작은 이미지가 a태그 이미지로 바뀜 */
	$(document).ready(function(){
		$('a').bind('click mouseover', function(){ // a태그를 클릭하거나 마우스 올렸을 때 하고싶은 일은 무엇인지 function()안에 쓰기 - a태그와 click을 엮어줌
			//alert(1); // click하거나 mouseover 할때 alert 뜨게 설정(둘중 하나만 써줘도됨)
			
			//href 속성에 있는 값을 가져와서 src 속성으로 가져오기 - 마우스 올렸을 때 원래 있던 작은 이미지가 href 사진으로 바뀜
			temp = $(this).attr('href'); // this: 지금 마우스 올린 a 태그 / 마우스를 어느곳에 올렸는지 temp 변수에 넣어놓기
			//alert(temp); // 내가 마우스 올린 a 태그 사진을 temp에 넣어놓고 alert 띄우기
			
			$('img').attr('src',temp); // 작은 이미지에 temp에 있는 것을 src 속성(href 이미지)으로 넣어라 
			return false; // 이벤트 전파 방지 : a태그가 원래 가지고 있던 기능(다음페이지로 넘어감)을 실행하지 못하도록 하기
			
			/*위에 두줄을 한줄로 만들기
			→ $('img').attr('src', $(this).attr('href') ); */
		});
	});
</script>
</head>
<body>
	<ul>
		<li><a href="../images/image3.jpg">강아지</a></li> <!-- a태그 자체에 페이지로 넘어가라는 기능이있음 -->
		<li><a href="../images/image4.jpg">고양이</a></li>
	</ul>
	
	<img src="../images/im7.jpg">
	<div></div>
</body>


▶Ex02_bind_이벤트 동작.html
<title>Ex02_bind_이벤트 동작.html</title>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		/*
		// 여러 작업 모두 공통으로 하기 위해서는 bind 함수로 묶어줌
		$('img').bind('mouseover mouseout',function(){ // 마우스 올렸을 때, 치웠을 때 같은 작업 해줄 경우
			//alert(1);
		});
		*/
		cnt = 0; //횟수를 세줌
		
		$('img').bind({ // 마우스 올렸을 때 치웠을 때 각기 다른 작업 하기 위해서 {} 사용
					'mouseover' : function(){ // 따옴표 써도되고 안써도됨
						$('img').attr('src',"../images/but2.gif"); // 이미지에 마우스 올렸을 때 이미지 속성 바꾸고 싶다.
						cnt++; // 마우스 한번 올리면 횟수 올라감
						if(cnt == 5){
							$('img').unbind(); // 엮어주기 실행하지않음
						}
					}, // 콤마로 이어줌
					mouseout : function(){
						$('img').attr('src',"../images/but1.gif");
						cnt++; // 마우스 치울때도 횟수 올라감
						if(cnt == 5){
							$('img').unbind();
						}
					},
					click : function(){ // 이미지 클릭했을 때 실행되는 것
						alert("클릭");
					}		
			});
		});
</script>
</head>
<body>
	<img src="../images/but1.gif">
</body>
	

▶Ex03_bind.html
<title>Ex03_bind.html</title>
<style type="text/css">
	img{
		width: 100px;
		height: 80px;
	}
</style>

<script src="http://code.jquery.com/jquery-3.1.1.min.js" type="text/javascript"></script>
<script type="text/javascript">

/* 이미지 마우스 올렸다 내렸다 할때마다 가로,세로 길이 30씩 더하기
 * 만약 가로 길이가 400이 넘을 경우 이벤트 해지
 */
	$(document).ready(function(){
		//alert(1);
		$('img').bind('mouseover mouseout click',function(){ // 이벤트 계속 계속 실행할경우 계속 반복됨
			var target = $(event.target); //이벤트가 발생한 바로 그 대상 = 이미지 = $(this) = target = $(event.target)
			//target.width(200); // target의 너비설정;
			target.width(target.width()+30); // 현재 target의 가로 길이를 가져와서 30을 더해라 = 가로 길이 130이 됨
			target.height(target.height()+30); // 현재 target의 높이를 가져와라, 거기에 30을 더해라 = 높이 110이됨
			
			if(target.width() > 400){
				$('img').unbind('click'); // unbind() 괄호 안에 넣어주는 이벤트만 해지한다. → click에만 이벤트 해지
			}
				
		});
	});
</script>
</head>
<body>
	<img src="../images/b.jpg">
</body>


▶Ex04_toggle.html
<title>Ex04_toggle.html</title>
<!-- 버튼을 누를때마다 toggle 설정 다르게 하기 -->
<style type="text/css">
	img{
		width: 200px;
		height: 250px
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	//.toggle(): 선택한 요소가 보이면 보이지 않게, 보이지 않으면 보이게 설정
	$(document).ready(function(){
		$('img').toggle( // 이미지 누를때마다 다른 설정하고 싶을 경우 사용
						function(){
							$(this).css('opacity', 0.6); // opacity 속성 : 투명도 설정 (1이 가장 선명, 숫자 작을수록 흐려짐)
						},
						function(){
							$(event.target).css('opacity', 0.2);
						},
						function(){
							$(this).css('opacity', 1.0);
						}
					);
				});
</script>
</head>
<body>
	<img src="../images/e.jpg">
</body>


▶Ex05_live.html
<title>Ex05_live.html</title>
<style type="text/css">
	p{
		background: yellow;
		font-weight: bold;
		padding : 5px;
	}
</style>
<script type="text/javascript" src="../js/jquery.js"></script>
<script type="text/javascript">
	$(function(){
		cnt = 0;
		$('p').live('dblclick', function(){ //dblclick: 더블클릭
			$(this).after("<p>Another paragraph!" + cnt++ + "</p>"); //p target 바로 뒤에 형제로 넣기(.after)
			// bind로는 새로 생성된 p 태그에는 이벤트 설정 적용되지 않는다.
			// live로는 새로 생성된 p 태그에도 이벤트 설정 적용시킬 수 있다.
			// live: 이벤트 처리를 위임할 때 사용하는 함수
			
			//live 함수 끝나기 전에 작성
			if(cnt == 5){
				$('p').die(); // .die(): live 함수 해지
			}	
		});
	});
</script>
</head>
<body>
	<p>Click me!</p>
</body>


▶Ex06_change_select_img.html
<title>Ex06_change_select_img.html</title>
<style type="text/css">
	img{
		width: 80px;
		height: 80px;
		margin-left: 50px;
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(function(){
		$('#sel').change(function(){ // select 옵션에 변화가 생겼을 때 이미지가 출력됨
			//alert(1);
			
			var imgsrc = $(this).val(); // 지금 선택한 옵션의 value 값(strawberry.gif..) 가져오기
			//alert(imgsrc); // 파일이름을 가져온다
		
			$('#img').attr('src',"../images/"+imgsrc);
		}).change(); // 원래 옵션에 변화가 생겼을 때 이미지가 출력되지만, 창을 열자마자 사과가 뜨게 해주고 싶을 때 강제로 change() 지정
	});
</script>
</head>
<body>
	<form name="frm">
		<table> <!-- 한줄짜리 두칸 테이블 -->
			<tr>
				<td>
					<select id="sel">
						<option value="strawberry.gif">딸기
						<option value="banana.gif">바나나
						<option value="apple.gif" selected>사과
					</select>
				</td>
				<td>
					<img id="img">
				</td>
			</tr>
		</table>
	</form>
</body>


▶Ex07_change.html
<title>Insert title here</title>
<!-- 클릭한 option들의 value 값을 밑에 출력하기 -->
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('#coffee').change(function(){
			//alert(1);
			//alert($(this).text());
			cf = $('select>option:selected').text(); // coffee에 변화가 생겼을 때 select 자식의 option에 selected된 text 가져와라
			//alert(cf);
			
			$('div').html(cf); // append 쓰면 안지워지고 계속 선택한것 추가됨
			
			/*var src = $(this).text();
			 $('option').attr('value',src);*/
		}).change(); // 강제로 선택하면 기본값인 아메리카노도 밑에 text로 출력되어있음 
	});
<!-- 문자가져올 때는 text(), value 가져올땐는 val() -->
</script>
</head>
<body>
	<select id="coffee" multiple size="3"> <!-- 다중선택, select 박스 한번에 보이는 갯수 설정 -->
		<option value="coffee1">아메리카노</option> <!-- 아메리카노는 text -->
		<option value="coffee2">카페라떼</option>
		<option value="coffee3">카푸치노</option>
		<option value="coffee4">캬라멜마끼아또</option>
		<option value="coffee5">고구마라떼</option>
		<option value="coffee6">녹차라떼</option>
	</select>
	
	<div></div>
</body>


------------------------------ 04_jQuery_ch06 ------------------------------
▶Ex01_show_hide_toggle.html
<title>Ex01_show_hide_toggle.html</title>
<style type="text/css">
	span{
		display: none;
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		/* 첫번째 버튼 클릭했을 때 */
		$('button:eq(0)').click(function(){
			$('span:first').show(); // display:inline;
		});
		
		$('button:eq(1)').click(function(){
			$('span:first').hide(); // display:none;
		});
		
		$('button:eq(2)').click(function(){
			$('span:eq(1)').show(5000,function(){ // 5초에 걸쳐서 천천히 나타남
				$(this).css('background','yellow'); // 5초에 걸쳐서 나타난 후에 배경 노란색으로 설정
			}); 
		});
		
		$('button:eq(3)').click(function(){
			$('span:eq(1)').hide('slow',function(){ // 서서히 사라지고 alert
				alert(1);
			});	
		});
		
		$('button:eq(4)').click(function(){ // eq(4) = last
			$('span:last').toggle(); // toggle: 버튼 하나에 두가지 나타냄
		});
			
	}); // ready
</script>
</head>
<body>
	<button>Show it</button> <button>Hide it</button>
	<span>안녕하세요</span> <br>
	
	<button>Show it slow</button> <button>Hide it slow</button>
	<span>반갑습니다</span> <br>
	
	<button>Show/Hide</button>
	<span>또 만나요</span> <br>
</body>


▶Ex02_sliceUp_Down_Toggle.html
<title>Ex02_sliceUp_Down_Toggle.html</title>
<style type="text/css">
	div{
		background: yellow;
		width: 80px;
		height: 80px;
		float: left;
		margin: 3px;
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('#slideUp').click(function(){
			$('div').slideUp();
		});
		
		$('#slideDown').click(function(){
			$('div').slideDown('slow',function(){ // 천천히 내려오게 한 후,
				$(this).css('background','pink'); // 배경 pink로 설정
			});
		});
		
		$('#slideToggle').click(function(){
			$('div').slideToggle(3000); // 초 설정
		});
	}); // ready()
</script>
</head>
<body>
	<button id="slideUp">slideUp</button>
	<button id="slideDown">slideDown</button>
	<button id="slideToggle">slideToggle</button>
	<p>
	
	<div></div>
	<div></div>
	<div></div>
	<div></div>
</body>


▶Ex03_slide.html
<title>Ex03_slide.html</title>
<style type="text/css">
	#panel1,#panel2{ /* 그룹 선택자 이용-양쪽에 공통되는 스타일 적용 */
		background-color: green;
		padding: 5px; /* 안쪽여백 지정 */
		border: 1px solid #c3c3c3;
		text-align: center; /* 글자 가운데 정렬 */
	}
	#panel2{
		display: none; /* 글자 있긴 있는데 잠깐 안보이게함 */
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		/* panel1 누르면 toggle 슬라이드 후에, 이미지에 빨간 테두리 설정 */
		$('#panel1').click(function(){
			$('#panel2').slideToggle('slow',function(){ // slow 또는 시간
				$('#panel2 img').css('border','2px solid red'); // #panel2 img 또는 img 사용 가능
			});
		});
	}); //ready()
</script>
</head>
<body>
	<div id="panel1">Click to slidedown panel</div>
	<div id="panel2">
		<img src="./../images/im0.jpg">
	</div>
</body>


▶Ex04_fadeIn_To_Out.html
<title>Ex04_fadeIn_To_Out.html</title>
<style type="text/css">
	div{
		background: yellow;
		width: 80px;
		height: 80px;
		float: left;
		margin: 3px;
		display: none; /* 글씨 잠깐 안보이게 설정 */
	}
	div#red{background: red} /* div의 red인 곳 설정  */
	div#green{background: green}
	div#blue{background: blue}
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		/* 아무데나 클릭했을 때 : document */
		$(document).click(function(){ // 전체 공간 아무데가 클릭했을 때 / document에 ''따옴표 사용X
			//alert(1);
			$('div:hidden:first').fadeIn(3000).fadeTo('slow',0.3).fadeOut(5000); // 차례대로 실행됨
			/* fadeIn: 전체가 서서히 나타내는 효과(점점 나타나는 효과)
				안보이는 것들중에 첫번째 : 'div:hidden:first' - 클릭할때마다 하나씩 나타남 */
			// fadeTo: 투명도 설정
			/* fadeOut(): 안보임  - display: none 설정됨 */
			
		});
	});
</script>
</head>
<body>
	<span>클릭</span>
	<p></p>
	<div id="red"><span>하하하</span></div>
	<div id="green"></div>
	<div id="blue"></div>
</body>


▶Ex05_fadeIn_Out_position.html
<title>Ex05_fadeIn_Out_position.html</title>
<style type="text/css">
	p{
		width: 400px;
		height: 90px;
		border: 1px solid black;
	}
	div{
		width: 400px;
		height: 65px;
		font-size: 35px;
		text-align: center;
		background: red;
		padding-top: 25px;
		/* position 이용해서 p 영역을 div로 덮었다 지웠다 하기 */
		position: absolute; /* 꼭지점 이동 해서 옮기기 */
		top: 17px;
		left: 9px;
		display: none;
	}
	span{
		display: none;
		color: yellow;
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('#fadeIn').click(function(){ // id가 fadeIn 버튼을 클릭했을 때,
			$('div').fadeIn(1000,function(){ //div가 1초에 걸쳐서 서서히 나타나고 다 나타난 후에,
				$('span').fadeIn(2000); //span이 2초에 걸쳐서 나타나게 하는 작업
			});
		});
		/* span이 사라지게 하고 빨간 영역이 사라지게하기/ 위에꺼랑 반대적용 */
		$('#fadeOut').click(function(){
			$('span').fadeOut(3000,function(){
				$('div').fadeOut(1000);		
			});
		});
		$('#fadeToggle').click(function(){
			$('div').fadeToggle(3000,function(){
				$('span').fadeToggle(2000);
			});
		});
	}); //ready()
</script>
</head>
<body>
	<p>
		불투명도를 점점 높여서 보이도록 한다.
		speed를 fast, normal, slow 또는 0이상의 숫자를 준다.
		애니메이션이 끝난 후에 실행할 함수를 지정한다.
	</p>
	
	<div>
		<span> S U C C E S S !</span>
	</div>
	
	<button id="fadeIn">fadeIn</button>
	<button id="fadeOut">fadeOut</button>
	<button id="fadeToggle">fadeToggle</button>
</body>


▶Ex07_animate.html
<title>Ex07_animate.html</title>
<style type="text/css">
	#region{
		width: 200px; /* 이미지를 감싸는 region 영역이 이미지 보다 작음 */
		height: 200px;
		overflow: hidden; /* 이미지 넘치는 것은 숨겨라 */
		margin: auto; /* 자동으로 가운데 배치 */
	}
	#images{
		width: 600px;
		height: 200px;
	}
	#images a img{ /* 가로 200짜리 이미지 3개 */
		width: 200px;
		height: 200px;
	}
	#direction{ /* 버튼 영역 가운데로 설정 */
		width: 360px;
		margin: auto;
	}
	.leftbtn{
		margin-top: 10px;
	}
	.rightbtn{
		margin-top: 10px;
		margin-left: 290px;
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		var i = -1;
		$('.leftbtn').bind('click',function(){
			if(i==1){
				alert('마지막 이미지입니다.');
				return; // 사진 계속 끌고오지 못하도록 설정
			}
			$('#firstimage').animate({marginLeft : '-=205px'},2000); // 첫번째 이미지 왼쪽 여백을 2초에 걸쳐서 점점 줄이기
			i++; // 이미지를 하나씩 끌고 올때마다 1씩 추가해줌
		});
		
		$('.rightbtn').bind('click',function(){
			if(i==-1){
				alert('처음 이미지입니다.');
				return;
			}
			$('#firstimage').animate({marginLeft : '+=205px'},2000);
			i--;
		});
	}); // ready()
</script>
</head>
<body>
	<div id="region">
		<div id="images">
			<a href="#"><img src="../images/b.jpg" id="firstimage"></a>
			<a href="#"><img src="../images/c.jpg" id="secondimage"></a>
			<a href="#"><img src="../images/d.jpg" id="thirdimage"></a>
		</div>
	</div>
	
	<div id="direction">
		<button class="leftbtn"> &laquo; </button> <!-- << -->
		<button class="rightbtn"> &raquo; </button> <!-- >> -->
	</div>
</body>


▶Ex08_animate
<title>Ex08_animate.html</title>
<style type="text/css">
	div{
		left: 150px;
		position: absolute; /* static(default값)은 좌표 움직이지않음 */
	}
</style>
<script src="./../js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$('button').click(function(){
			$('div').animate({left : '+=300px', // 왼쪽으로 300px만큼 이동
								opacity : '0.4' // 투명도 설정
								},"slow");
			$('div').animate({
								width: '300px',
								opacity: '0.8'
								},'slow');
			$('div').animate({
								height: '200px',
								opacity: '0.1'
								},'slow');
		});
	}); // ready()
</script>
</head>
<body>
	<button>Start Animation</button>
	<p>상, 하, 좌, 우로 움직이는 애니메이션</p>
	<br><br>
	
	<div style="background:green; height:100px; width:100px;"></div>
</body>


▶Ex09_form_input_total.htm



------------------------------ 04_jQuery_ch07 ------------------------------
▶Ex01_Object생성.html



▶Ex02_Object.html



▶Ex03_load.html



▶Ex04_ajax.html



▶Ex05_JSON.html



▶Ex06_ajax.html



▶Ex07_getJSON.html



▶Ex08_get함수.html



------------------------------ 04_jQuery_ch08 ------------------------------
▶Ex01_magnify.html



▶Ex02_dataTable.html



▶Ex03_rotator.html



▶Ex04_accordion.html


